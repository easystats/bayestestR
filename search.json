[{"path":[]},{"path":"https://easystats.github.io/bayestestR/CODE_OF_CONDUCT.html","id":"our-pledge","dir":"","previous_headings":"","what":"Our Pledge","title":"Contributor Covenant Code of Conduct","text":"members, contributors, leaders pledge make participation community harassment-free experience everyone, regardless age, body size, visible invisible disability, ethnicity, sex characteristics, gender identity expression, level experience, education, socio-economic status, nationality, personal appearance, race, caste, color, religion, sexual identity orientation. pledge act interact ways contribute open, welcoming, diverse, inclusive, healthy community.","code":""},{"path":"https://easystats.github.io/bayestestR/CODE_OF_CONDUCT.html","id":"our-standards","dir":"","previous_headings":"","what":"Our Standards","title":"Contributor Covenant Code of Conduct","text":"Examples behavior contributes positive environment community include: Demonstrating empathy kindness toward people respectful differing opinions, viewpoints, experiences Giving gracefully accepting constructive feedback Accepting responsibility apologizing affected mistakes, learning experience Focusing best just us individuals, overall community Examples unacceptable behavior include: use sexualized language imagery, sexual attention advances kind Trolling, insulting derogatory comments, personal political attacks Public private harassment Publishing others’ private information, physical email address, without explicit permission conduct reasonably considered inappropriate professional setting","code":""},{"path":"https://easystats.github.io/bayestestR/CODE_OF_CONDUCT.html","id":"enforcement-responsibilities","dir":"","previous_headings":"","what":"Enforcement Responsibilities","title":"Contributor Covenant Code of Conduct","text":"Community leaders responsible clarifying enforcing standards acceptable behavior take appropriate fair corrective action response behavior deem inappropriate, threatening, offensive, harmful. Community leaders right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct, communicate reasons moderation decisions appropriate.","code":""},{"path":"https://easystats.github.io/bayestestR/CODE_OF_CONDUCT.html","id":"scope","dir":"","previous_headings":"","what":"Scope","title":"Contributor Covenant Code of Conduct","text":"Code Conduct applies within community spaces, also applies individual officially representing community public spaces. Examples representing community include using official e-mail address, posting via official social media account, acting appointed representative online offline event.","code":""},{"path":"https://easystats.github.io/bayestestR/CODE_OF_CONDUCT.html","id":"enforcement","dir":"","previous_headings":"","what":"Enforcement","title":"Contributor Covenant Code of Conduct","text":"Instances abusive, harassing, otherwise unacceptable behavior may reported community leaders responsible enforcement dom.makowski@gmail.com. complaints reviewed investigated promptly fairly. community leaders obligated respect privacy security reporter incident.","code":""},{"path":"https://easystats.github.io/bayestestR/CODE_OF_CONDUCT.html","id":"enforcement-guidelines","dir":"","previous_headings":"","what":"Enforcement Guidelines","title":"Contributor Covenant Code of Conduct","text":"Community leaders follow Community Impact Guidelines determining consequences action deem violation Code Conduct:","code":""},{"path":"https://easystats.github.io/bayestestR/CODE_OF_CONDUCT.html","id":"id_1-correction","dir":"","previous_headings":"Enforcement Guidelines","what":"1. Correction","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Use inappropriate language behavior deemed unprofessional unwelcome community. Consequence: private, written warning community leaders, providing clarity around nature violation explanation behavior inappropriate. public apology may requested.","code":""},{"path":"https://easystats.github.io/bayestestR/CODE_OF_CONDUCT.html","id":"id_2-warning","dir":"","previous_headings":"Enforcement Guidelines","what":"2. Warning","title":"Contributor Covenant Code of Conduct","text":"Community Impact: violation single incident series actions. Consequence: warning consequences continued behavior. interaction people involved, including unsolicited interaction enforcing Code Conduct, specified period time. includes avoiding interactions community spaces well external channels like social media. Violating terms may lead temporary permanent ban.","code":""},{"path":"https://easystats.github.io/bayestestR/CODE_OF_CONDUCT.html","id":"id_3-temporary-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"3. Temporary Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: serious violation community standards, including sustained inappropriate behavior. Consequence: temporary ban sort interaction public communication community specified period time. public private interaction people involved, including unsolicited interaction enforcing Code Conduct, allowed period. Violating terms may lead permanent ban.","code":""},{"path":"https://easystats.github.io/bayestestR/CODE_OF_CONDUCT.html","id":"id_4-permanent-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"4. Permanent Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Demonstrating pattern violation community standards, including sustained inappropriate behavior, harassment individual, aggression toward disparagement classes individuals. Consequence: permanent ban sort public interaction within community.","code":""},{"path":"https://easystats.github.io/bayestestR/CODE_OF_CONDUCT.html","id":"attribution","dir":"","previous_headings":"","what":"Attribution","title":"Contributor Covenant Code of Conduct","text":"Code Conduct adapted Contributor Covenant, version 2.1, available https://www.contributor-covenant.org/version/2/1/code_of_conduct.html. Community Impact Guidelines inspired [Mozilla’s code conduct enforcement ladder][https://github.com/mozilla/inclusion]. answers common questions code conduct, see FAQ https://www.contributor-covenant.org/faq. Translations available https://www.contributor-covenant.org/translations.","code":""},{"path":"https://easystats.github.io/bayestestR/CONTRIBUTING.html","id":null,"dir":"","previous_headings":"","what":"Contribution Guidelines","title":"Contribution Guidelines","text":"easystats guidelines 0.1.0 people much welcome contribute code, documentation, testing suggestions. package aims beginner-friendly. Even ’re new open-source way life, new coding github stuff, encourage try submitting pull requests (PRs). “’d like help, ’m good enough programming yet” ’s alright, don’t worry! can always dig code, documentation tests. always typos fix, docs improve, details add, code lines document, tests add… Even smaller PRs appreciated. “’d like help, don’t know start” can look around issue section find features / ideas / bugs start working . can also open new issue just say ’re , interested helping . might ideas adapted skills. “’m sure suggestion idea worthwile” Enough impostor syndrom! suggestions opinions good, even ’s just thought , ’s always good receive feedback. “waste time ? get credit?” Software contributions getting valued academic world, good time collaborate us! Authors substantial contributions added within authors list. ’re also keen including eventual academic publications. Anyway, starting important! enter whole new world, new fantastic point view… fork repo, changes submit . work together make best :)","code":""},{"path":"https://easystats.github.io/bayestestR/CONTRIBUTING.html","id":"code","dir":"","previous_headings":"","what":"Code","title":"Contribution Guidelines","text":"Please document comment code, purpose step (code line) stated clear understandable way. submitting change, please read R style guide particular easystats convention code-style keep consistency code formatting. Regarding style guide, note exception: put readability clarity everything. Thus, like underscores full names (prefer model_performance modelperf interpret_odds_logistic intoddslog). start code, make sure ’re dev branch (“advanced”). , can create new branch named feature (e.g., feature_lightsaber) changes. Finally, submit branch merged dev branch. , every now , dev branch merge master, new package version.","code":""},{"path":"https://easystats.github.io/bayestestR/CONTRIBUTING.html","id":"checks-to-do-before-submission","dir":"","previous_headings":"","what":"Checks to do before submission","title":"Contribution Guidelines","text":"Make sure documentation (roxygen) good Make sure add tests new functions Run: styler::style_pkg(): Automatic style formatting lintr::lint_package(): Style checks devtools::check(): General checks","code":""},{"path":"https://easystats.github.io/bayestestR/CONTRIBUTING.html","id":"useful-materials","dir":"","previous_headings":"","what":"Useful Materials","title":"Contribution Guidelines","text":"Understanding GitHub flow","code":""},{"path":"https://easystats.github.io/bayestestR/PULL_REQUEST_TEMPLATE.html","id":null,"dir":"","previous_headings":"","what":"Description","title":"Description","text":"PR aims adding feature…","code":""},{"path":"https://easystats.github.io/bayestestR/PULL_REQUEST_TEMPLATE.html","id":"proposed-changes","dir":"","previous_headings":"","what":"Proposed Changes","title":"Description","text":"changed foo function …","code":""},{"path":"https://easystats.github.io/bayestestR/articles/bayes_factors.html","id":"the-bayes-factor","dir":"Articles","previous_headings":"","what":"The Bayes Factor","title":"Bayes Factors","text":"Bayes Factors (BFs) indices relative evidence one “model” another. role hypothesis testing index, Bayesian framework \\(p\\)-value classical/frequentist framework. significance-based testing, \\(p\\)-values used assess unlikely observed data null hypothesis true, Bayesian model selection framework, Bayes factors assess evidence different models, model corresponding specific hypothesis. According Bayes’ theorem, can update prior probabilities model \\(M\\) (\\(P(M)\\)) posterior probabilities (\\(P(M|D)\\)) observing datum \\(D\\) accounting probability observing datum given model (\\(P(D|M)\\), also known likelihood): \\[ P(M|D) = \\frac{P(D|M)\\times P(M)}{P(D)} \\] Using equation, can compare probability-odds two models: \\[ \\underbrace{\\frac{P(M_1|D)}{P(M_2|D)}}_{\\text{Posterior Odds}} = \\underbrace{\\frac{P(D|M_1)}{P(D|M_2)}}_{\\text{Likelihood Ratio}} \\times \\underbrace{\\frac{P(M_1)}{P(M_2)}}_{\\text{Prior Odds}} \\] likelihood ratio (middle term) Bayes factor - factor prior odds updated observing data posterior odds. Thus, Bayes factors can calculated two ways: ratio quantifying relative probability observed data two models. (contexts, probabilities also called marginal likelihoods.) \\[ BF_{12}=\\frac{P(D|M_1)}{P(D|M_2)} \\] degree shift prior beliefs relative credibility two models (since can computed dividing posterior odds prior odds). \\[ BF_{12}=\\frac{Posterior~Odds_{12}}{Prior~Odds_{12}} \\] provide functions computing Bayes factors two different contexts: testing single parameters (coefficients) within model comparing statistical models ","code":""},{"path":"https://easystats.github.io/bayestestR/articles/bayes_factors.html","id":"bayesfactor_parameters","dir":"Articles","previous_headings":"","what":"Testing Models’ Parameters with Bayes Factors","title":"Bayes Factors","text":"Bayes factor single parameter can used answer question: “Given observed data, null hypothesis absence effect become less credible?” Bayesian analysis Students’ (1908) Sleep data set. Let’s use Students’ (1908) Sleep data set (data(\"sleep\")). data comes study participants administered drug researchers assessed extra hours sleep participants slept afterwards. try answering following research question using Bayes factors: Given observed data, hypothesis drug (effect group) effect numbers hours extra sleep (variable extra) become less credible?  boxplot suggests second group higher number hours extra sleep. much? Let’s fit simple Bayesian linear model, prior \\(b_{group} \\sim N(0, 3)\\) (.e. prior follows Gaussian/normal distribution \\(mean = 0\\) \\(SD = 3\\)), using rstanarm package:","code":"set.seed(123) library(rstanarm)  model <- stan_glm(   formula = extra ~ group,   data = sleep,   prior = normal(0, 3, autoscale = FALSE),   chains = 10, iter = 5000, warmup = 1000 )"},{"path":"https://easystats.github.io/bayestestR/articles/bayes_factors.html","id":"testing-against-a-null-region","dir":"Articles","previous_headings":"Testing Models’ Parameters with Bayes Factors","what":"Testing against a null-region","title":"Bayes Factors","text":"One way operationlizing null-hypothesis setting null region, effect falls within interval practically equivalent null (Kruschke, 2010). case, means defining range effects consider equal drug effect . can compute prior probability drug’s effect falling outside null-region, prior probability drug’s effect falling within null-region get prior odds. Say effect smaller hour extra sleep practically equivalent effect , define prior odds : \\[ \\frac {P(b_{drug} \\notin [-1, 1])} {P(b_{drug} \\[-1, 1])} \\] Given prior normal distribution centered 0 hours scale (SD) 3 hours, priors look like :  prior odds 2.8. looking posterior distribution, can now compute posterior probability drug’s effect falling outside null-region, posterior probability drug’s effect falling within null-region get posterior odds: \\[ \\frac {P(b_{drug} \\notin [-1,1] | Data)} {P(b_{drug} \\[-1,1] | Data)} \\]  can see center posterior distribution shifted away 0 (~1.5). Likewise, posterior odds 2.5, seems favor effect non-null. , mean data support alternative null? Hard say, since even data observed, priors already favored alternative - need take priors account ! Let’s compute Bayes factor change prior odds posterior odds: \\(BF_{10} = Odds_{posterior} / Odds_{prior} = 0.9\\)! BF indicates data provide 1/0.9 = 1.1 times evidence effect drug practically nothing drug clinically significant effect. Thus, although center distribution shifted away 0, posterior distribution seems favor non-null effect drug, seems given observed data, probability mass overall shifted closer null interval, making values null interval probable! (see Non-overlapping Hypotheses Morey & Rouder, 2011) can achieved function bayesfactor_parameters(), computes Bayes factor model’s parameters: can also plot using see package:  Note interpretation guides Bayes factors can found effectsize package:","code":"My_first_BF <- bayesfactor_parameters(model, null = c(-1, 1)) My_first_BF > Bayes Factor (Null-Interval) >  > Parameter   |    BF > ------------------- > (Intercept) | 0.103 > group2      | 0.891 >  > * Evidence Against The Null: [-1.000, 1.000] library(see) plot(My_first_BF) effectsize::interpret_bf(exp(My_first_BF$log_BF[2]), include_value = TRUE) > [1] \"anecdotal evidence (BF = 1/1.12) against\" > (Rules: jeffreys1961)"},{"path":"https://easystats.github.io/bayestestR/articles/bayes_factors.html","id":"testing-against-the-point-null-0","dir":"Articles","previous_headings":"Testing Models’ Parameters with Bayes Factors","what":"Testing against the point-null (0)","title":"Bayes Factors","text":"don’t know region practically equivalent 0? just want null exactly zero? problem - width null region shrinks point, change prior probability posterior probability null can estimated comparing density null value two distributions.1 ratio called Savage-Dickey ratio, added benefit also approximation Bayes factor comparing estimated model model parameter interest restricted point-null: “[…] Bayes factor \\(H_0\\) versus \\(H_1\\) obtained analytically integrating model parameter \\(\\theta\\). However, Bayes factor may likewise obtained considering \\(H_1\\), dividing height posterior \\(\\theta\\) height prior \\(\\theta\\), point interest.” (Wagenmakers, Lodewyckx, Kuriyal, & Grasman, 2010)","code":"My_second_BF <- bayesfactor_parameters(model, null = 0) My_second_BF > Bayes Factor (Savage-Dickey density ratio) >  > Parameter |   BF > ---------------- > group2    | 1.27 >  > * Evidence Against The Null: 0 plot(My_second_BF)"},{"path":"https://easystats.github.io/bayestestR/articles/bayes_factors.html","id":"directional-hypotheses","dir":"Articles","previous_headings":"Testing Models’ Parameters with Bayes Factors","what":"Directional hypotheses","title":"Bayes Factors","text":"can also compute Bayes factors directional hypotheses (“one sided”), prior hypotheses direction effect. can done setting order restriction prior distribution (results order restriction posterior distribution) alternative (Morey & Wagenmakers, 2014). example, prior hypothesis drug positive effect number sleep hours, alternative restricted region right null (point interval):  can see, given priori assumption direction effect (effect positive), presence effect 2.8 times likely absence effect, given observed data (data 2.8 time probable \\(H_1\\) \\(H_0\\)). indicates , given observed data, priori hypothesis, posterior mass shifted away null value, giving evidence null (note Bayes factor 2.8 still considered quite weak evidence). Thanks flexibility Bayesian framework, also possible compute Bayes factor dividing hypotheses - , null alternative complementary, opposing one-sided hypotheses (Morey & Wagenmakers, 2014). example, compared alternative \\(H_A\\): drug positive effects null \\(H_0\\): drug effect. can also compare instead alternative complementary hypothesis: \\(H_{-}\\): drug negative effects.  can see test produces even stronger (conclusive) evidence one-sided vs. point-null test! indeed, rule thumb, specific two hypotheses , distinct one another, power Bayes factor ! 2 Thanks transitivity Bayes factors, can also use bayesfactor_parameters() compare even types hypotheses, trickery. example: \\[ \\underbrace{BF_{0<b<1\\text{ vs. }b=0}}_{\\text{range vs. point}} = \\underbrace{BF_{b<0\\text{ vs. }b=0}}_{\\text{directional vs. point}} / \\underbrace{BF_{b<0\\text{ vs. }0<b<1}}_{\\text{directional vs. range}} \\] NOTE: See Testing Contrasts appendix .","code":"test_group2_right <- bayesfactor_parameters(model, direction = \">\") test_group2_right > Bayes Factor (Savage-Dickey density ratio) >  > Parameter |   BF > ---------------- > group2    | 2.44 >  > * Evidence Against The Null: 0 > *                 Direction: Right-Sided test plot(test_group2_right) test_group2_dividing <- bayesfactor_parameters(model, null = c(-Inf, 0)) test_group2_dividing > Bayes Factor (Null-Interval) >  > Parameter |    BF > ----------------- > group2    | 20.93 >  > * Evidence Against The Null: [-Inf, 0.000] plot(test_group2_dividing)"},{"path":"https://easystats.github.io/bayestestR/articles/bayes_factors.html","id":"si","dir":"Articles","previous_headings":"Testing Models’ Parameters with Bayes Factors","what":"Support intervals","title":"Bayes Factors","text":"far ’ve seen Bayes factors quantify relative support competing hypotheses. However, can also ask: Upon observing data, credibility parameter’s values increased (decreased)? example, ’ve seen point null become somewhat less credible observing data, might also ask values gained credibility given observed data?. resulting range values called support interval indicates values supported data (Wagenmakers, Gronau, Dablander, & Etz, 2018). can comparing prior posterior distributions checking posterior densities higher prior densities. bayestestR, can achieved si() function: argument BF = 1 indicates want interval contain values gained support factor least 1 (, support ). Visually, can see credibility values within interval increased (likewise credibility values outside interval decreased):  can also see support interval (just barely) excludes point null (0) - whose credibility ’ve already seen decreased observed data. emphasizes relationship support interval Bayes factor: “interpretation intervals analogous frequentist confidence interval contains parameter values rejected tested level \\(\\alpha\\). instance, BF = 1/3 support interval encloses values theta updating factor stronger 3 .” (Wagenmakers et al., 2018) Thus, choice BF (level support interval indicate) depends want interval represent: \\(BF = 1\\) contains values whose credibility merely decreased observing data. \\(BF > 1\\) contains values received impressive support data. \\(BF < 1\\) contains values whose credibility impressively decreased observing data. Testing values outside interval produce Bayes factor larger \\(1/BF\\) support alternative.","code":"my_first_si <- si(   posterior = data.frame(group2 = posterior),   prior = data.frame(group2 = prior),   BF = 1,   verbose = FALSE )  print(my_first_si) > Support Interval >  > Parameter |    BF = 1 SI > ------------------------ > group2    | [0.15, 3.04] plot(my_first_si)"},{"path":"https://easystats.github.io/bayestestR/articles/bayes_factors.html","id":"bayesfactor_models","dir":"Articles","previous_headings":"","what":"Comparing Models using Bayes Factors","title":"Bayes Factors","text":"Bayes factors can also used compare statistical models. statistical context, answer following question: model observed data probable? words, model likely produced observed data? usually done comparing marginal likelihoods two models. case, Bayes factor measure relative evidence one model . Let’s use Bayes factors model comparison find model best describes length iris’ sepal using iris data set.","code":""},{"path":"https://easystats.github.io/bayestestR/articles/bayes_factors.html","id":"for-bayesian-models-brms-and-rstanarm","dir":"Articles","previous_headings":"Comparing Models using Bayes Factors","what":"For Bayesian models (brms and rstanarm)","title":"Bayes Factors","text":"Note: order compute Bayes factors Bayesian models, non-default arguments must added upon fitting: brmsfit models must fitted save_pars = save_pars(= TRUE) stanreg models must fitted defined diagnostic_file. Let’s first fit 5 Bayesian regressions brms predict Sepal.Length: can now compare models bayesfactor_models() function, using denominator argument specify model rest models compared (case, intercept-model): can see Species + Petal.Length model best model - \\(BF=2\\times 10^{53}\\) compared null (intercept ). Due transitive property Bayes factors, can easily change reference model full Species * Petal.Length model: can see, Species + Petal.Length model also favored compared Species * Petal.Length model, though several orders magnitude less - supported 23.38 times !) can also change reference model Species model: Notice , Bayesian framework compared models need nested models, happened compared Petal.Length-model Species-model (something done frequentist framework, compared models must nested one another). can also get matrix Bayes factors pairwise model comparisons: NOTE: order correctly precisely estimate Bayes Factors, always need 4 P’s: Proper Priors 3, Plentiful Posterior 4.","code":"library(brms)  # intercept only model m0 <- brm(Sepal.Length ~ 1,   data = iris,   prior =     set_prior(\"student_t(3, 6, 6)\", class = \"Intercept\") +       set_prior(\"student_t(3, 0, 6)\", class = \"sigma\"),   chains = 10, iter = 5000, warmup = 1000,   save_pars = save_pars(all = TRUE) )  # Petal.Length only m1 <- brm(Sepal.Length ~ Petal.Length,   data = iris,   prior =     set_prior(\"student_t(3, 6, 6)\", class = \"Intercept\") +       set_prior(\"student_t(3, 0, 6)\", class = \"sigma\") +       set_prior(\"normal(0, 1)\", coef = \"Petal.Length\"),   chains = 10, iter = 5000, warmup = 1000,   save_pars = save_pars(all = TRUE) )  # Species only m2 <- brm(Sepal.Length ~ Species,   data = iris,   prior =     set_prior(\"student_t(3, 6, 6)\", class = \"Intercept\") +       set_prior(\"student_t(3, 0, 6)\", class = \"sigma\") +       set_prior(\"normal(0, 3)\", coef = c(\"Speciesversicolor\", \"Speciesvirginica\")),   chains = 10, iter = 5000, warmup = 1000,   save_pars = save_pars(all = TRUE) )  # Species + Petal.Length model m3 <- brm(Sepal.Length ~ Species + Petal.Length,   data = iris,   prior =     set_prior(\"student_t(3, 6, 6)\", class = \"Intercept\") +       set_prior(\"student_t(3, 0, 6)\", class = \"sigma\") +       set_prior(\"normal(0, 1)\", coef = \"Petal.Length\") +       set_prior(\"normal(0, 3)\", coef = c(\"Speciesversicolor\", \"Speciesvirginica\")),   chains = 10, iter = 5000, warmup = 1000,   save_pars = save_pars(all = TRUE) )  # full interactive model m4 <- brm(Sepal.Length ~ Species * Petal.Length,   data = iris,   prior =     set_prior(\"student_t(3, 6, 6)\", class = \"Intercept\") +       set_prior(\"student_t(3, 0, 6)\", class = \"sigma\") +       set_prior(\"normal(0, 1)\", coef = \"Petal.Length\") +       set_prior(\"normal(0, 3)\", coef = c(\"Speciesversicolor\", \"Speciesvirginica\")) +       set_prior(\"normal(0, 2)\", coef = c(\"Speciesversicolor:Petal.Length\", \"Speciesvirginica:Petal.Length\")),   chains = 10, iter = 5000, warmup = 1000,   save_pars = save_pars(all = TRUE) ) library(bayestestR)  comparison <- bayesfactor_models(m1, m2, m3, m4, denominator = m0) comparison > Bayes Factors for Model Comparison >  >     Model                        BF > [1] Petal.Length           1.27e+44 > [2] Species                8.34e+27 > [3] Species + Petal.Length 2.29e+53 > [4] Species * Petal.Length 9.79e+51 >  > * Against Denominator: [5] (Intercept only) > *   Bayes Factor Type: marginal likelihoods (bridgesampling) update(comparison, reference = 4) > Bayes Factors for Model Comparison >  >     Model                        BF > [1] Petal.Length           1.30e-08 > [2] Species                8.52e-25 > [3] Species + Petal.Length    23.38 > [5] (Intercept only)       1.02e-52 >  > * Against Denominator: [4] Species * Petal.Length > *   Bayes Factor Type: marginal likelihoods (bridgesampling) update(comparison, reference = 2) > Bayes Factors for Model Comparison >  >     Model                        BF > [1] Petal.Length           1.53e+16 > [3] Species + Petal.Length 2.74e+25 > [4] Species * Petal.Length 1.17e+24 > [5] (Intercept only)       1.20e-28 >  > * Against Denominator: [2] Species > *   Bayes Factor Type: marginal likelihoods (bridgesampling) as.matrix(comparison) > # Bayes Factors for Model Comparison  >  >               Numerator > Denominator >  >                 |      [1] |      [2] |      [3] |      [4] |      [5] > --------------------------------------------------------------------------------- > [1] Petal.Length           |        1 | 6.54e-17 | 1.80e+09 | 7.68e+07 | 7.85e-45 > [2] Species                | 1.53e+16 |        1 | 2.74e+25 | 1.17e+24 | 1.20e-28 > [3] Species + Petal.Length | 5.57e-10 | 3.64e-26 |        1 |    0.043 | 4.37e-54 > [4] Species * Petal.Length | 1.30e-08 | 8.52e-25 |    23.38 |        1 | 1.02e-52 > [5] (Intercept only)       | 1.27e+44 | 8.34e+27 | 2.29e+53 | 9.79e+51 |        1"},{"path":"https://easystats.github.io/bayestestR/articles/bayes_factors.html","id":"for-frequentist-models-via-the-bic-approximation","dir":"Articles","previous_headings":"Comparing Models using Bayes Factors","what":"For Frequentist models via the BIC approximation","title":"Bayes Factors","text":"also possible compute Bayes factors comparison frequentist models. done comparing BIC measures, allowing Bayesian comparison nested well non-nested frequentist models (Wagenmakers, 2007). Let’s try linear mixed-effects models:","code":"library(lme4)  # define models with increasing complexity m0 <- lmer(Sepal.Length ~ (1 | Species), data = iris) m1 <- lmer(Sepal.Length ~ Petal.Length + (1 | Species), data = iris) m2 <- lmer(Sepal.Length ~ Petal.Length + (Petal.Length | Species), data = iris) m3 <- lmer(Sepal.Length ~ Petal.Length + Petal.Width + (Petal.Length | Species), data = iris) m4 <- lmer(Sepal.Length ~ Petal.Length * Petal.Width + (Petal.Length | Species), data = iris)  # model comparison bayesfactor_models(m1, m2, m3, m4, denominator = m0) > Bayes Factors for Model Comparison >  >      Model                                                       BF > [m1] Petal.Length + (1 | Species)                          3.82e+25 > [m2] Petal.Length + (Petal.Length | Species)               4.96e+24 > [m3] Petal.Length + Petal.Width + (Petal.Length | Species) 4.03e+23 > [m4] Petal.Length * Petal.Width + (Petal.Length | Species) 9.06e+22 >  > * Against Denominator: [m0] 1 + (1 | Species) > *   Bayes Factor Type: BIC approximation"},{"path":"https://easystats.github.io/bayestestR/articles/bayes_factors.html","id":"bayesfactor_restricted","dir":"Articles","previous_headings":"Comparing Models using Bayes Factors","what":"Order restricted models","title":"Bayes Factors","text":"stated discussing one-sided hypothesis tests, can create new models imposing order restrictions given model. example, consider following model, predict length iris’ sepal length petal, well species, priors: - \\(b_{petal} \\sim N(0,2)\\) - \\(b_{versicolors}\\ \\&\\  b_{virginica} \\sim N(0,1.2)\\) priors unrestricted - , values \\(-\\infty\\) \\(\\infty\\) parameters model non-zero credibility (matter small; true prior posterior distribution). Subsequently, priori ordering parameters relating iris species can ordering, priori setosa can larger sepals virginica, also possible virginica larger sepals setosa! make sense let priors cover possibilities? depends prior knowledge hypotheses. example, even novice botanist assume unlikely petal length negatively associated sepal length - iris longer petals likely larger, thus also longer sepal. expert botanist perhaps assume setosas smaller sepals versicolors virginica. priors can formulated restricted priors (Morey, 2015; Morey & Rouder, 2011): novice botanist: \\(b_{petal} > 0\\) expert botanist: \\(b_{versicolors} > 0\\ \\&\\ b_{virginica} > 0\\) testing restrictions prior posterior samples, can see probabilities restricted distributions change observing data. can achieved bayesfactor_restricted(), compute Bayes factor restricted model vs unrestricted model. Let’s first specify restrictions logical conditions: Let’s test hypotheses: can see novice botanist’s hypothesis gets Bayes factor ~2, indicating data provides twice much evidence model petal length restricted positively associated sepal length model restriction. expert botanist? seems failed miserably, BF favoring unrestricted model many many times . possible? seems controlling petal length, versicolor virginica actually shorter sepals!  Note Bayes factors compare restricted model unrestricted model. wanted compare restricted model null model, use transitive property Bayes factors like : \\[ BF_{\\text{restricted vs. NULL}} = \\frac {BF_{\\text{restricted vs. un-restricted}}} {BF_{\\text{un-restricted vs NULL}}} \\] restrictions prior distribution, appropriate testing pre-planned (priori) hypotheses, used post hoc comparisons (Morey, 2015). NOTE: See Specifying Correct Priors Factors 2 Levels appendix .","code":"iris_model <- stan_glm(Sepal.Length ~ Species + Petal.Length,   data = iris,   prior = normal(0, c(2, 1.2, 1.2), autoscale = FALSE),   chains = 10, iter = 5000, warmup = 1000 ) botanist_hypotheses <- c(   \"Petal.Length > 0\",   \"(Speciesversicolor > 0) & (Speciesvirginica > 0)\" ) model_prior <- unupdate(iris_model)  botanist_BFs <- bayesfactor_restricted(   posterior = iris_model,   prior = model_prior,   hypothesis = botanist_hypotheses )  print(botanist_BFs) > Bayes Factor (Order-Restriction) >  > Hypothesis                                       P(Prior) P(Posterior)       BF > Petal.Length > 0                                     0.50            1     2.02 > (Speciesversicolor > 0) & (Speciesvirginica > 0)     0.24            0 0.00e+00 >  > * Bayes factors for the restricted model vs. the un-restricted model."},{"path":"https://easystats.github.io/bayestestR/articles/bayes_factors.html","id":"bayesian-model-averaging","dir":"Articles","previous_headings":"","what":"Bayesian Model Averaging","title":"Bayes Factors","text":"previous section, discussed direct comparison two models determine effect supported data. However, many cases many models consider, perhaps straightforward models compare determine effect supported data. cases, can use Bayesian model averaging (BMA) determine support provided data parameter term across many models.","code":""},{"path":"https://easystats.github.io/bayestestR/articles/bayes_factors.html","id":"bayesfactor_inclusion","dir":"Articles","previous_headings":"Bayesian Model Averaging","what":"Inclusion Bayes factors","title":"Bayes Factors","text":"Inclusion Bayes factors answer question: observed data probable models particular predictor, models without particular predictor? words, average, models predictor \\(X\\) likely produced observed data models without predictor \\(X\\)?5 Since model prior probability, possible sum prior probability models include predictor interest (prior inclusion probability), models include predictor (prior exclusion probability). data observed, model assigned posterior probability, can similarly consider sums posterior models’ probabilities obtain posterior inclusion probability posterior exclusion probability. , change prior inclusion odds posterior inclusion odds Inclusion Bayes factor [“\\(BF_{Inclusion}\\)”; Clyde, Ghosh, & Littman (2011)]. Lets use brms example : examine interaction term’s inclusion Bayes factor, can see across 5 models, model term average (1/0.171) 5.84 times less supported model without term. Note Species, factor represented model several parameters, gets single Bayes factor - inclusion Bayes factors given per predictor! can also compare matched models - averaging done across models (1) include interactions predictor interest; (2) interaction predictors, averaging done across models contain main effects interaction predictor comprised (see explanation might want ).","code":"bayesfactor_inclusion(comparison) > Inclusion Bayes Factors (Model Averaged) >  >                      P(prior) P(posterior) Inclusion BF > Petal.Length             0.60         1.00     1.91e+25 > Species                  0.60         1.00     1.25e+09 > Petal.Length:Species     0.20         0.04        0.171 >  > * Compared among: all models > *    Priors odds: uniform-equal bayesfactor_inclusion(comparison, match_models = TRUE) > Inclusion Bayes Factors (Model Averaged) >  >                      P(prior) P(posterior) Inclusion BF > Petal.Length             0.40         0.96     2.74e+25 > Species                  0.40         0.96     1.80e+09 > Petal.Length:Species     0.20         0.04        0.043 >  > * Compared among: matched models only > *    Priors odds: uniform-equal"},{"path":"https://easystats.github.io/bayestestR/articles/bayes_factors.html","id":"comparison-with-jasp","dir":"Articles","previous_headings":"Bayesian Model Averaging","what":"Comparison with JASP","title":"Bayes Factors","text":"bayesfactor_inclusion() meant provide Bayes Factors per predictor, similar JASP’s Effects option. Let’s compare two: Across models:  Across matched models:  Nuisance Effects: ’ll add dose null model JASP, R:","code":"library(BayesFactor) data(ToothGrowth) ToothGrowth$dose <- as.factor(ToothGrowth$dose)  BF_ToothGrowth <- anovaBF(len ~ dose * supp, ToothGrowth, progress = FALSE)  bayesfactor_inclusion(BF_ToothGrowth) > Inclusion Bayes Factors (Model Averaged) >  >           P(prior) P(posterior) Inclusion BF > supp          0.60         1.00       140.99 > dose          0.60         1.00     3.21e+14 > dose:supp     0.20         0.72        10.12 >  > * Compared among: all models > *    Priors odds: uniform-equal bayesfactor_inclusion(BF_ToothGrowth, match_models = TRUE) > Inclusion Bayes Factors (Model Averaged) >  >           P(prior) P(posterior) Inclusion BF > supp          0.40         0.28        59.19 > dose          0.40         0.28     1.36e+14 > dose:supp     0.20         0.72         2.57 >  > * Compared among: matched models only > *    Priors odds: uniform-equal BF_ToothGrowth_against_dose <- BF_ToothGrowth[3:4] / BF_ToothGrowth[2] # OR: # update(bayesfactor_models(BF_ToothGrowth), #        subset = c(4, 5), #        reference = 3) BF_ToothGrowth_against_dose > Bayes factor analysis > -------------- > [1] supp + dose             : 59  ±4.5% > [2] supp + dose + supp:dose : 152 ±1.5% >  > Against denominator: >   len ~ dose  > --- > Bayes factor type: BFlinearModel, JZS bayesfactor_inclusion(BF_ToothGrowth_against_dose) > Inclusion Bayes Factors (Model Averaged) >  >           P(prior) P(posterior) Inclusion BF > dose          1.00         1.00              > supp          0.67         1.00       105.74 > dose:supp     0.33         0.72         5.06 >  > * Compared among: all models > *    Priors odds: uniform-equal"},{"path":"https://easystats.github.io/bayestestR/articles/bayes_factors.html","id":"weighted_posteriors","dir":"Articles","previous_headings":"Bayesian Model Averaging","what":"Averaging posteriors","title":"Bayes Factors","text":"Similar can average evidence predictor across models, can also average posterior estimate across models. useful situations Bayes factors seem support null effect, yet HDI alternative excludes null value (also see si() described ). example, looking Motor Trend Car Road Tests (data(mtcars)), naturally predict miles/gallon (mpg) transition type () weight (wt), number carburetors (carb)? good predictor? can determine comparing following models: seems model without carb predictor \\(1/BF=1.2\\) times likely model carb predictor. might assume latter model, HDI include point-null value 0 effect, also indicate credibility null posterior. However, case: can ? estimating HDI effect carb full model, acting assumption model correct. However, ’ve just seen, models practically tied. case limit estimation effect just one model? (Bergh, Haaf, Ly, Rouder, & Wagenmakers, 2019). Using Bayesian Model Averaging, can combine posteriors samples several models, weighted models’ marginal likelihood (done via bayesfactor_models() function). parameter part models missing others, assumed fixed 0 (can also seen method applying shrinkage estimates). results posterior distribution across several models, can now treat like posterior distribution, estimate HDI. bayestestR, can weighted_posteriors() function:  can see across models consideration, posterior carb effect almost equally weighted alternative model null model - represented half posterior mass concentrated 0 - makes sense models almost equally supported data. can also see across models, now HDI contain 0. Thus resolved conflict Bayes factor HDI (Rouder, Haaf, & Vandekerckhove, 2018)! Note: Parameters might play different roles across different models. example, parameter plays different role model Y ~ + B (main effect) model Y ~ + B + :B (simple effect). many cases centering predictors (mean subtracting continuous variables, orthogonal coding factors) can cases reduce issue.","code":"mod <- stan_glm(mpg ~ wt + am,   data = mtcars,   prior = normal(0, c(10, 10), autoscale = FALSE),   chains = 10, iter = 5000, warmup = 1000,   diagnostic_file = file.path(tempdir(), \"df1.csv\"),   refresh = 0 )  mod_carb <- stan_glm(mpg ~ wt + am + carb,   data = mtcars,   prior = normal(0, c(10, 10, 20), autoscale = FALSE),   chains = 10, iter = 5000, warmup = 1000,   diagnostic_file = file.path(tempdir(), \"df0.csv\"),   refresh = 0 )  BF_carb <- bayesfactor_models(mod_carb, denominator = mod, verbose = FALSE) BF_carb > Bayes Factors for Model Comparison >  >     Model             BF > [1] wt + am + carb 0.810 >  > * Against Denominator: [2] wt + am > *   Bayes Factor Type: marginal likelihoods (bridgesampling) hdi(mod_carb, ci = 0.95) > Highest Density Interval >  > Parameter   |        95% HDI > ---------------------------- > (Intercept) | [27.90, 39.96] > wt          | [-5.54, -1.74] > am          | [-1.05,  5.65] > carb        | [-2.03, -0.36] BMA_draws <- weighted_posteriors(mod, mod_carb, verbose = FALSE)  BMA_hdi <- hdi(BMA_draws, ci = 0.95) BMA_hdi > Highest Density Interval >  > Parameter   |        95% HDI > ---------------------------- > (Intercept) | [29.23, 42.37] > wt          | [-6.72, -2.20] > am          | [-2.74,  5.04] > carb        | [-1.69,  0.00] plot(BMA_hdi)"},{"path":[]},{"path":"https://easystats.github.io/bayestestR/articles/bayes_factors.html","id":"testing-contrasts-with-emmeans-modelbased","dir":"Articles","previous_headings":"Appendices","what":"Testing contrasts (with emmeans / modelbased)","title":"Bayes Factors","text":"Besides testing parameter bayesfactor_parameters() can used test estimate based prior posterior distribution estimate. One way achieve mix bayesfactor_parameters() + emmeans test Bayesian contrasts. example, sleep example , can estimate group means difference : strong evidence mean group 1 0, group 2 0, hardly evidence difference 0. Conflict? Uncertainty? Bayesian way! can also use easystats’ modelbased package compute Bayes factors contrasts: NOTE: See Specifying Correct Priors Factors 2 Levels section .","code":"library(emmeans)  (group_diff <- emmeans(model, pairwise ~ group)) > $emmeans >  group emmean lower.HPD upper.HPD >  1       0.79     -0.48       2.0 >  2       2.28      1.00       3.5 >  > Point estimate displayed: median  > HPD interval probability: 0.95  >  > $contrasts >  contrast        estimate lower.HPD upper.HPD >  group1 - group2    -1.47      -3.2     0.223 >  > Point estimate displayed: median  > HPD interval probability: 0.95 # pass the original model via prior bayesfactor_parameters(group_diff, prior = model) > Bayes Factor (Savage-Dickey density ratio) >  > Parameter       |    BF > ----------------------- > 1               | 0.287 > 2               | 19.77 > group1 - group2 |  1.26 >  > * Evidence Against The Null: 0 library(modelbased)  estimate_contrasts(model, test = \"bf\", bf_prior = model)"},{"path":"https://easystats.github.io/bayestestR/articles/bayes_factors.html","id":"contr_bayes","dir":"Articles","previous_headings":"Appendices","what":"Specifying correct priors for factors","title":"Bayes Factors","text":"section introduces biased priors obtained using common effects factor coding (contr.sum) dummy factor coding (contr.treatment), solution using orthonormal factor coding (contr.equalprior) (outlined Rouder, Morey, Speckman, & Province, 2012, sec. 7.2). Special care taken working factors 3 levels.","code":""},{"path":"https://easystats.github.io/bayestestR/articles/bayes_factors.html","id":"contrasts-and-marginal-means","dir":"Articles","previous_headings":"Appendices > Specifying correct priors for factors","what":"Contrasts (and marginal means)","title":"Bayes Factors","text":"effects factor coding commonly used factorial analysis carries hidden bias applies Bayesian priors. example, want test pairwise differences 3 levels factor, expect priori differences distribution, … example, test prior pairwise differences 3 species iris dataset.  Notice , though prior estimate 3 pairwise contrasts ~0, scale HDI much narrower prior setosa - versicolor contrast! happened??? caused inherent bias priors introduced effects coding (’s even worse default treatment coding, prior intercept usually drastically different effect’s parameters). since affects priors, bias also bias Bayes factors / understating evidence contrasts others! solution use equal-prior factor coding, -la contr.equalprior* family, can either specify factor coding per-factor: can set globally: Let’s estimate prior differences:  can see using contr.equalprior_pairs coding scheme, equal priors pairwise contrasts, width corresponding normal(0, c(1, 1), autoscale = FALSE) prior set! solutions problem priors. can read Solomon Kurz’s blog post.","code":"df <- iris contrasts(df$Species) <- contr.sum  fit_sum <- stan_glm(Sepal.Length ~ Species,   data = df,   prior = normal(0, c(1, 1), autoscale = FALSE),   prior_PD = TRUE, # sample priors   family = gaussian(),   chains = 10, iter = 5000, warmup = 1000,   refresh = 0 ) (pairs_sum <- pairs(emmeans(fit_sum, ~Species))) >  contrast               estimate lower.HPD upper.HPD >  setosa - versicolor      -0.017      -2.8       2.7 >  setosa - virginica       -0.027      -4.0       4.6 >  versicolor - virginica    0.001      -4.2       4.5 >  > Point estimate displayed: median  > HPD interval probability: 0.95 ggplot(stack(insight::get_parameters(pairs_sum)), aes(x = values, fill = ind)) +   geom_density(size = 1) +   facet_grid(ind ~ .) +   labs(x = \"prior difference values\") +   theme(legend.position = \"none\") contrasts(df$Species) <- contr.equalprior_pairs options(contrasts = c(\"contr.equalprior_pairs\", \"contr.poly\")) fit_bayes <- stan_glm(Sepal.Length ~ Species,   data = df,   prior = normal(0, c(1, 1), autoscale = FALSE),   prior_PD = TRUE, # sample priors   family = gaussian(),   chains = 10, iter = 5000, warmup = 1000,   refresh = 0 ) (pairs_bayes <- pairs(emmeans(fit_bayes, ~Species))) >  contrast               estimate lower.HPD upper.HPD >  setosa - versicolor      0.0000     -2.10      1.89 >  setosa - virginica       0.0228     -1.93      1.99 >  versicolor - virginica   0.0021     -2.06      1.89 >  > Point estimate displayed: median  > HPD interval probability: 0.95 ggplot(stack(insight::get_parameters(pairs_bayes)), aes(x = values, fill = ind)) +   geom_density(size = 1) +   facet_grid(ind ~ .) +   labs(x = \"prior difference values\") +   theme(legend.position = \"none\")"},{"path":"https://easystats.github.io/bayestestR/articles/bayes_factors.html","id":"order-restrictions","dir":"Articles","previous_headings":"Appendices > Specifying correct priors for factors","what":"Order restrictions","title":"Bayes Factors","text":"bias also affect order restrictions involving 3 levels. example, want test order restriction among , B, C, priori probability obtaining order > C > B 1/6 (reach back intro stats year 1), … example, interested following order restrictions iris dataset (line separate restriction): default factor coding, looks like : happened??? comparison 2 levels prior ~0.5, expected. comparison 3 levels different priors, depending order restriction - .e. orders priori likely others!!! , solved using equal prior factor coding ().","code":"hyp <- c(   # comparing 2 levels   \"setosa < versicolor\",   \"setosa < virginica\",   \"versicolor < virginica\",    # comparing 3 (or more) levels   \"setosa    < virginica  & virginica  < versicolor\",   \"virginica < setosa     & setosa     < versicolor\",   \"setosa    < versicolor & versicolor < virginica\" ) contrasts(df$Species) <- contr.sum  fit_sum <- stan_glm(Sepal.Length ~ Species,   data = df,   prior = normal(0, c(1, 1), autoscale = FALSE),   family = gaussian(),   chains = 10, iter = 5000, warmup = 1000 )  em_sum <- emmeans(fit_sum, ~Species) # the posterior marginal means  bayesfactor_restricted(em_sum, fit_sum, hypothesis = hyp) >  > SAMPLING FOR MODEL 'continuous' NOW (CHAIN 1). > Chain 1:  > Chain 1: Gradient evaluation took 1.9e-05 seconds > Chain 1: 1000 transitions using 10 leapfrog steps per transition would take 0.19 seconds. > Chain 1: Adjust your expectations accordingly! > Chain 1:  > Chain 1:  > Chain 1: Iteration:    1 / 2000 [  0%]  (Warmup) > Chain 1: Iteration:  200 / 2000 [ 10%]  (Warmup) > Chain 1: Iteration:  400 / 2000 [ 20%]  (Warmup) > Chain 1: Iteration:  600 / 2000 [ 30%]  (Warmup) > Chain 1: Iteration:  800 / 2000 [ 40%]  (Warmup) > Chain 1: Iteration: 1000 / 2000 [ 50%]  (Warmup) > Chain 1: Iteration: 1001 / 2000 [ 50%]  (Sampling) > Chain 1: Iteration: 1200 / 2000 [ 60%]  (Sampling) > Chain 1: Iteration: 1400 / 2000 [ 70%]  (Sampling) > Chain 1: Iteration: 1600 / 2000 [ 80%]  (Sampling) > Chain 1: Iteration: 1800 / 2000 [ 90%]  (Sampling) > Chain 1: Iteration: 2000 / 2000 [100%]  (Sampling) > Chain 1:  > Chain 1:  Elapsed Time: 0.036 seconds (Warm-up) > Chain 1:                0.058 seconds (Sampling) > Chain 1:                0.094 seconds (Total) > Chain 1:  >  > SAMPLING FOR MODEL 'continuous' NOW (CHAIN 2). > Chain 2:  > Chain 2: Gradient evaluation took 1.1e-05 seconds > Chain 2: 1000 transitions using 10 leapfrog steps per transition would take 0.11 seconds. > Chain 2: Adjust your expectations accordingly! > Chain 2:  > Chain 2:  > Chain 2: Iteration:    1 / 2000 [  0%]  (Warmup) > Chain 2: Iteration:  200 / 2000 [ 10%]  (Warmup) > Chain 2: Iteration:  400 / 2000 [ 20%]  (Warmup) > Chain 2: Iteration:  600 / 2000 [ 30%]  (Warmup) > Chain 2: Iteration:  800 / 2000 [ 40%]  (Warmup) > Chain 2: Iteration: 1000 / 2000 [ 50%]  (Warmup) > Chain 2: Iteration: 1001 / 2000 [ 50%]  (Sampling) > Chain 2: Iteration: 1200 / 2000 [ 60%]  (Sampling) > Chain 2: Iteration: 1400 / 2000 [ 70%]  (Sampling) > Chain 2: Iteration: 1600 / 2000 [ 80%]  (Sampling) > Chain 2: Iteration: 1800 / 2000 [ 90%]  (Sampling) > Chain 2: Iteration: 2000 / 2000 [100%]  (Sampling) > Chain 2:  > Chain 2:  Elapsed Time: 0.037 seconds (Warm-up) > Chain 2:                0.053 seconds (Sampling) > Chain 2:                0.09 seconds (Total) > Chain 2:  >  > SAMPLING FOR MODEL 'continuous' NOW (CHAIN 3). > Chain 3:  > Chain 3: Gradient evaluation took 1e-05 seconds > Chain 3: 1000 transitions using 10 leapfrog steps per transition would take 0.1 seconds. > Chain 3: Adjust your expectations accordingly! > Chain 3:  > Chain 3:  > Chain 3: Iteration:    1 / 2000 [  0%]  (Warmup) > Chain 3: Iteration:  200 / 2000 [ 10%]  (Warmup) > Chain 3: Iteration:  400 / 2000 [ 20%]  (Warmup) > Chain 3: Iteration:  600 / 2000 [ 30%]  (Warmup) > Chain 3: Iteration:  800 / 2000 [ 40%]  (Warmup) > Chain 3: Iteration: 1000 / 2000 [ 50%]  (Warmup) > Chain 3: Iteration: 1001 / 2000 [ 50%]  (Sampling) > Chain 3: Iteration: 1200 / 2000 [ 60%]  (Sampling) > Chain 3: Iteration: 1400 / 2000 [ 70%]  (Sampling) > Chain 3: Iteration: 1600 / 2000 [ 80%]  (Sampling) > Chain 3: Iteration: 1800 / 2000 [ 90%]  (Sampling) > Chain 3: Iteration: 2000 / 2000 [100%]  (Sampling) > Chain 3:  > Chain 3:  Elapsed Time: 0.037 seconds (Warm-up) > Chain 3:                0.051 seconds (Sampling) > Chain 3:                0.088 seconds (Total) > Chain 3:  >  > SAMPLING FOR MODEL 'continuous' NOW (CHAIN 4). > Chain 4:  > Chain 4: Gradient evaluation took 1e-05 seconds > Chain 4: 1000 transitions using 10 leapfrog steps per transition would take 0.1 seconds. > Chain 4: Adjust your expectations accordingly! > Chain 4:  > Chain 4:  > Chain 4: Iteration:    1 / 2000 [  0%]  (Warmup) > Chain 4: Iteration:  200 / 2000 [ 10%]  (Warmup) > Chain 4: Iteration:  400 / 2000 [ 20%]  (Warmup) > Chain 4: Iteration:  600 / 2000 [ 30%]  (Warmup) > Chain 4: Iteration:  800 / 2000 [ 40%]  (Warmup) > Chain 4: Iteration: 1000 / 2000 [ 50%]  (Warmup) > Chain 4: Iteration: 1001 / 2000 [ 50%]  (Sampling) > Chain 4: Iteration: 1200 / 2000 [ 60%]  (Sampling) > Chain 4: Iteration: 1400 / 2000 [ 70%]  (Sampling) > Chain 4: Iteration: 1600 / 2000 [ 80%]  (Sampling) > Chain 4: Iteration: 1800 / 2000 [ 90%]  (Sampling) > Chain 4: Iteration: 2000 / 2000 [100%]  (Sampling) > Chain 4:  > Chain 4:  Elapsed Time: 0.035 seconds (Warm-up) > Chain 4:                0.053 seconds (Sampling) > Chain 4:                0.088 seconds (Total) > Chain 4: > Bayes Factor (Order-Restriction) >  > Hypothesis                                       P(Prior) P(Posterior)       BF > setosa < versicolor                                  0.51            1     1.97 > setosa < virginica                                   0.49            1     2.02 > versicolor < virginica                               0.49            1     2.03 > setosa    < virginica  & virginica  < versicolor     0.11            0 0.00e+00 > virginica < setosa     & setosa     < versicolor     0.20            0 0.00e+00 > setosa    < versicolor & versicolor < virginica      0.20            1     5.09 >  > * Bayes factors for the restricted model vs. the un-restricted model. contrasts(df$Species) <- contr.equalprior_pairs  fit_bayes <- stan_glm(Sepal.Length ~ Species,   data = df,   prior = normal(0, c(1, 1), autoscale = FALSE),   family = gaussian(),   chains = 10, iter = 5000, warmup = 1000 ) em_bayes <- emmeans(fit_sum, ~Species) # the posterior marginal means bayesfactor_restricted(em_bayes, fit_sum, hypothesis = hyp) > Bayes Factor (Order-Restriction) >  > Hypothesis                                       P(Prior) P(Posterior)       BF > setosa < versicolor                                  0.49            1     2.06 > setosa < virginica                                   0.49            1     2.03 > versicolor < virginica                               0.51            1     1.96 > setosa    < virginica  & virginica  < versicolor     0.17            0 0.00e+00 > virginica < setosa     & setosa     < versicolor     0.16            0 0.00e+00 > setosa    < versicolor & versicolor < virginica      0.16            1     6.11 >  > * Bayes factors for the restricted model vs. the un-restricted model."},{"path":"https://easystats.github.io/bayestestR/articles/bayes_factors.html","id":"conclusion","dir":"Articles","previous_headings":"Appendices > Specifying correct priors for factors","what":"Conclusion","title":"Bayes Factors","text":"comparing results two factor coding schemes, find: 1. cases, estimated (posterior) means quite similar (identical). 2. priors Bayes factors differ two schemes. 3. contr.equalprior*, prior distribution difference order 3 () means balanced. Read equal prior contrasts contr.equalprior docs!","code":""},{"path":[]},{"path":"https://easystats.github.io/bayestestR/articles/bayestestR.html","id":"why-use-the-bayesian-framework","dir":"Articles","previous_headings":"","what":"Why use the Bayesian Framework?","title":"Get Started with Bayesian Analysis","text":"Bayesian framework statistics quickly gaining popularity among scientists, associated general shift towards open honest science. Reasons prefer approach : reliability (Etz & Vandekerckhove, 2016) accuracy (noisy data small samples) (Kruschke, Aguinis, & Joo, 2012) possibility introducing prior knowledge analysis (Andrews & Baguley, 2013; Kruschke et al., 2012) critically, intuitive nature results straightforward interpretation (Kruschke, 2010; Wagenmakers et al., 2018) general, frequentist approach associated focus null hypothesis testing, misuse p-values shown critically contribute reproducibility crisis social psychological sciences (Chambers, Feredoes, Muthukumaraswamy, & Etchells, 2014; Szucs & Ioannidis, 2016). emerging consensus generalization Bayesian approach one way overcoming issues (Benjamin et al., 2018; Etz & Vandekerckhove, 2016). agree Bayesian framework right way go, might wonder exactly framework. ’s fuss ?","code":""},{"path":"https://easystats.github.io/bayestestR/articles/bayestestR.html","id":"what-is-the-bayesian-framework","dir":"Articles","previous_headings":"","what":"What is the Bayesian Framework?","title":"Get Started with Bayesian Analysis","text":"Adopting Bayesian framework shift paradigm change methodology. Indeed, common statistical procedures (t-tests, correlations, ANOVAs, regressions, etc.) can achieved using Bayesian framework. key difference frequentist framework (“classical” approach statistics, p t values, well weird degrees freedom), effects fixed (unknown) data random. words, assumes unknown parameter unique value trying estimate/guess using sample data. hand, Bayesian framework, instead estimating “true effect”, probability different effects given observed data computed, resulting distribution possible values parameters, called posterior distribution. uncertainty Bayesian inference can summarized, instance, median distribution, well range values posterior distribution includes 95% probable values (95% credible interval). Cum grano salis, considered counterparts point-estimate confidence interval frequentist framework. illustrate difference interpretation, Bayesian framework allows say “given observed data, effect 95% probability falling within range”, frequentist (less intuitive) alternative “repeatedly computing confidence intervals data sort, 95% probability effect falls within given range”. essence, Bayesian sampling algorithms (MCMC sampling) return probability distribution (posterior) effect compatible observed data. Thus, effect can described characterizing posterior distribution relation centrality (point-estimates), uncertainty, well existence significance words, putting maths behind aside moment, can say : frequentist approach tries estimate real effect. instance, “real” value correlation x y. Hence, frequentist models return point-estimate (.e., single value distribution) “real” correlation (e.g., \\(r = 0.42\\)) estimated number obscure assumptions (minimum, considering data sampled random “parent”, usually normal distribution). Bayesian framework assumes thing. data . Based observed data (prior belief result), Bayesian sampling algorithm (MCMC sampling one example) returns probability distribution (called posterior) effect compatible observed data. correlation x y, return distribution says, example, “probable effect 0.42, data also compatible correlations 0.12 0.74 certain probabilities”. characterize statistical significance effects, need p-values, indices. simply describe posterior distribution effect. example, can report median, 89% Credible Interval indices. Accurate depiction regular Bayesian user estimating credible interval. Note: Altough purpose package advocate use Bayesian statistics, please note serious arguments supporting frequentist indices (see instance thread). always, world black white (p < .001). … work?","code":""},{"path":[]},{"path":"https://easystats.github.io/bayestestR/articles/bayestestR.html","id":"bayestestr-installation","dir":"Articles","previous_headings":"A simple example","what":"bayestestR installation","title":"Get Started with Bayesian Analysis","text":"can install bayestestR along whole easystats suite running following: Let’s also install load rstanarm, allows fitting Bayesian models, well bayestestR, describe .","code":"install.packages(\"remotes\") remotes::install_github(\"easystats/easystats\") install.packages(\"rstanarm\") library(rstanarm)"},{"path":"https://easystats.github.io/bayestestR/articles/bayestestR.html","id":"traditional-linear-regression","dir":"Articles","previous_headings":"A simple example","what":"Traditional linear regression","title":"Get Started with Bayesian Analysis","text":"Let’s start fitting simple frequentist linear regression (lm() function stands linear model) two numeric variables, Sepal.Length Petal.Length famous iris dataset, included default R. analysis suggests statistically significant (whatever means) positive (coefficient 0.41) linear relationship two variables. Fitting interpreting frequentist models easy obvious people use instead Bayesian framework… right? anymore.","code":"model <- lm(Sepal.Length ~ Petal.Length, data = iris) summary(model) Call: lm(formula = Sepal.Length ~ Petal.Length, data = iris)  Residuals:     Min      1Q  Median      3Q     Max  -1.2468 -0.2966 -0.0152  0.2768  1.0027   Coefficients:              Estimate Std. Error t value Pr(>|t|)     (Intercept)    4.3066     0.0784    54.9   <2e-16 *** Petal.Length   0.4089     0.0189    21.6   <2e-16 *** --- Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1  Residual standard error: 0.41 on 148 degrees of freedom Multiple R-squared:  0.76,  Adjusted R-squared:  0.758  F-statistic:  469 on 1 and 148 DF,  p-value: <2e-16"},{"path":"https://easystats.github.io/bayestestR/articles/bayestestR.html","id":"bayesian-linear-regression","dir":"Articles","previous_headings":"A simple example","what":"Bayesian linear regression","title":"Get Started with Bayesian Analysis","text":"Summary Posterior Distribution ’s ! just fitted Bayesian version model simply using stan_glm() function instead lm() described posterior distributions parameters! conclusion draw, example, similar. effect (median effect’s posterior distribution) 0.41, can also considered significant Bayesian sense (later). , ready learn ? Check next tutorial! , want even , can check articles describing functionality package offer! https://easystats.github.io/bayestestR/articles/","code":"model <- stan_glm(Sepal.Length ~ Petal.Length, data = iris) posteriors <- describe_posterior(model) # for a nicer table print_md(posteriors, digits = 2)"},{"path":[]},{"path":"https://easystats.github.io/bayestestR/articles/credible_interval.html","id":"what-is-a-credible-interval","dir":"Articles","previous_headings":"","what":"What is a Credible Interval?","title":"Credible Intervals (CI)","text":"Credible intervals important concept Bayesian statistics. core purpose describe summarise uncertainty related unknown parameters trying estimate. regard, appear quite similar frequentist Confidence Intervals. However, goal similar, statistical definition meaning different. Indeed, latter obtained complex algorithm full rarely-tested assumptions approximations, credible intervals fairly straightforward compute. Bayesian inference returns distribution possible effect values (posterior), credible interval just range containing particular percentage probable values. instance, 95% credible interval simply central portion posterior distribution contains 95% values. Note drastically improve interpretability Bayesian interval compared frequentist one. Indeed, Bayesian framework allows us say “given observed data, effect 95% probability falling within range”, compared less straightforward, frequentist alternative (95% Confidence* Interval) “95% probability computing confidence interval data sort, effect falls within range”.","code":""},{"path":"https://easystats.github.io/bayestestR/articles/credible_interval.html","id":"vs--95-ci","dir":"Articles","previous_headings":"","what":"89% vs. 95% CI","title":"Credible Intervals (CI)","text":"Using 89% another popular choice, used default long time (read story change). start? Naturally, came choosing CI level report default, people started using 95%, arbitrary convention used frequentist world. However, authors suggested 95% might appropriate Bayesian posterior distributions, potentially lacking stability enough posterior samples drawn (Kruschke, 2014). proposition use 90% instead 95%. However, recently, McElreath (2014, 2018) suggested use arbitrary thresholds first place, use 89%? Moreover, 89 highest prime number exceed already unstable 95% threshold. anything? Nothing, reminds us total arbitrariness conventions (McElreath, 2018). Thus, CIs computed 89% intervals (ci = 0.89), deemed stable , instance, 95% intervals (Kruschke, 2014). effective sample size (ESS; see ) least 10.000 recommended one wants compute precise 95% intervals (Kruschke, 2014, p. 183ff). Unfortunately, default number posterior samples Bayes packages (e.g., rstanarm brms) 4.000 (thus, might want increase fitting model). However, 95% advantages . instance, shares (case normal posterior distribution) intuitive relationship standard deviation conveys accurate image (artificial) bounds distribution. Also, wider, makes analyses conservative (.e., probability covering 0 larger 95% CI lower ranges 89%), good thing context reproducibility crisis. add mess, software use different default, instance 90%. Ultimately, user make informed decision, based needs goals, justify choice.","code":""},{"path":"https://easystats.github.io/bayestestR/articles/credible_interval.html","id":"different-types-of-cis","dir":"Articles","previous_headings":"","what":"Different types of CIs","title":"Credible Intervals (CI)","text":"reader might notice bayestestR provides two methods compute credible intervals, Highest Density Interval (HDI) (hdi()) Equal-tailed Interval (ETI) (eti()). methods can also changed via method argument ci() function. difference? Let’s see:  exactly … also case types distributions?  difference strong one. Contrary HDI, points within interval higher probability density points outside interval, ETI equal-tailed. means 90% interval 5% distribution either side limits. indicates 5th percentile 95th percentile. symmetric distributions, two methods computing credible intervals, ETI HDI, return similar results. case skewed distributions. Indeed, possible parameter values ETI lower credibility (less probable) parameter values outside ETI. property seems undesirable summary credible values distribution. hand, ETI range change transformations applied distribution (instance, log-odds probabilities transformation): lower higher bounds transformed distribution correspond transformed lower higher bounds original distribution. contrary, applying transformations distribution change resulting HDI. Thus, instance, exponentiated credible intervals required, calculating ETI recommended.","code":"library(bayestestR) library(ggplot2)  # Generate a normal distribution posterior <- distribution_normal(1000)  # Compute HDI and ETI ci_hdi <- ci(posterior, method = \"HDI\") ci_eti <- ci(posterior, method = \"ETI\")  # Plot the distribution and add the limits of the two CIs out <- estimate_density(posterior, extend = TRUE) ggplot(out, aes(x = x, y = y)) +   geom_area(fill = \"orange\") +   theme_classic() +   # HDI in blue   geom_vline(xintercept = ci_hdi$CI_low, color = \"royalblue\", size = 3) +   geom_vline(xintercept = ci_hdi$CI_high, color = \"royalblue\", size = 3) +   # Quantile in red   geom_vline(xintercept = ci_eti$CI_low, color = \"red\", size = 1) +   geom_vline(xintercept = ci_eti$CI_high, color = \"red\", size = 1) # Generate a beta distribution posterior <- distribution_beta(1000, 6, 2)  # Compute HDI and Quantile CI ci_hdi <- ci(posterior, method = \"HDI\") ci_eti <- ci(posterior, method = \"ETI\")  # Plot the distribution and add the limits of the two CIs out <- estimate_density(posterior, extend = TRUE) ggplot(out, aes(x = x, y = y)) +   geom_area(fill = \"orange\") +   theme_classic() +   # HDI in blue   geom_vline(xintercept = ci_hdi$CI_low, color = \"royalblue\", size = 3) +   geom_vline(xintercept = ci_hdi$CI_high, color = \"royalblue\", size = 3) +   # ETI in red   geom_vline(xintercept = ci_eti$CI_low, color = \"red\", size = 1) +   geom_vline(xintercept = ci_eti$CI_high, color = \"red\", size = 1)"},{"path":"https://easystats.github.io/bayestestR/articles/credible_interval.html","id":"the-support-interval","dir":"Articles","previous_headings":"","what":"The Support Interval","title":"Credible Intervals (CI)","text":"Unlike HDI ETI, look posterior distribution, Support Interval (SI) provides information regarding change credibility values prior posterior - words, indicates values parameter gained support observed data factor greater equal k (Wagenmakers, Gronau, Dablander, & Etz, 2018).  blue lines values received support data (\\(BF = 1~SI\\)), red lines values received least moderate support (\\(BF = 3~SI\\)) data. perspective Savage-Dickey Bayes factor, testing point null hypothesis value within Support Interval yield Bayes factor smaller 1/BF.","code":"prior <- distribution_normal(40000, mean = 0, sd = 1) posterior <- distribution_normal(40000, mean = .5, sd = .3)  si_1 <- si(posterior, prior, BF = 1) si_3 <- si(posterior, prior, BF = 3)  ggplot(mapping = aes(x = x, y = y)) +   theme_classic() +   # The posterior   geom_area(     fill = \"orange\",     data = estimate_density(posterior, extend = TRUE)   ) +   # The prior   geom_area(     color = \"black\", fill = NA, size = 1, linetype = \"dashed\",     data = estimate_density(prior, extend = TRUE)   ) +   # BF = 1 SI in blue   geom_vline(xintercept = si_1$CI_low, color = \"royalblue\", size = 1) +   geom_vline(xintercept = si_1$CI_high, color = \"royalblue\", size = 1) +   # BF = 3 SI in red   geom_vline(xintercept = si_3$CI_low, color = \"red\", size = 1) +   geom_vline(xintercept = si_3$CI_high, color = \"red\", size = 1)"},{"path":[]},{"path":"https://easystats.github.io/bayestestR/articles/example1.html","id":"loading-the-packages","dir":"Articles","previous_headings":"","what":"Loading the packages","title":"1. Initiation to Bayesian models","text":"’ve installed necessary packages, can load rstanarm (fit models), bayestestR (compute useful indices), insight (access parameters).","code":"library(rstanarm) library(bayestestR) library(insight)"},{"path":"https://easystats.github.io/bayestestR/articles/example1.html","id":"simple-linear-regression-model","dir":"Articles","previous_headings":"","what":"Simple linear (regression) model","title":"1. Initiation to Bayesian models","text":"begin conducting simple linear regression test relationship Petal.Length (predictor, independent, variable) Sepal.Length (response, dependent, variable) iris dataset included default R.","code":""},{"path":"https://easystats.github.io/bayestestR/articles/example1.html","id":"fitting-the-model","dir":"Articles","previous_headings":"Simple linear (regression) model","what":"Fitting the model","title":"1. Initiation to Bayesian models","text":"Let’s start fitting frequentist version model, just reference point: can also zoom parameters interest us: model, linear relationship Petal.Length Sepal.Length positive significant (\\(\\beta = 0.41, t(148) = 21.6, p < .001\\)). means one-unit increase Petal.Length (predictor), can expect Sepal.Length (response) increase 0.41. effect can visualized plotting predictor values x axis response values y using ggplot2 package:  Now let’s fit Bayesian version model using stan_glm function rstanarm package: can see sampling algorithm run.","code":"model <- lm(Sepal.Length ~ Petal.Length, data = iris) summary(model) >  > Call: > lm(formula = Sepal.Length ~ Petal.Length, data = iris) >  > Residuals: >     Min      1Q  Median      3Q     Max  > -1.2468 -0.2966 -0.0152  0.2768  1.0027  >  > Coefficients: >              Estimate Std. Error t value Pr(>|t|)     > (Intercept)    4.3066     0.0784    54.9   <2e-16 *** > Petal.Length   0.4089     0.0189    21.6   <2e-16 *** > --- > Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 >  > Residual standard error: 0.41 on 148 degrees of freedom > Multiple R-squared:  0.76,    Adjusted R-squared:  0.758  > F-statistic:  469 on 1 and 148 DF,  p-value: <2e-16 get_parameters(model) >      Parameter Estimate > 1  (Intercept)     4.31 > 2 Petal.Length     0.41 library(ggplot2) # Load the package  # The ggplot function takes the data as argument, and then the variables # related to aesthetic features such as the x and y axes. ggplot(iris, aes(x = Petal.Length, y = Sepal.Length)) +   geom_point() + # This adds the points   geom_smooth(method = \"lm\") # This adds a regression line model <- stan_glm(Sepal.Length ~ Petal.Length, data = iris)"},{"path":"https://easystats.github.io/bayestestR/articles/example1.html","id":"extracting-the-posterior","dir":"Articles","previous_headings":"Simple linear (regression) model","what":"Extracting the posterior","title":"1. Initiation to Bayesian models","text":"done, let us extract parameters (.e., coefficients) model. can see, parameters take form lengthy dataframe two columns, corresponding intercept effect Petal.Length. columns contain posterior distributions two parameters. simple terms, posterior distribution set different plausible values parameter. Contrast result saw frequentist linear regression mode using lm, results single values effect model, distribution values. one important differences two frameworks.","code":"posteriors <- get_parameters(model)  head(posteriors) # Show the first 6 rows >   (Intercept) Petal.Length > 1         4.4         0.39 > 2         4.4         0.40 > 3         4.3         0.41 > 4         4.3         0.40 > 5         4.3         0.40 > 6         4.3         0.41"},{"path":"https://easystats.github.io/bayestestR/articles/example1.html","id":"about-posterior-draws","dir":"Articles","previous_headings":"Simple linear (regression) model > Extracting the posterior","what":"About posterior draws","title":"1. Initiation to Bayesian models","text":"Let’s look length posteriors. size 4000, less? First , observations (rows) usually referred posterior draws. underlying idea Bayesian sampling algorithm (e.g., Monte Carlo Markov Chains - MCMC) draw hidden true posterior distribution. Thus, posterior draws can estimate underlying true posterior distribution. Therefore, draws , better estimation posterior distribution. However, increased draws also means longer computation time. look documentation (?sampling) rstanarm’s \"sampling\" algorithm used default model , can see several parameters influence number posterior draws. default, 4 chains (can see distinct sampling runs), create 2000 iter (draws). However, half iterations kept, half used warm-(convergence algorithm). Thus, total posterior draws equals 4 chains * (2000 iterations - 1000 warm-) = 4000. can change , instance: case, expected, 2 chains * (1000 iterations - 250 warm-) = 1500 posterior draws. let’s keep first model default setup (draws).","code":"nrow(posteriors) # Size (number of rows) > [1] 4000 model <- stan_glm(Sepal.Length ~ Petal.Length, data = iris, chains = 2, iter = 1000, warmup = 250)  nrow(get_parameters(model)) # Size (number of rows) [1] 1500"},{"path":"https://easystats.github.io/bayestestR/articles/example1.html","id":"visualizing-the-posterior-distribution","dir":"Articles","previous_headings":"Simple linear (regression) model > Extracting the posterior","what":"Visualizing the posterior distribution","title":"1. Initiation to Bayesian models","text":"Now ’ve understood values come , let’s look . start visualizing posterior distribution parameter interest, effect Petal.Length.  distribution represents probability (y axis) different effects (x axis). central values probable extreme values. can see, distribution ranges 0.35 0.50, bulk around 0.41. Congrats! ’ve just described first posterior distribution. heart Bayesian analysis. don’t need p-values, t-values, degrees freedom. Everything need contained within posterior distribution. description consistent values obtained frequentist regression (resulted \\(\\beta\\) 0.41). reassuring! Indeed, cases, Bayesian analysis drastically differ frequentist results interpretation. Rather, makes results interpretable intuitive, easier understand describe. can now go ahead precisely characterize posterior distribution.","code":"ggplot(posteriors, aes(x = Petal.Length)) +   geom_density(fill = \"orange\")"},{"path":"https://easystats.github.io/bayestestR/articles/example1.html","id":"describing-the-posterior","dir":"Articles","previous_headings":"Simple linear (regression) model","what":"Describing the Posterior","title":"1. Initiation to Bayesian models","text":"Unfortunately, often practical report whole posterior distributions graphs. need find concise way summarize . recommend describe posterior distribution 3 elements: point-estimate one-value summary (similar \\(beta\\) frequentist regressions). credible interval representing associated uncertainty. indices significance, giving information relative importance effect.","code":""},{"path":"https://easystats.github.io/bayestestR/articles/example1.html","id":"point-estimate","dir":"Articles","previous_headings":"Simple linear (regression) model > Describing the Posterior","what":"Point-estimate","title":"1. Initiation to Bayesian models","text":"single value can best represent posterior distribution? Centrality indices, mean, median, mode usually used point-estimates. ’s difference ? Let’s answer first inspecting mean: close frequentist \\(\\beta\\). , know, mean quite sensitive outliers extremes values. Maybe median robust? Well, close mean (identical rounding values). Maybe take mode, , peak posterior distribution? Bayesian framework, value called Maximum Posteriori (MAP). Let’s see: close! Let’s visualize values posterior distribution:  Well, values give similar results. Thus, choose median, value direct meaning probabilistic perspective: 50% chance true effect higher 50% chance effect lower (divides distribution two equal parts).","code":"mean(posteriors$Petal.Length) > [1] 0.41 median(posteriors$Petal.Length) > [1] 0.41 map_estimate(posteriors$Petal.Length) > MAP Estimate: 0.41 ggplot(posteriors, aes(x = Petal.Length)) +   geom_density(fill = \"orange\") +   # The mean in blue   geom_vline(xintercept = mean(posteriors$Petal.Length), color = \"blue\", size = 1) +   # The median in red   geom_vline(xintercept = median(posteriors$Petal.Length), color = \"red\", size = 1) +   # The MAP in purple   geom_vline(xintercept = map_estimate(posteriors$Petal.Length), color = \"purple\", size = 1)"},{"path":"https://easystats.github.io/bayestestR/articles/example1.html","id":"uncertainty","dir":"Articles","previous_headings":"Simple linear (regression) model > Describing the Posterior","what":"Uncertainty","title":"1. Initiation to Bayesian models","text":"Now point-estimate, describe uncertainty. compute range: make sense include extreme values? Probably . Thus, compute credible interval. Long story short, ’s kind similar frequentist confidence interval, easier interpret easier compute — makes sense. compute credible interval based Highest Density Interval (HDI). give us range containing 89% probable effect values. Note use 89% CIs instead 95% CIs (frequentist framework), 89% level gives stable results (Kruschke, 2014) reminds us arbitrariness conventions (McElreath, 2018). Nice, can conclude effect 89% chance falling within [0.38, 0.44] range. just computed two important pieces information describing effects.","code":"range(posteriors$Petal.Length) > [1] 0.33 0.48 hdi(posteriors$Petal.Length, ci = 0.89) > 89% HDI: [0.38, 0.44]"},{"path":"https://easystats.github.io/bayestestR/articles/example1.html","id":"effect-significance","dir":"Articles","previous_headings":"Simple linear (regression) model > Describing the Posterior","what":"Effect significance","title":"1. Initiation to Bayesian models","text":"However, many scientific fields sufficient simply describe effects. Scientists also want know effect significance practical statistical terms, words, whether effect important. instance, effect different 0? assess significance effect. can ? Well, particular case, eloquent: possible effect values (.e., whole posterior distribution) positive 0.35, already substantial evidence effect zero. still, want objective decision criterion, say yes effect ‘significant’. One approach, similar frequentist framework, see Credible Interval contains 0. case, mean effect ‘significant’. index fine-grained, ? Can better? Yes!","code":""},{"path":"https://easystats.github.io/bayestestR/articles/example1.html","id":"a-linear-model-with-a-categorical-predictor","dir":"Articles","previous_headings":"","what":"A linear model with a categorical predictor","title":"1. Initiation to Bayesian models","text":"Imagine moment interested weight chickens varies depending two different feed types. example, start selecting chickwts dataset (available base R) two feed types interest us (peculiar interests): meat meals sunflowers.","code":""},{"path":"https://easystats.github.io/bayestestR/articles/example1.html","id":"data-preparation-and-model-fitting","dir":"Articles","previous_headings":"A linear model with a categorical predictor","what":"Data preparation and model fitting","title":"1. Initiation to Bayesian models","text":"Let’s run another Bayesian regression predict weight two types feed type.","code":"library(datawizard)  # We keep only rows for which feed is meatmeal or sunflower data <- data_filter(chickwts, feed %in% c(\"meatmeal\", \"sunflower\")) model <- stan_glm(weight ~ feed, data = data)"},{"path":"https://easystats.github.io/bayestestR/articles/example1.html","id":"posterior-description","dir":"Articles","previous_headings":"A linear model with a categorical predictor","what":"Posterior description","title":"1. Initiation to Bayesian models","text":"represents posterior distribution difference meatmeal sunflowers. seems difference positive (since values concentrated right side 0). Eating sunflowers makes fat (least, ’re chicken). , much? Let us compute median CI: makes fat around 51 grams (median). However, uncertainty quite high: 89% chance difference two feed types 14 91. effect different 0?","code":"posteriors <- get_parameters(model)  ggplot(posteriors, aes(x = feedsunflower)) +   geom_density(fill = \"red\") median(posteriors$feedsunflower) > [1] 52 hdi(posteriors$feedsunflower) > 95% HDI: [3.92, 101.99]"},{"path":"https://easystats.github.io/bayestestR/articles/example1.html","id":"rope-percentage","dir":"Articles","previous_headings":"A linear model with a categorical predictor","what":"ROPE Percentage","title":"1. Initiation to Bayesian models","text":"Testing whether distribution different 0 doesn’t make sense, 0 single value (probability distribution different single value infinite). However, one way assess significance define area around 0, consider practically equivalent zero (.e., absence , negligible, effect). called Region Practical Equivalence (ROPE), one way testing significance parameters. can define region? Driing driiiing – easystats team speaking. can help? – Prof. Sanders. expert chicks… mean chickens. Just calling let know based expert knowledge, effect -20 20 negligible. Bye. Well, ’s convenient. Now know can define ROPE [-20, 20] range. effects within range considered null (negligible). can now compute proportion 89% probable values (89% CI) null, .e., outside range. 5% 89% CI can considered null. lot? Based guidelines, yes, much. Based particular definition ROPE, conclude effect significant (probability negligible high). said, honest, doubts Prof. Sanders. don’t really trust definition ROPE. objective way defining ? Prof. Sanders giving default values define Region Practical Equivalence (ROPE). Yes! One practice instance use tenth (1/10 = 0.1) standard deviation (SD) response variable, can considered “negligible” effect size (Cohen, 1988). Let’s redefine ROPE region within [-6.2, 6.2] range. Note can directly obtained rope_range function :) Let’s recompute percentage ROPE: reasonable definition ROPE, observe 89% posterior distribution effect overlap ROPE. Thus, can conclude effect significant (sense important enough noted).","code":"rope(posteriors$feedsunflower, range = c(-20, 20), ci = 0.89) > # Proportion of samples inside the ROPE [-20.00, 20.00]: >  > inside ROPE > ----------- > 4.82 % rope_value <- 0.1 * sd(data$weight) rope_range <- c(-rope_value, rope_value) rope_range > [1] -6.2  6.2 rope_value <- rope_range(model) rope_value > [1] -6.2  6.2 rope(posteriors$feedsunflower, range = rope_range, ci = 0.89) > # Proportion of samples inside the ROPE [-6.17, 6.17]: >  > inside ROPE > ----------- > 0.00 %"},{"path":"https://easystats.github.io/bayestestR/articles/example1.html","id":"probability-of-direction-pd","dir":"Articles","previous_headings":"A linear model with a categorical predictor","what":"Probability of Direction (pd)","title":"1. Initiation to Bayesian models","text":"Maybe interested whether effect non-negligible. Maybe just want know effect positive negative. case, can simply compute proportion posterior positive, matter “size” effect. can conclude effect positive probability 98%. call index Probability Direction (pd). can, fact, computed easily following: Interestingly, happens index usually highly correlated frequentist p-value. almost roughly infer corresponding p-value simple transformation: ran model frequentist framework, approximately observe effect p-value 0.04. true?","code":"# select only positive values n_positive <- nrow(data_filter(posteriors, feedsunflower > 0))  n_positive / nrow(posteriors) * 100 > [1] 98 p_direction(posteriors$feedsunflower) > Probability of Direction: 0.98 pd <- 97.82 onesided_p <- 1 - pd / 100 twosided_p <- onesided_p * 2 twosided_p > [1] 0.044"},{"path":"https://easystats.github.io/bayestestR/articles/example1.html","id":"comparison-to-frequentist","dir":"Articles","previous_headings":"A linear model with a categorical predictor > Probability of Direction (pd)","what":"Comparison to frequentist","title":"1. Initiation to Bayesian models","text":"frequentist model tells us difference positive significant (\\(\\beta = 52, p = 0.04\\)). Although arrived similar conclusion, Bayesian framework allowed us develop profound intuitive understanding effect, uncertainty estimation.","code":"summary(lm(weight ~ feed, data = data)) >  > Call: > lm(formula = weight ~ feed, data = data) >  > Residuals: >     Min      1Q  Median      3Q     Max  > -123.91  -25.91   -6.92   32.09  103.09  >  > Coefficients: >               Estimate Std. Error t value Pr(>|t|)     > (Intercept)      276.9       17.2   16.10  2.7e-13 *** > feedsunflower     52.0       23.8    2.18     0.04 *   > --- > Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 >  > Residual standard error: 57 on 21 degrees of freedom > Multiple R-squared:  0.185,   Adjusted R-squared:  0.146  > F-statistic: 4.77 on 1 and 21 DF,  p-value: 0.0405"},{"path":"https://easystats.github.io/bayestestR/articles/example1.html","id":"all-with-one-function","dir":"Articles","previous_headings":"","what":"All with one function","title":"1. Initiation to Bayesian models","text":"yet, agree, bit tedious extract compute indices. told can , , one function? Behold, describe_posterior! function computes adored mentioned indices, can run directly model: Tada! ! median, CI, pd ROPE percentage! Understanding describing posterior distributions just one aspect Bayesian modelling. ready ?! Click see next example.","code":"describe_posterior(model, test = c(\"p_direction\", \"rope\", \"bayesfactor\")) > Summary of Posterior Distribution >  > Parameter     | Median |           95% CI |     pd |          ROPE | % in ROPE |  Rhat |      ESS |       BF > ------------------------------------------------------------------------------------------------------------ > (Intercept)   | 276.97 | [241.29, 313.04] |   100% | [-6.17, 6.17] |        0% | 1.000 | 32327.00 | 5.16e+12 > feedsunflower |  51.69 | [  2.30, 100.47] | 97.96% | [-6.17, 6.17] |     1.03% | 1.000 | 33439.00 |    0.761"},{"path":[]},{"path":[]},{"path":"https://easystats.github.io/bayestestR/articles/example2.html","id":"frequentist-version","dir":"Articles","previous_headings":"Correlations","what":"Frequentist version","title":"2. Confirmation of Bayesian skills","text":", let us begin frequentist correlation two continuous variables, width length sepals flowers. data available R iris dataset (used previous tutorial). compute Pearson’s correlation test, store results object called result, display : can see output, test actually compared two hypotheses: - null hypothesis (h0; correlation), - alternative hypothesis (h1; non-null correlation). Based p-value, null hypothesis rejected: correlation two variables negative non-significant (\\(r = -.12, p > .05\\)).","code":"result <- cor.test(iris$Sepal.Width, iris$Sepal.Length) result >  >   Pearson's product-moment correlation >  > data:  iris$Sepal.Width and iris$Sepal.Length > t = -1, df = 148, p-value = 0.2 > alternative hypothesis: true correlation is not equal to 0 > 95 percent confidence interval: >  -0.273  0.044 > sample estimates: >   cor  > -0.12"},{"path":"https://easystats.github.io/bayestestR/articles/example2.html","id":"bayesian-correlation","dir":"Articles","previous_headings":"Correlations","what":"Bayesian correlation","title":"2. Confirmation of Bayesian skills","text":"compute Bayesian correlation test, need BayesFactor package (can install running install.packages(\"BayesFactor\")). can load package, compute correlation using correlationBF() function, store result. Now, let us run describe_posterior() function : see many things , important indices now median posterior distribution, -.11. () quite close frequentist correlation. , previously, describe credible interval, pd ROPE percentage, focus another index provided Bayesian framework, Bayes Factor (BF).","code":"library(BayesFactor) result <- correlationBF(iris$Sepal.Width, iris$Sepal.Length) describe_posterior(result) > Summary of Posterior Distribution >  > Parameter | Median |        95% CI |     pd |          ROPE | % in ROPE |    BF |         Prior > ----------------------------------------------------------------------------------------------- > rho       |  -0.11 | [-0.27, 0.04] | 92.25% | [-0.05, 0.05] |    20.42% | 0.509 | Beta (3 +- 3)"},{"path":"https://easystats.github.io/bayestestR/articles/example2.html","id":"bayes-factor-bf","dir":"Articles","previous_headings":"Correlations","what":"Bayes Factor (BF)","title":"2. Confirmation of Bayesian skills","text":"said previously correlation test actually compares two hypotheses, null (absence effect) alternative one (presence effect). Bayes factor (BF) allows comparison determines two models observed data probable: model effect interest, null model without effect interest. , context correlation example, null hypothesis correlation two variables (\\(h0: \\rho = 0\\); \\(\\rho\\) stands Bayesian correlation coefficient), alternative hypothesis correlation different 0 - positive negative (\\(h1: \\rho \\neq 0\\)). can use bayesfactor_models() specifically compute Bayes factor comparing models: got BF 0.51. mean? Bayes factors continuous measures relative evidence, Bayes factor greater 1 giving evidence favour one models (often referred numerator), Bayes factor smaller 1 giving evidence favour model (denominator). Yes, heard right, evidence favour null! ’s one reason Bayesian framework sometimes considered superior frequentist framework. Remember stats lessons, p-value can used reject h0, accept . Bayes factor, can measure evidence - favour - null. words, frequentist framework, p-value significant, can conclude evidence effect absent, evidence absence effect. Bayesian framework, can latter. important since sometimes hypotheses effect. BFs representing evidence alternative null can reversed using \\(BF_{01}=1/BF_{10}\\) (01 10 correspond h0 h1 h1 h0, respectively) provide evidence null alternative. improves human readability1 cases BF alternative null smaller 1 (.e., support null). case, BF = 1/0.51 = 2, indicates data 2 times probable null compared alternative hypothesis, , though favouring null, considered anecdotal evidence null. can thus conclude anecdotal evidence favour absence correlation two variables (rmedian = 0.11, BF = 0.51), much informative statement can frequentist statistics. ’s !","code":"bayesfactor_models(result) > Bayes Factors for Model Comparison >  >     Model         BF > [2] (rho != 0) 0.509 >  > * Against Denominator: [1] (rho = 0) > *   Bayes Factor Type: JZS (BayesFactor)"},{"path":"https://easystats.github.io/bayestestR/articles/example2.html","id":"visualise-the-bayes-factor","dir":"Articles","previous_headings":"Correlations","what":"Visualise the Bayes factor","title":"2. Confirmation of Bayesian skills","text":"general, pie charts absolute -go data visualisation, brain’s perceptive system heavily distorts information presented way2. Nevertheless, one exception: pizza charts. intuitive way interpreting strength evidence provided BFs amount surprise. Wagenmakers’ pizza poking analogy. great <www.bayesianspectacles.org> blog. “pizza plots” can directly created see visualisation companion package easystats (can install running install.packages(\"see\")):  , seeing pizza, much surprised outcome blinded poke?","code":"library(see)  plot(bayesfactor_models(result)) +   scale_fill_pizza()"},{"path":"https://easystats.github.io/bayestestR/articles/example2.html","id":"t-tests","dir":"Articles","previous_headings":"","what":"t-tests","title":"2. Confirmation of Bayesian skills","text":"“know know nothing, especially versicolor virginica differ terms Sepal.Width” - Socrates. Time finally answer crucial question!","code":""},{"path":"https://easystats.github.io/bayestestR/articles/example2.html","id":"versicolor-vs--virginica","dir":"Articles","previous_headings":"t-tests","what":"Versicolor vs. virginica","title":"2. Confirmation of Bayesian skills","text":"Bayesian t-tests can performed similar way correlations. particularly interested two levels Species factor, versicolor virginica. start filtering iris non-relevant observations corresponding setosa specie, visualise observations distribution Sepal.Width variable.  seems (visually) virgnica flowers , average, slightly higer width sepals. Let’s assess difference statistically using ttestBF() function BayesFactor package.","code":"library(datawizard) library(ggplot2)  # Select only two relevant species data <- droplevels(data_filter(iris, Species != \"setosa\"))  # Visualise distributions and observations ggplot(data, aes(x = Species, y = Sepal.Width, fill = Species)) +   geom_violindot(fill_dots = \"black\", size_dots = 1) +   scale_fill_material() +   theme_modern()"},{"path":"https://easystats.github.io/bayestestR/articles/example2.html","id":"compute-the-bayesian-t-test","dir":"Articles","previous_headings":"t-tests","what":"Compute the Bayesian t-test","title":"2. Confirmation of Bayesian skills","text":"indices, can say difference Sepal.Width virginica versicolor probability 100% negative [pd sign median] (median = -0.19, 89% CI [-0.29, -0.092]). data provides strong evidence null hypothesis (BF = 18). Keep mind see another way investigating question.","code":"result <- BayesFactor::ttestBF(formula = Sepal.Width ~ Species, data = data) describe_posterior(result) > Summary of Posterior Distribution >  > Parameter  | Median |         95% CI |     pd |          ROPE | % in ROPE |    BF |              Prior > ------------------------------------------------------------------------------------------------------ > Difference |  -0.19 | [-0.32, -0.06] | 99.75% | [-0.03, 0.03] |        0% | 17.72 | Cauchy (0 +- 0.71)"},{"path":"https://easystats.github.io/bayestestR/articles/example2.html","id":"logistic-model","dir":"Articles","previous_headings":"","what":"Logistic Model","title":"2. Confirmation of Bayesian skills","text":"hypothesis one uses t-test can also tested using binomial model (e.g., logistic model). Indeed, possible reformulate following hypothesis, “important difference variable two groups” hypothesis “variable able discriminate (classify) two groups”. However, models much powerful t-test. case difference Sepal.Width virginica versicolor, question becomes, well can classify two species using Sepal.Width.","code":""},{"path":"https://easystats.github.io/bayestestR/articles/example2.html","id":"fit-the-model","dir":"Articles","previous_headings":"Logistic Model","what":"Fit the model","title":"2. Confirmation of Bayesian skills","text":"","code":"library(rstanarm)  model <- stan_glm(Species ~ Sepal.Width,   data = data, family = \"binomial\",   chains = 10, iter = 5000, warmup = 1000,   refresh = 0 )"},{"path":"https://easystats.github.io/bayestestR/articles/example2.html","id":"visualise-the-model","dir":"Articles","previous_headings":"Logistic Model","what":"Visualise the model","title":"2. Confirmation of Bayesian skills","text":"Using modelbased package.","code":"library(modelbased)  vizdata <- estimate_relation(model)  ggplot(vizdata, aes(x = Sepal.Width, y = Predicted)) +   geom_ribbon(aes(ymin = CI_low, ymax = CI_high), alpha = 0.5) +   geom_line() +   ylab(\"Probability of being virginica\") +   theme_modern()"},{"path":"https://easystats.github.io/bayestestR/articles/example2.html","id":"performance-and-parameters","dir":"Articles","previous_headings":"Logistic Model","what":"Performance and Parameters","title":"2. Confirmation of Bayesian skills","text":", can extract indices interest posterior distribution using old pal describe_posterior().","code":"describe_posterior(model, test = c(\"pd\", \"ROPE\", \"BF\")) > Summary of Posterior Distribution >  > Parameter   | Median |          95% CI |     pd |          ROPE | % in ROPE |  Rhat |      ESS |    BF > ------------------------------------------------------------------------------------------------------ > (Intercept) |  -6.12 | [-10.45, -2.25] | 99.92% | [-0.18, 0.18] |        0% | 1.000 | 26540.00 | 14.22 > Sepal.Width |   2.13 | [  0.79,  3.63] | 99.94% | [-0.18, 0.18] |        0% | 1.000 | 26693.00 | 14.27 library(performance)  model_performance(model) > # Indices of model performance >  > ELPD    | ELPD_SE |   LOOIC | LOOIC_SE |    WAIC |    R2 |  RMSE | Sigma | Log_loss | Score_log | Score_spherical > ----------------------------------------------------------------------------------------------------------------- > -66.284 |   3.052 | 132.568 |    6.104 | 132.562 | 0.099 | 0.477 | 1.000 |    0.643 |   -35.436 |           0.014"},{"path":"https://easystats.github.io/bayestestR/articles/example2.html","id":"visualise-the-indices","dir":"Articles","previous_headings":"Logistic Model","what":"Visualise the indices","title":"2. Confirmation of Bayesian skills","text":".","code":"library(see)  plot(rope(result))"},{"path":"https://easystats.github.io/bayestestR/articles/example2.html","id":"diagnostic-indices","dir":"Articles","previous_headings":"Logistic Model","what":"Diagnostic Indices","title":"2. Confirmation of Bayesian skills","text":"diagnostic indices Rhat ESS.","code":""},{"path":"https://easystats.github.io/bayestestR/articles/example3.html","id":"mixed-models","dir":"Articles","previous_headings":"","what":"Mixed Models","title":"3. Become a Bayesian master","text":"CONTINUED.","code":""},{"path":"https://easystats.github.io/bayestestR/articles/example3.html","id":"priors","dir":"Articles","previous_headings":"Mixed Models","what":"Priors","title":"3. Become a Bayesian master","text":"CONTINUED.","code":""},{"path":"https://easystats.github.io/bayestestR/articles/example3.html","id":"whats-next","dir":"Articles","previous_headings":"","what":"What’s next?","title":"3. Become a Bayesian master","text":"journey become true Bayesian master yet . merely beginning. now time leave bayestestR universe apply Bayesian framework variety statistical contexts: Marginal means Contrast analysis Testing Contrasts Bayesian Models ‘emmeans’ ‘bayestestR’","code":""},{"path":[]},{"path":"https://easystats.github.io/bayestestR/articles/guidelines.html","id":"how-to-describe-and-report-the-parameters-of-a-model","dir":"Articles","previous_headings":"Reporting Guidelines","what":"How to describe and report the parameters of a model","title":"Reporting Guidelines","text":"Bayesian analysis returns posterior distribution parameter (effect). minimally describe distributions, recommend reporting point-estimate centrality well information characterizing estimation uncertainty (dispersion). Additionally, one can also report indices effect existence /significance. Based previous comparison point-estimates indices effect existence, can draw following recommendations.","code":""},{"path":"https://easystats.github.io/bayestestR/articles/guidelines.html","id":"centrality","dir":"Articles","previous_headings":"Reporting Guidelines > How to describe and report the parameters of a model","what":"Centrality","title":"Reporting Guidelines","text":"suggest reporting median index centrality, robust compared mean MAP estimate. However, case severely skewed posterior distribution, MAP estimate good alternative.","code":""},{"path":"https://easystats.github.io/bayestestR/articles/guidelines.html","id":"uncertainty","dir":"Articles","previous_headings":"Reporting Guidelines > How to describe and report the parameters of a model","what":"Uncertainty","title":"Reporting Guidelines","text":"95% 89% Credible Intervals (CI) two reasonable ranges characterize uncertainty related estimation (see discussion differences two values). also recommend computing CIs based HDI rather quantiles, favouring probable central values. Note CI based quantile (equal-tailed interval) might appropriate case transformations (instance transforming log-odds probabilities). Otherwise, intervals originally cover null might cover transformation (see ).","code":""},{"path":"https://easystats.github.io/bayestestR/articles/guidelines.html","id":"existence","dir":"Articles","previous_headings":"Reporting Guidelines > How to describe and report the parameters of a model","what":"Existence","title":"Reporting Guidelines","text":"Reviewer 2 (circa long time ago galaxy far away). Bayesian framework can neatly delineate quantify different aspects hypothesis testing, effect existence significance. straightforward index describe existence effect Probability Direction (pd), representing certainty associated probable direction (positive negative) effect. index easy understand, simple interpret, straightforward compute, robust model characteristics, independent scale data. Moreover, strongly correlated frequentist p-value, can thus used draw parallels give reference readers non-familiar Bayesian statistics. two-sided p-value respectively .1, .05, .01 .001 correspond approximately pd* 95%, 97.5%, 99.5% 99.95%. Thus, convenience, suggest following reference values interpretation helpers: pd <= 95% ~ p > .1: uncertain pd > 95% ~ p < .1: possibly existing pd > 97%: likely existing pd > 99%: probably existing pd > 99.9%: certainly existing","code":""},{"path":"https://easystats.github.io/bayestestR/articles/guidelines.html","id":"significance","dir":"Articles","previous_headings":"Reporting Guidelines > How to describe and report the parameters of a model","what":"Significance","title":"Reporting Guidelines","text":"percentage ROPE index significance (primary meaning), informing us whether parameter related non-negligible change (terms magnitude) outcome. suggest reporting percentage full posterior distribution (full ROPE) instead given proportion CI ROPE, appears sensitive (especially delineate highly significant effects). Rather using binary, --nothing decision criterion, suggested original equivalence test, recommend using percentage continuous index significance. However, based simulation data, suggest following reference values interpretation helpers: > 99% ROPE: negligible (can accept null hypothesis) > 97.5% ROPE: probably negligible <= 97.5% & >= 2.5% ROPE: undecided significance < 2.5% ROPE: probably significant < 1% ROPE: significant (can reject null hypothesis) Note extra caution required interpretation highly depends parameters sample size ROPE range (see ).","code":""},{"path":"https://easystats.github.io/bayestestR/articles/guidelines.html","id":"template-sentence","dir":"Articles","previous_headings":"Reporting Guidelines > How to describe and report the parameters of a model","what":"Template Sentence","title":"Reporting Guidelines","text":"Based suggestions, template sentence minimal reporting parameter based posterior distribution : “effect X probability pd negative (Median = median, 89% CI [ HDIlow , HDIhigh ] can considered significant [ROPE% ROPE]).”","code":""},{"path":"https://easystats.github.io/bayestestR/articles/guidelines.html","id":"how-to-compare-different-models","dir":"Articles","previous_headings":"Reporting Guidelines","what":"How to compare different models","title":"Reporting Guidelines","text":"Although can also used assess effect existence significance, Bayes factor (BF) versatile index can used directly compare different models (data generation processes). Bayes factor ratio informs us much (less) likely observed data two compared models - usually model versus model without effect. Depending specifications null model (whether point-estimate (e.g., 0) interval), Bayes factor used context effect existence significance. general, Bayes factor greater 1 taken evidence favour one model (nominator), Bayes factor smaller 1 taken evidence favour model (denominator). Several rules thumb exist help interpretation (see ), > 3 one common threshold categorize non-anecdotal evidence.","code":""},{"path":"https://easystats.github.io/bayestestR/articles/guidelines.html","id":"template-sentence-1","dir":"Articles","previous_headings":"Reporting Guidelines > How to compare different models","what":"Template Sentence","title":"Reporting Guidelines","text":"reporting Bayes factors (BF), one can use following sentence: “moderate evidence favour absence effect x (BF = BF).”","code":""},{"path":"https://easystats.github.io/bayestestR/articles/guidelines.html","id":"suggestions","dir":"Articles","previous_headings":"","what":"Suggestions","title":"Reporting Guidelines","text":"advice, opinion , encourage let us know opening discussion thread making pull request.","code":""},{"path":"https://easystats.github.io/bayestestR/articles/indicesExistenceComparison.html","id":"indices-of-effect-existence-and-significance-in-the-bayesian-framework","dir":"Articles","previous_headings":"","what":"Indices of Effect Existence and Significance in the Bayesian Framework","title":"In-Depth 2: Comparison of Indices of Effect Existence and Significance","text":"comparison different Bayesian indices (pd, BFs, ROPE etc.) accessible . , case don’t wish read full article, following table summarizes key takeaways!","code":""},{"path":"https://easystats.github.io/bayestestR/articles/indicesExistenceComparison.html","id":"suggestions","dir":"Articles","previous_headings":"","what":"Suggestions","title":"In-Depth 2: Comparison of Indices of Effect Existence and Significance","text":"advice, opinion , encourage let us know opening discussion thread making pull request.","code":""},{"path":"https://easystats.github.io/bayestestR/articles/mediation.html","id":"mediation-analysis-in-brms-and-rstanarm","dir":"Articles","previous_headings":"","what":"Mediation Analysis in brms and rstanarm","title":"Mediation Analysis using Bayesian Regression Models","text":"mediation() summary function, especially mediation analysis, .e. multivariate response models casual mediation effects. models m2 m3, treat treatment effect job_seek mediator effect. brms model (m2), f1 describes mediator model f2 describes outcome model. similar rstanarm model. mediation() returns data frame information direct effect (median value posterior samples treatment outcome model), mediator effect (median value posterior samples mediator outcome model), indirect effect (median value multiplication posterior samples mediator outcome model posterior samples treatment mediation model) total effect (median value sums posterior samples used direct indirect effect). proportion mediated indirect effect divided total effect. simplest call just needs model-object. Typically, mediation() finds treatment mediator variables automatically. work, use treatment mediator arguments specify related variable names. values, 89% credible intervals calculated default. Use ci calculate different interval.","code":"library(bayestestR) library(mediation) library(brms) library(rstanarm)  # load sample data data(jobs)  set.seed(123) # linear models, for mediation analysis b1 <- lm(job_seek ~ treat + econ_hard + sex + age, data = jobs) b2 <- lm(depress2 ~ treat + job_seek + econ_hard + sex + age, data = jobs)  # mediation analysis, for comparison with brms m1 <- mediate(b1, b2, sims = 1000, treat = \"treat\", mediator = \"job_seek\") # Fit Bayesian mediation model in brms f1 <- bf(job_seek ~ treat + econ_hard + sex + age) f2 <- bf(depress2 ~ treat + job_seek + econ_hard + sex + age) m2 <- brm(f1 + f2 + set_rescor(FALSE), data = jobs, cores = 4) # Fit Bayesian mediation model in rstanarm m3 <- stan_mvmer(   list(     job_seek ~ treat + econ_hard + sex + age + (1 | occp),     depress2 ~ treat + job_seek + econ_hard + sex + age + (1 | occp)   ),   data = jobs,   cores = 4,   refresh = 0 ) # for brms mediation(m2) #> # Causal Mediation Analysis for Stan Model #>  #>   Treatment: treat #>   Mediator : job_seek #>   Response : depress2 #>  #> Effect                 | Estimate |          95% ETI #> ---------------------------------------------------- #> Direct Effect (ADE)    |   -0.040 | [-0.124,  0.046] #> Indirect Effect (ACME) |   -0.015 | [-0.041,  0.008] #> Mediator Effect        |   -0.240 | [-0.294, -0.185] #> Total Effect           |   -0.055 | [-0.145,  0.034] #>  #> Proportion mediated: 28.14% [-181.46%, 237.75%]  # for rstanarm mediation(m3) #> # Causal Mediation Analysis for Stan Model #>  #>   Treatment: treat #>   Mediator : job_seek #>   Response : depress2 #>  #> Effect                 | Estimate |          95% ETI #> ---------------------------------------------------- #> Direct Effect (ADE)    |   -0.040 | [-0.129,  0.048] #> Indirect Effect (ACME) |   -0.018 | [-0.042,  0.006] #> Mediator Effect        |   -0.241 | [-0.296, -0.187] #> Total Effect           |   -0.057 | [-0.151,  0.033] #>  #> Proportion mediated: 30.59% [-221.09%, 282.26%]"},{"path":"https://easystats.github.io/bayestestR/articles/mediation.html","id":"comparison-to-the-mediation-package","dir":"Articles","previous_headings":"","what":"Comparison to the mediation package","title":"Mediation Analysis using Bayesian Regression Models","text":"comparison mediation package. Note summary()-output mediation package shows indirect effect first, followed direct effect. want calculate mean instead median values posterior samples, use centrality-argument. Furthermore, print()-method, allows print digits. can see, results similar mediation package produces non-Bayesian models.","code":"summary(m1) #>  #> Causal Mediation Analysis  #>  #> Quasi-Bayesian Confidence Intervals #>  #>                Estimate 95% CI Lower 95% CI Upper p-value #> ACME            -0.0157      -0.0387         0.01    0.19 #> ADE             -0.0438      -0.1315         0.04    0.35 #> Total Effect    -0.0595      -0.1530         0.02    0.21 #> Prop. Mediated   0.2137      -2.0277         2.70    0.32 #>  #> Sample Size Used: 899  #>  #>  #> Simulations: 1000  mediation(m2, ci = 0.95) #> # Causal Mediation Analysis for Stan Model #>  #>   Treatment: treat #>   Mediator : job_seek #>   Response : depress2 #>  #> Effect                 | Estimate |          95% ETI #> ---------------------------------------------------- #> Direct Effect (ADE)    |   -0.040 | [-0.124,  0.046] #> Indirect Effect (ACME) |   -0.015 | [-0.041,  0.008] #> Mediator Effect        |   -0.240 | [-0.294, -0.185] #> Total Effect           |   -0.055 | [-0.145,  0.034] #>  #> Proportion mediated: 28.14% [-181.46%, 237.75%]  mediation(m3, ci = 0.95) #> # Causal Mediation Analysis for Stan Model #>  #>   Treatment: treat #>   Mediator : job_seek #>   Response : depress2 #>  #> Effect                 | Estimate |          95% ETI #> ---------------------------------------------------- #> Direct Effect (ADE)    |   -0.040 | [-0.129,  0.048] #> Indirect Effect (ACME) |   -0.018 | [-0.042,  0.006] #> Mediator Effect        |   -0.241 | [-0.296, -0.187] #> Total Effect           |   -0.057 | [-0.151,  0.033] #>  #> Proportion mediated: 30.59% [-221.09%, 282.26%] m <- mediation(m2, centrality = \"mean\", ci = 0.95) print(m, digits = 4) #> # Causal Mediation Analysis for Stan Model #>  #>   Treatment: treat #>   Mediator : job_seek #>   Response : depress2 #>  #> Effect                 | Estimate |            95% ETI #> ------------------------------------------------------ #> Direct Effect (ADE)    |  -0.0395 | [-0.1237,  0.0456] #> Indirect Effect (ACME) |  -0.0158 | [-0.0405,  0.0083] #> Mediator Effect        |  -0.2401 | [-0.2944, -0.1846] #> Total Effect           |  -0.0553 | [-0.1454,  0.0341] #>  #> Proportion mediated: 28.60% [-181.01%, 238.20%]"},{"path":"https://easystats.github.io/bayestestR/articles/mediation.html","id":"comparison-to-sem-from-the-lavaan-package","dir":"Articles","previous_headings":"","what":"Comparison to SEM from the lavaan package","title":"Mediation Analysis using Bayesian Regression Models","text":"Finally, also compare results SEM model, using lavaan. example demonstrate “translate” model different packages modeling approached. summary output lavaan longer, can find related numbers quite easily: direct effect treatment treat (c1), -0.040 indirect effect treatment indirect_treat, -0.016 mediator effect job_seek job_seek (b), -0.240 total effect total_treat, -0.056","code":"library(lavaan) data(jobs) set.seed(1234)  model <- \" # direct effects              depress2 ~ c1*treat + c2*econ_hard + c3*sex + c4*age + b*job_seek             # mediation              job_seek ~ a1*treat + a2*econ_hard + a3*sex + a4*age             # indirect effects (a*b)              indirect_treat := a1*b              indirect_econ_hard := a2*b              indirect_sex := a3*b              indirect_age := a4*b             # total effects              total_treat := c1 + (a1*b)              total_econ_hard := c2 + (a2*b)              total_sex := c3 + (a3*b)              total_age := c4 + (a4*b)          \" m4 <- sem(model, data = jobs) summary(m4) #> lavaan 0.6.15 ended normally after 1 iteration #>  #>   Estimator                                         ML #>   Optimization method                           NLMINB #>   Number of model parameters                        11 #>  #>   Number of observations                           899 #>  #> Model Test User Model: #>                                                        #>   Test statistic                                 0.000 #>   Degrees of freedom                                 0 #>  #> Parameter Estimates: #>  #>   Standard errors                             Standard #>   Information                                 Expected #>   Information saturated (h1) model          Structured #>  #> Regressions: #>                    Estimate  Std.Err  z-value  P(>|z|) #>   depress2 ~                                           #>     treat     (c1)   -0.040    0.043   -0.929    0.353 #>     econ_hard (c2)    0.149    0.021    7.156    0.000 #>     sex       (c3)    0.107    0.041    2.604    0.009 #>     age       (c4)    0.001    0.002    0.332    0.740 #>     job_seek   (b)   -0.240    0.028   -8.524    0.000 #>   job_seek ~                                           #>     treat     (a1)    0.066    0.051    1.278    0.201 #>     econ_hard (a2)    0.053    0.025    2.167    0.030 #>     sex       (a3)   -0.008    0.049   -0.157    0.875 #>     age       (a4)    0.005    0.002    1.983    0.047 #>  #> Variances: #>                    Estimate  Std.Err  z-value  P(>|z|) #>    .depress2          0.373    0.018   21.201    0.000 #>    .job_seek          0.524    0.025   21.201    0.000 #>  #> Defined Parameters: #>                    Estimate  Std.Err  z-value  P(>|z|) #>     indirect_treat   -0.016    0.012   -1.264    0.206 #>     indirct_cn_hrd   -0.013    0.006   -2.100    0.036 #>     indirect_sex      0.002    0.012    0.157    0.875 #>     indirect_age     -0.001    0.001   -1.932    0.053 #>     total_treat      -0.056    0.045   -1.244    0.214 #>     total_econ_hrd    0.136    0.022    6.309    0.000 #>     total_sex         0.109    0.043    2.548    0.011 #>     total_age        -0.000    0.002   -0.223    0.824  # just to have the numbers right at hand and you don't need to scroll up mediation(m2, ci = 0.95) #> # Causal Mediation Analysis for Stan Model #>  #>   Treatment: treat #>   Mediator : job_seek #>   Response : depress2 #>  #> Effect                 | Estimate |          95% ETI #> ---------------------------------------------------- #> Direct Effect (ADE)    |   -0.040 | [-0.124,  0.046] #> Indirect Effect (ACME) |   -0.015 | [-0.041,  0.008] #> Mediator Effect        |   -0.240 | [-0.294, -0.185] #> Total Effect           |   -0.055 | [-0.145,  0.034] #>  #> Proportion mediated: 28.14% [-181.46%, 237.75%]"},{"path":"https://easystats.github.io/bayestestR/articles/overview_of_vignettes.html","id":"function-overview","dir":"Articles","previous_headings":"","what":"Function Overview","title":"Overview of Vignettes","text":"Function Reference","code":""},{"path":"https://easystats.github.io/bayestestR/articles/overview_of_vignettes.html","id":"get-started","dir":"Articles","previous_headings":"","what":"Get Started","title":"Overview of Vignettes","text":"Get Started Bayesian Analysis","code":""},{"path":"https://easystats.github.io/bayestestR/articles/overview_of_vignettes.html","id":"examples","dir":"Articles","previous_headings":"","what":"Examples","title":"Overview of Vignettes","text":"Initiation Bayesian models Confirmation Bayesian skills Become Bayesian master","code":""},{"path":"https://easystats.github.io/bayestestR/articles/overview_of_vignettes.html","id":"articles","dir":"Articles","previous_headings":"","what":"Articles","title":"Overview of Vignettes","text":"Credible Intervals (CI)) Region Practical Equivalence (ROPE) Probability Direction (pd) Bayes Factors","code":""},{"path":"https://easystats.github.io/bayestestR/articles/overview_of_vignettes.html","id":"in-depths","dir":"Articles","previous_headings":"","what":"In-Depths","title":"Overview of Vignettes","text":"Comparison Point-Estimates Indices Effect Existence Significance Bayesian Framework Mediation Analysis using Bayesian Regression Models","code":""},{"path":"https://easystats.github.io/bayestestR/articles/overview_of_vignettes.html","id":"guidelines","dir":"Articles","previous_headings":"","what":"Guidelines","title":"Overview of Vignettes","text":"Reporting Guidelines","code":""},{"path":"https://easystats.github.io/bayestestR/articles/probability_of_direction.html","id":"what-is-the-pd","dir":"Articles","previous_headings":"","what":"What is the pd?","title":"Probability of Direction (pd)","text":"Probability Direction (pd) index effect existence, ranging 50% 100%, representing certainty effect goes particular direction (.e., positive negative). Beyond simplicity interpretation, understanding computation, index also presents interesting properties: independent model: solely based posterior distributions require additional information data model. robust scale response variable predictors. strongly correlated frequentist p-value, can thus used draw parallels give reference readers non-familiar Bayesian statistics. However, index relevant assess magnitude importance effect (meaning “significance”), better achieved indices ROPE percentage. fact, indices significance existence totally independent. can effect pd 99.99%, whole posterior distribution concentrated within [0.0001, 0.0002] range. case, effect positive high certainty, also significant (.e., small). Indices effect existence, pd, particularly useful exploratory research clinical studies, focus make sure effect interest opposite direction (clinical studies, treatment harmful). However, effect’s direction confirmed, focus shift toward significance, including precise estimation magnitude, relevance importance.","code":""},{"path":"https://easystats.github.io/bayestestR/articles/probability_of_direction.html","id":"relationship-with-the-p-value","dir":"Articles","previous_headings":"","what":"Relationship with the p-value","title":"Probability of Direction (pd)","text":"cases, seems pd direct correspondence frequentist one-sided p-value formula: \\[p_{one-sided} = 1-p_d\\] Similarly, two-sided p-value (commonly reported one) equivalent formula: \\[p_{two-sided} = 2*(1-p_d)\\] Thus, two-sided p-value respectively .1, .05, .01 .001 correspond approximately pd 95%, 97.5%, 99.5% 99.95% . Correlation frequentist p-value probability direction (pd) ’s like p-value, must bad p-value bad [insert reference reproducibility crisis]. fact, aspect reproducibility crisis might misunderstood. Indeed, p-value intrinsically bad wrong. Instead, misuse, misunderstanding misinterpretation fuels decay situation. instance, fact pd highly correlated p-value suggests latter index effect existence significance (.e., “worth interest”). Bayesian version, pd, intuitive meaning makes obvious fact thresholds arbitrary. Additionally, mathematical interpretative transparency pd, reconceptualisation index effect existence, offers valuable insight characterization Bayesian results. Moreover, concomitant proximity frequentist p-value makes perfect metric ease transition psychological research adoption Bayesian framework.","code":""},{"path":"https://easystats.github.io/bayestestR/articles/probability_of_direction.html","id":"methods-of-computation","dir":"Articles","previous_headings":"","what":"Methods of computation","title":"Probability of Direction (pd)","text":"simple direct way compute pd 1) look median’s sign, 2) select portion posterior sign 3) compute percentage portion represents. “simple” method straightforward, precision directly tied number posterior draws. second approach relies density estimation. starts estimating density function (many methods available), computing area curve (AUC) density curve side 0. density-based method hypothetically considered precise, strongly depends method used estimate density function.","code":""},{"path":"https://easystats.github.io/bayestestR/articles/probability_of_direction.html","id":"methods-comparison","dir":"Articles","previous_headings":"","what":"Methods comparison","title":"Probability of Direction (pd)","text":"Let’s compare 4 available methods, direct method 3 density-based methods differing density estimation algorithm (see estimate_density).","code":""},{"path":"https://easystats.github.io/bayestestR/articles/probability_of_direction.html","id":"correlation","dir":"Articles","previous_headings":"Methods comparison","what":"Correlation","title":"Probability of Direction (pd)","text":"Let’s start testing proximity similarity results obtained different methods. methods give highly correlated give similar results. means method choice drastic game changer used tweak results much.","code":"library(bayestestR) library(logspline) library(KernSmooth)  # Compute the correlations data <- data.frame() for (the_mean in runif(25, 0, 4)) {   for (the_sd in runif(25, 0.5, 4)) {     x <- rnorm(100, the_mean, abs(the_sd))     data <- rbind(       data,       data.frame(         \"direct\" = pd(x),         \"kernel\" = pd(x, method = \"kernel\"),         \"logspline\" = pd(x, method = \"logspline\"),         \"KernSmooth\" = pd(x, method = \"KernSmooth\")       )     )   } } data <- as.data.frame(sapply(data, as.numeric))  # Visualize the correlations bayesplot::mcmc_pairs(data) +   theme_classic() > NULL"},{"path":"https://easystats.github.io/bayestestR/articles/probability_of_direction.html","id":"accuracy","dir":"Articles","previous_headings":"Methods comparison","what":"Accuracy","title":"Probability of Direction (pd)","text":"test accuracy methods, start computing direct pd dense distribution (large amount observations). baseline, “true” pd. , iteratively draw smaller samples parent distribution, compute pd different methods. closer estimate reference one, better.  “Kernel” based density methods seems consistently underestimate pd. Interestingly, “direct” method appears reliable, even case small number posterior draws.","code":"data <- data.frame() for (i in 1:25) {   the_mean <- runif(1, 0, 4)   the_sd <- abs(runif(1, 0.5, 4))   parent_distribution <- rnorm(100000, the_mean, the_sd)   true_pd <- pd(parent_distribution)    for (j in 1:25) {     sample_size <- round(runif(1, 25, 5000))     subsample <- sample(parent_distribution, sample_size)     data <- rbind(       data,       data.frame(         \"sample_size\" = sample_size,         \"true\" = true_pd,         \"direct\" = pd(subsample) - true_pd,         \"kernel\" = pd(subsample, method = \"kernel\") - true_pd,         \"logspline\" = pd(subsample, method = \"logspline\") - true_pd,         \"KernSmooth\" = pd(subsample, method = \"KernSmooth\") - true_pd       )     )   } } data <- as.data.frame(sapply(data, as.numeric)) library(datawizard) # for reshape_longer  data <- reshape_longer(data, select = 3:6, names_to = \"Method\", values_to = \"Distance\")  ggplot(data, aes(x = sample_size, y = Distance, color = Method, fill = Method)) +   geom_point(alpha = 0.3, stroke = 0, shape = 16) +   geom_smooth(alpha = 0.2) +   geom_hline(yintercept = 0) +   theme_classic() +   xlab(\"\\nDistribution Size\")"},{"path":"https://easystats.github.io/bayestestR/articles/probability_of_direction.html","id":"can-the-pd-be-100","dir":"Articles","previous_headings":"Methods comparison","what":"Can the pd be 100%?","title":"Probability of Direction (pd)","text":"p = 0.000 coined one term avoid reporting results (Lilienfeld et al., 2015), even often displayed statistical software. rationale every probability distribution, value probability exactly 0. always infinitesimal probability associated data point, p = 0.000 returned software due approximations related, among , finite memory hardware. One apply rationale pd: since data points non-null probability density, pd (particular portion probability density) can never 100%. entirely valid point, people using direct method might argue pd based posterior draws, rather theoretical, hidden, true posterior distribution (approximated posterior draws). posterior draws represent finite sample pd = 100% valid statement.","code":""},{"path":"https://easystats.github.io/bayestestR/articles/region_of_practical_equivalence.html","id":"what-is-the-rope","dir":"Articles","previous_headings":"","what":"What is the ROPE?","title":"Region of Practical Equivalence (ROPE)","text":"Unlike frequentist approach, Bayesian inference based statistical significance, effects tested “zero”. Indeed, Bayesian framework offers probabilistic view parameters, allowing assessment uncertainty related . Thus, rather concluding effect present simply differs zero, conclude probability outside specific range can considered “practically effect” (.e., negligible magnitude) sufficient. range called region practical equivalence (ROPE). Indeed, statistically, probability posterior distribution different 0 make much sense (probability different single point infinite). Therefore, idea underlining ROPE let user define area around null value enclosing values equivalent null value practical purposes (J. Kruschke, 2014; J. K. Kruschke, 2010; J. K. Kruschke, Aguinis, & Joo, 2012).","code":""},{"path":"https://easystats.github.io/bayestestR/articles/region_of_practical_equivalence.html","id":"equivalence-test","dir":"Articles","previous_headings":"","what":"Equivalence Test","title":"Region of Practical Equivalence (ROPE)","text":"ROPE, region corresponding “null” hypothesis, used equivalence test, test whether parameter significant (sense important enough cared ). test usually based “HDI+ROPE decision rule” (J. Kruschke, 2014; J. K. Kruschke & Liddell, 2018) check whether parameter values accepted rejected explicitly formulated “null hypothesis” (.e., ROPE). words, checks percentage Credible Interval (CI) null region (ROPE). percentage sufficiently low, null hypothesis rejected. percentage sufficiently high, null hypothesis accepted.","code":""},{"path":"https://easystats.github.io/bayestestR/articles/region_of_practical_equivalence.html","id":"credible-interval-in-rope-vs-full-posterior-in-rope","dir":"Articles","previous_headings":"","what":"Credible interval in ROPE vs full posterior in ROPE","title":"Region of Practical Equivalence (ROPE)","text":"Using ROPE HDI Credible Interval, Kruschke (2018) suggests using percentage 95% HDI falls within ROPE decision rule. However, 89% HDI considered better choice (J. Kruschke, 2014; R. McElreath, 2014; Richard McElreath, 2018), bayestestR provides default percentage 89% HDI falls within ROPE. However, simulation studies data suggest using percentage full posterior distribution, instead CI, might sensitive (especially delineate highly significant effects). Thus, recommend user considers using full ROPE percentage (setting ci = 1), return portion entire posterior distribution ROPE.","code":""},{"path":"https://easystats.github.io/bayestestR/articles/region_of_practical_equivalence.html","id":"what-percentage-in-rope-to-accept-or-to-reject","dir":"Articles","previous_headings":"","what":"What percentage in ROPE to accept or to reject?","title":"Region of Practical Equivalence (ROPE)","text":"HDI completely outside ROPE, “null hypothesis” parameter “rejected”. ROPE completely covers HDI, .e., credible values parameter inside region practical equivalence, null hypothesis accepted. Else, ’s unclear whether null hypothesis accepted rejected. full ROPE used (.e., 100% HDI), null hypothesis rejected accepted percentage posterior within ROPE smaller 2.5% greater 97.5%. Desirable results low proportions inside ROPE (closer zero better).","code":""},{"path":"https://easystats.github.io/bayestestR/articles/region_of_practical_equivalence.html","id":"how-to-define-the-rope-range","dir":"Articles","previous_headings":"","what":"How to define the ROPE range?","title":"Region of Practical Equivalence (ROPE)","text":"Kruschke (2018) suggests ROPE set, default, range -0.1 0.1 standardized parameter (negligible effect size according Cohen, 1988). linear models (lm), can generalised : \\[[-0.1*SD_{y}, 0.1*SD_{y}]\\]. logistic models, parameters expressed log odds ratio can converted standardized difference formula: \\[\\pi/\\sqrt{3}\\] (see effectsize package, resulting range -0.18 -0.18. models binary outcome, strongly recommended manually specify rope argument. Currently, default applied logistic models. t-tests, standard deviation response used, similarly linear models (see ). correlations, -0.05, 0.05 used, .e., half value negligible correlation suggested Cohen’s (1988) rules thumb. models, -0.1, 0.1 used determine ROPE limits, strongly advised specify manually.","code":""},{"path":"https://easystats.github.io/bayestestR/articles/region_of_practical_equivalence.html","id":"sensitivity-to-parameters-scale","dir":"Articles","previous_headings":"","what":"Sensitivity to parameter’s scale","title":"Region of Practical Equivalence (ROPE)","text":"important consider unit (.e., scale) predictors using index based ROPE, correct interpretation ROPE representing region practical equivalence zero dependent scale predictors. Indeed, unlike indices (pd), percentage ROPE depend unit parameter. words, ROPE represents fixed portion response’s scale, proximity coefficient depends scale coefficient . instance, consider simple regression growth ~ time, modelling development Wookies babies, negligible change (ROPE) less 54 cm. time variable expressed days, find coefficient (representing growth day) 10 cm (median posterior coefficient 10). consider negligible. However, decide express time variable years, coefficient scaled transformation (now represent growth year). coefficient now around 3550 cm (10 * 355), now consider significant.   can see pd percentage ROPE linear relationship Sepal.Length Sepal.Width respectively 92.95% 15.95%, corresponding uncertain significant effect. happen scale predictor?   can see, simply dividing predictor 100, drastically changed conclusion related percentage ROPE (became close 0): effect now interpreted significant. Thus, recommend paying close attention unit predictors selecting ROPE range (e.g., coefficient correspond small effect?), reporting reading ROPE results.","code":"library(rstanarm) library(bayestestR) library(see)  data <- iris # Use the iris data model <- stan_glm(Sepal.Length ~ Sepal.Width, data = data) # Fit model # Compute indices pd <- p_direction(model) percentage_in_rope <- rope(model, ci = 1)  # Visualise the pd plot(pd) pd > Probability of Direction >  > Parameter   |     pd > -------------------- > (Intercept) |   100% > Sepal.Width | 91.65% # Visualise the percentage in ROPE plot(percentage_in_rope) percentage_in_rope > # Proportion of samples inside the ROPE [-0.08, 0.08]: >  > Parameter   | inside ROPE > ------------------------- > (Intercept) |      0.00 % > Sepal.Width |     16.28 % data$Sepal.Width_scaled <- data$Sepal.Width / 100 # Divide predictor by 100 model <- stan_glm(Sepal.Length ~ Sepal.Width_scaled, data = data) # Fit model # Compute indices pd <- p_direction(model) percentage_in_rope <- rope(model, ci = 1)  # Visualise the pd plot(pd) pd > Probability of Direction >  > Parameter          |     pd > --------------------------- > (Intercept)        |   100% > Sepal.Width_scaled | 91.65% # Visualise the percentage in ROPE plot(percentage_in_rope) percentage_in_rope > # Proportion of samples inside the ROPE [-0.08, 0.08]: >  > Parameter          | inside ROPE > -------------------------------- > (Intercept)        |      0.00 % > Sepal.Width_scaled |      0.10 %"},{"path":"https://easystats.github.io/bayestestR/articles/region_of_practical_equivalence.html","id":"multicollinearity-non-independent-covariates","dir":"Articles","previous_headings":"","what":"Multicollinearity: Non-independent covariates","title":"Region of Practical Equivalence (ROPE)","text":"parameters show strong correlations, .e., covariates independent, joint parameter distributions may shift towards away ROPE. Collinearity invalidates ROPE hypothesis testing based univariate marginals, probabilities conditional independence. problematic parameters partial overlap ROPE region. case collinearity, (joint) distributions parameters may either get increased decreased ROPE, means inferences based ROPE inappropriate (J. Kruschke, 2014). equivalence_test() rope() functions perform simple check pairwise correlations parameters, can collinearity two variables, first step check assumptions hypothesis testing look different pair plots. even sophisticated check projection predictive variable selection (Piironen & Vehtari, 2017).","code":""},{"path":[]},{"path":"https://easystats.github.io/bayestestR/articles/web_only/indicesEstimationComparison.html","id":"introduction","dir":"Articles > Web_only","previous_headings":"Effect Point-Estimates in the Bayesian Framework","what":"Introduction","title":"In-Depth 1: Comparison of Point-Estimates","text":"One main difference Bayesian frequentist frameworks former returns probability distribution effect (.e., model parameter interest, regression slope) instead single value. However, still need demand - reporting use analysis - single value (point-estimate) best characterises underlying posterior distribution. three main indices used literature effect estimation: - mean - median - MAP (Maximum Posteriori) estimate (roughly corresponding mode - “peak” - distribution) Unfortunately, consensus one use, systematic comparison ever done. present work, compare three point-estimates effect , well widely known beta, extracted comparable frequentist model. comparisons can help us draw bridges relationships two influential statistical frameworks.","code":""},{"path":[]},{"path":"https://easystats.github.io/bayestestR/articles/web_only/indicesEstimationComparison.html","id":"methods","dir":"Articles > Web_only","previous_headings":"Effect Point-Estimates in the Bayesian Framework > Experiment 1: Relationship with Error (Noise) and Sample Size","what":"Methods","title":"In-Depth 1: Comparison of Point-Estimates","text":"carrying simulation aimed modulating following characteristics: Model type: linear logistic. “True” effect (known parameters values data drawn): Can 1 0 (effect). Sample size: 20 100 steps 10. Error: Gaussian noise applied predictor SD uniformly spread 0.33 6.66 (1000 different values). generated dataset combination characteristics, resulting total 2 * 2 * 9 * 1000 = 36000 Bayesian frequentist models. code used generation available (please note takes usually several days/weeks complete).","code":"library(ggplot2) library(datawizard) library(see) library(parameters)  df <- read.csv(\"https://raw.github.com/easystats/circus/master/data/bayesSim_study1.csv\")"},{"path":[]},{"path":"https://easystats.github.io/bayestestR/articles/web_only/indicesEstimationComparison.html","id":"sensitivity-to-noise","dir":"Articles > Web_only","previous_headings":"Effect Point-Estimates in the Bayesian Framework > Experiment 1: Relationship with Error (Noise) and Sample Size > Results","what":"Sensitivity to Noise","title":"In-Depth 1: Comparison of Point-Estimates","text":"","code":"dat <- df dat <- data_select(dat, select = c(\"error\", \"true_effect\", \"outcome_type\", \"Coefficient\", \"Median\", \"Mean\", \"MAP\")) dat <- reshape_longer(   dat,   select = -c(\"error\", \"true_effect\", \"outcome_type\"),   names_to = \"estimate\",   values_to = \"value\" ) dat$temp <- as.factor(cut(dat$error, 10, labels = FALSE))  tmp <- lapply(split(dat, dat$temp), function(x) {   x$error_group <- rep(round(mean(x$error), 1), times = nrow(x))   return(x) })  dat <- do.call(rbind, tmp) dat <- data_filter(dat, value < 6)  ggplot(dat, aes(x = error_group, y = value, fill = estimate, group = interaction(estimate, error_group))) +   # geom_hline(yintercept = 0) +   # geom_point(alpha=0.05, size=2, stroke = 0, shape=16) +   # geom_smooth(method=\"loess\") +   geom_boxplot(outlier.shape = NA) +   theme_modern() +   scale_fill_manual(     values = c(\"Coefficient\" = \"#607D8B\", \"MAP\" = \"#795548\", \"Mean\" = \"#FF9800\", \"Median\" = \"#FFEB3B\"),     name = \"Index\"   ) +   ylab(\"Point-estimate\") +   xlab(\"Noise\") +   facet_wrap(~ outcome_type * true_effect, scales = \"free\")"},{"path":"https://easystats.github.io/bayestestR/articles/web_only/indicesEstimationComparison.html","id":"sensitivity-to-sample-size","dir":"Articles > Web_only","previous_headings":"Effect Point-Estimates in the Bayesian Framework > Experiment 1: Relationship with Error (Noise) and Sample Size > Results","what":"Sensitivity to Sample Size","title":"In-Depth 1: Comparison of Point-Estimates","text":"","code":"dat <- df dat <- data_select(dat, select = c(\"sample_size\", \"true_effect\", \"outcome_type\", \"Coefficient\", \"Median\", \"Mean\", \"MAP\")) dat <- reshape_longer(   dat,   select = -c(\"sample_size\", \"true_effect\", \"outcome_type\"),   names_to = \"estimate\",   values_to = \"value\" ) dat$temp <- as.factor(cut(dat$sample_size, 10, labels = FALSE))  tmp <- lapply(split(dat, dat$temp), function(x) {   x$size_group <- rep(round(mean(x$sample_size), 1), times = nrow(x))   return(x) })  dat <- do.call(rbind, tmp) dat <- data_filter(dat, value < 6)  ggplot(dat, aes(x = size_group, y = value, fill = estimate, group = interaction(estimate, size_group))) +   # geom_hline(yintercept = 0) +   # geom_point(alpha=0.05, size=2, stroke = 0, shape=16) +   # geom_smooth(method=\"loess\") +   geom_boxplot(outlier.shape = NA) +   theme_modern() +   scale_fill_manual(     values = c(\"Coefficient\" = \"#607D8B\", \"MAP\" = \"#795548\", \"Mean\" = \"#FF9800\", \"Median\" = \"#FFEB3B\"),     name = \"Index\"   ) +   ylab(\"Point-estimate\") +   xlab(\"Sample size\") +   facet_wrap(~ outcome_type * true_effect, scales = \"free\")"},{"path":"https://easystats.github.io/bayestestR/articles/web_only/indicesEstimationComparison.html","id":"statistical-modelling","dir":"Articles > Web_only","previous_headings":"Effect Point-Estimates in the Bayesian Framework > Experiment 1: Relationship with Error (Noise) and Sample Size > Results","what":"Statistical Modelling","title":"In-Depth 1: Comparison of Point-Estimates","text":"fitted (frequentist) multiple linear regression statistically test predict presence absence effect estimates well interaction noise sample size. suggests , order delineate presence absence effect, compared frequentist’s beta coefficient: linear models, Mean better predictor, closely followed Median, MAP frequentist Coefficient. logistic models, MAP better predictor, followed Median, Mean , behind, frequentist Coefficient. Overall, median appears safe choice, maintaining high performance across different types models.","code":"dat <- df dat <- data_select(dat, select = c(\"sample_size\", \"true_effect\", \"outcome_type\", \"Coefficient\", \"Median\", \"Mean\", \"MAP\")) dat <- reshape_longer(   dat,   select = -c(\"sample_size\", \"error\", \"true_effect\", \"outcome_type\"),   names_to = \"estimate\",   values_to = \"value\" )  out <- glm(true_effect ~ outcome_type / estimate / value, data = dat, family = \"binomial\") out <- parameters(out, ci_method = \"wald\") out <- data_select(out, c(\"Parameter\", \"Coefficient\", \"p\")) out <- data_filter(out, grep(\"^outcome_type(.*):value$\", x = out$Parameter)) out <- out[order(out$Coefficient, decreasing = TRUE), ] knitr::kable(out, digits = 2)"},{"path":[]},{"path":"https://easystats.github.io/bayestestR/articles/web_only/indicesEstimationComparison.html","id":"methods-1","dir":"Articles > Web_only","previous_headings":"Effect Point-Estimates in the Bayesian Framework > Experiment 2: Relationship with Sampling Characteristics","what":"Methods","title":"In-Depth 1: Comparison of Point-Estimates","text":"carrying another simulation aimed modulating following characteristics: Model type: linear logistic. “True” effect (original regression coefficient data drawn): Can 1 0 (effect). draws: 10 5000 step 5 (1000 iterations). warmup: Ratio warmup iterations. 1/10 9/10 step 0.1 (9 iterations). generated 3 datasets combination characteristics, resulting total 2 * 2 * 8 * 40 * 9 * 3 = 34560 Bayesian frequentist models. code used generation avaible (please note takes usually several days/weeks complete).","code":"df <- read.csv(\"https://raw.github.com/easystats/circus/master/data/bayesSim_study2.csv\")"},{"path":[]},{"path":"https://easystats.github.io/bayestestR/articles/web_only/indicesEstimationComparison.html","id":"sensitivity-to-number-of-iterations","dir":"Articles > Web_only","previous_headings":"Effect Point-Estimates in the Bayesian Framework > Experiment 2: Relationship with Sampling Characteristics > Results","what":"Sensitivity to number of iterations","title":"In-Depth 1: Comparison of Point-Estimates","text":"","code":"dat <- df dat <- data_select(dat, select = c(\"iterations\", \"true_effect\", \"outcome_type\", \"beta\", \"Median\", \"Mean\", \"MAP\")) dat <- reshape_longer(   dat,   select = -c(\"iterations\", \"true_effect\", \"outcome_type\"),   names_to = \"estimate\",   values_to = \"value\" ) dat$temp <- as.factor(cut(dat$iterations, 5, labels = FALSE))  tmp <- lapply(split(dat, dat$temp), function(x) {   x$iterations_group <- rep(round(mean(x$iterations), 1), times = nrow(x))   return(x) })  dat <- do.call(rbind, tmp) dat <- data_filter(dat, value < 6)  ggplot(dat, aes(x = iterations_group, y = value, fill = estimate, group = interaction(estimate, iterations_group))) +   geom_boxplot(outlier.shape = NA) +   theme_classic() +   scale_fill_manual(     values = c(\"beta\" = \"#607D8B\", \"MAP\" = \"#795548\", \"Mean\" = \"#FF9800\", \"Median\" = \"#FFEB3B\"),     name = \"Index\"   ) +   ylab(\"Point-estimate of the true value 0\\n\") +   xlab(\"\\nNumber of Iterations\") +   facet_wrap(~ outcome_type * true_effect, scales = \"free\")"},{"path":"https://easystats.github.io/bayestestR/articles/web_only/indicesEstimationComparison.html","id":"sensitivity-to-warmup-ratio","dir":"Articles > Web_only","previous_headings":"Effect Point-Estimates in the Bayesian Framework > Experiment 2: Relationship with Sampling Characteristics > Results","what":"Sensitivity to warmup ratio","title":"In-Depth 1: Comparison of Point-Estimates","text":"","code":"dat <- df dat$warmup <- dat$warmup / dat$iterations dat <- data_select(dat, select = c(\"warmup\", \"true_effect\", \"outcome_type\", \"beta\", \"Median\", \"Mean\", \"MAP\")) dat <- reshape_longer(   dat,   select = -c(\"warmup\", \"true_effect\", \"outcome_type\"),   names_to = \"estimate\",   values_to = \"value\" ) dat$temp <- as.factor(cut(dat$warmup, 3, labels = FALSE))  tmp <- lapply(split(dat, dat$temp), function(x) {   x$warmup_group <- rep(round(mean(x$warmup), 1), times = nrow(x))   return(x) })  dat <- do.call(rbind, tmp) dat <- data_filter(dat, value < 6)  ggplot(dat, aes(x = warmup_group, y = value, fill = estimate, group = interaction(estimate, warmup_group))) +   geom_boxplot(outlier.shape = NA) +   theme_classic() +   scale_fill_manual(     values = c(\"beta\" = \"#607D8B\", \"MAP\" = \"#795548\", \"Mean\" = \"#FF9800\", \"Median\" = \"#FFEB3B\"),     name = \"Index\"   ) +   ylab(\"Point-estimate of the true value 0\\n\") +   xlab(\"\\nNumber of Iterations\") +   facet_wrap(~ outcome_type * true_effect, scales = \"free\")"},{"path":"https://easystats.github.io/bayestestR/articles/web_only/indicesEstimationComparison.html","id":"discussion","dir":"Articles > Web_only","previous_headings":"Effect Point-Estimates in the Bayesian Framework","what":"Discussion","title":"In-Depth 1: Comparison of Point-Estimates","text":"Conclusions can found guidelines section article.","code":""},{"path":"https://easystats.github.io/bayestestR/articles/web_only/indicesEstimationComparison.html","id":"suggestions","dir":"Articles > Web_only","previous_headings":"","what":"Suggestions","title":"In-Depth 1: Comparison of Point-Estimates","text":"advice, opinion , encourage let us know opening discussion thread making pull request.","code":""},{"path":"https://easystats.github.io/bayestestR/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Dominique Makowski. Author, maintainer.            @Dom_Makowski Daniel Lüdecke. Author.            @strengejacke Mattan S. Ben-Shachar. Author.            @mattansb Indrajeet Patil. Author.            @patilindrajeets Michael D. Wilson. Author. Brenton M. Wiernik. Author.            @bmwiernik Paul-Christian Bürkner. Reviewer. Tristan Mahr. Reviewer. Henrik Singmann. Contributor. Quentin F. Gronau. Contributor. Sam Crawley. Contributor.","code":""},{"path":"https://easystats.github.io/bayestestR/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Makowski, D., Ben-Shachar, M., & Lüdecke, D. (2019). bayestestR: Describing Effects Uncertainty, Existence Significance within Bayesian Framework. Journal Open Source Software, 4(40), 1541. doi:10.21105/joss.01541","code":"@Article{,   title = {bayestestR: Describing Effects and their Uncertainty, Existence and Significance within the Bayesian Framework.},   author = {Dominique Makowski and Mattan S. Ben-Shachar and Daniel Lüdecke},   journal = {Journal of Open Source Software},   doi = {10.21105/joss.01541},   year = {2019},   number = {40},   volume = {4},   pages = {1541},   url = {https://joss.theoj.org/papers/10.21105/joss.01541}, }"},{"path":"https://easystats.github.io/bayestestR/index.html","id":"bayestestr-","dir":"","previous_headings":"","what":"Understand and Describe Bayesian Models and Posterior Distributions","title":"Understand and Describe Bayesian Models and Posterior Distributions","text":"Become Bayesian master ⚠️ changed default CI width! Please make informed decision set explicitly (ci = 0.89, ci = 0.95 anything else decide) ⚠️ Existing R packages allow users easily fit large variety models extract visualize posterior draws. However, packages return limited set indices (e.g., point-estimates CIs). bayestestR provides comprehensive consistent set functions analyze describe posterior distributions generated variety models objects, including popular modeling packages rstanarm, brms BayesFactor. can reference package documentation follows: Makowski, D., Ben-Shachar, M. S., & Lüdecke, D. (2019). bayestestR: Describing Effects Uncertainty, Existence Significance within Bayesian Framework. Journal Open Source Software, 4(40), 1541. 10.21105/joss.01541 Makowski, D., Ben-Shachar, M. S., Chen, S. H. ., & Lüdecke, D. (2019). Indices Effect Existence Significance Bayesian Framework. Frontiers Psychology 2019;10:2767. 10.3389/fpsyg.2019.02767","code":""},{"path":"https://easystats.github.io/bayestestR/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Understand and Describe Bayesian Models and Posterior Distributions","text":"bayestestR package available CRAN, latest development version available R-universe (rOpenSci). downloaded package, can load using: Tip Instead library(datawizard), use library(easystats). make features easystats-ecosystem available. stay updated, use easystats::install_latest().","code":"library(\"bayestestR\")"},{"path":"https://easystats.github.io/bayestestR/index.html","id":"documentation","dir":"","previous_headings":"","what":"Documentation","title":"Understand and Describe Bayesian Models and Posterior Distributions","text":"Access package documentation check-vignettes:","code":""},{"path":"https://easystats.github.io/bayestestR/index.html","id":"tutorials","dir":"","previous_headings":"Documentation","what":"Tutorials","title":"Understand and Describe Bayesian Models and Posterior Distributions","text":"Get Started Bayesian Analysis Example 1: Initiation Bayesian models Example 2: Confirmation Bayesian skills Example 3: Become Bayesian master","code":""},{"path":"https://easystats.github.io/bayestestR/index.html","id":"articles","dir":"","previous_headings":"Documentation","what":"Articles","title":"Understand and Describe Bayesian Models and Posterior Distributions","text":"Credible Intervals (CI) Probability Direction (pd) Region Practical Equivalence (ROPE) Bayes Factors (BF) Comparison Point-Estimates Comparison Indices Effect Existence Reporting Guidelines","code":""},{"path":"https://easystats.github.io/bayestestR/index.html","id":"features","dir":"","previous_headings":"","what":"Features","title":"Understand and Describe Bayesian Models and Posterior Distributions","text":"Bayesian framework, parameters estimated probabilistic fashion distributions. distributions can summarised described reporting four types indices: mean(), median() map_estimate() estimation mode. point_estimate() can used get can run directly models. hdi() Highest Density Intervals (HDI), spi() Shortest Probability Intervals (SPI) eti() Equal-Tailed Intervals (ETI). ci() can used general method Confidence Credible Intervals (CI). p_direction() Bayesian equivalent frequentist p-value (see Makowski et al., 2019) p_pointnull() represents odds null hypothesis (h0 = 0) compared likely hypothesis (MAP). bf_pointnull() classic Bayes Factor (BF) assessing likelihood effect presence absence (h0 = 0). p_rope() probability effect falling inside Region Practical Equivalence (ROPE). bf_rope() computes Bayes factor null defined region (ROPE). p_significance() combines region equivalence probability direction. describe_posterior() master function can compute indices cited . describe_posterior() works many objects, including complex brmsfit-models. better readability, output separated model components: bayestestR also includes many features useful Bayesian analyses. examples:","code":"describe_posterior(   rnorm(10000),   centrality = \"median\",   test = c(\"p_direction\", \"p_significance\"),   verbose = FALSE ) ## Summary of Posterior Distribution ##  ## Parameter | Median |        95% CI |     pd |   ps ## -------------------------------------------------- ## Posterior |   0.01 | [-1.97, 1.99] | 50.58% | 0.47 zinb <- read.csv(\"http://stats.idre.ucla.edu/stat/data/fish.csv\") set.seed(123) model <- brm(   bf(     count ~ child + camper + (1 | persons),     zi ~ child + camper + (1 | persons)   ),   data = zinb,   family = zero_inflated_poisson(),   chains = 1,   iter = 500 )  describe_posterior(   model,   effects = \"all\",   component = \"all\",   test = c(\"p_direction\", \"p_significance\"),   centrality = \"all\" ) ## Summary of Posterior Distribution ##  ## Parameter   | Median |  Mean |   MAP |         95% CI |     pd |   ps |  Rhat |    ESS ## -------------------------------------------------------------------------------------- ## (Intercept) |   0.96 |  0.96 |  0.96 | [-0.81,  2.51] | 90.00% | 0.88 | 1.011 | 110.00 ## child       |  -1.16 | -1.16 | -1.16 | [-1.36, -0.94] |   100% | 1.00 | 0.996 | 278.00 ## camper      |   0.73 |  0.72 |  0.73 | [ 0.54,  0.91] |   100% | 1.00 | 0.996 | 271.00 ##  ## # Fixed effects (zero-inflated) ##  ## Parameter   | Median |  Mean |   MAP |         95% CI |     pd |   ps |  Rhat |    ESS ## -------------------------------------------------------------------------------------- ## (Intercept) |  -0.48 | -0.51 | -0.22 | [-2.03,  0.89] | 78.00% | 0.73 | 0.997 | 138.00 ## child       |   1.85 |  1.86 |  1.81 | [ 1.19,  2.54] |   100% | 1.00 | 0.996 | 303.00 ## camper      |  -0.88 | -0.86 | -0.99 | [-1.61, -0.07] | 98.40% | 0.96 | 0.996 | 292.00 ##  ## # Random effects (conditional) Intercept: persons ##  ## Parameter |    Median |  Mean |   MAP |         95% CI |     pd |   ps |  Rhat |    ESS ## --------------------------------------------------------------------------------------- ## persons.1 |     -0.99 | -1.01 | -0.84 | [-2.68,  0.80] | 92.00% | 0.90 | 1.007 | 106.00 ## persons.2 | -4.65e-03 | -0.04 |  0.03 | [-1.63,  1.66] | 50.00% | 0.45 | 1.013 | 109.00 ## persons.3 |      0.69 |  0.66 |  0.69 | [-0.95,  2.34] | 79.60% | 0.78 | 1.010 | 114.00 ## persons.4 |      1.57 |  1.56 |  1.56 | [-0.05,  3.29] | 96.80% | 0.96 | 1.009 | 114.00 ##  ## # Random effects (zero-inflated) Intercept: persons ##  ## Parameter | Median |  Mean |   MAP |         95% CI |     pd |   ps |  Rhat |    ESS ## ------------------------------------------------------------------------------------ ## persons.1 |   1.10 |  1.11 |  1.08 | [-0.23,  2.72] | 94.80% | 0.93 | 0.997 | 166.00 ## persons.2 |   0.18 |  0.18 |  0.22 | [-0.94,  1.58] | 63.20% | 0.54 | 0.996 | 154.00 ## persons.3 |  -0.30 | -0.31 | -0.54 | [-1.79,  1.02] | 64.00% | 0.59 | 0.997 | 154.00 ## persons.4 |  -1.45 | -1.46 | -1.44 | [-2.90, -0.10] | 98.00% | 0.97 | 1.000 | 189.00 ##  ## # Random effects (conditional) SD/Cor: persons ##  ## Parameter   | Median | Mean |  MAP |         95% CI |   pd |   ps |  Rhat |    ESS ## ---------------------------------------------------------------------------------- ## (Intercept) |   1.42 | 1.58 | 1.07 | [ 0.71,  3.58] | 100% | 1.00 | 1.010 | 126.00 ##  ## # Random effects (zero-inflated) SD/Cor: persons ##  ## Parameter   | Median | Mean |  MAP |         95% CI |   pd |   ps |  Rhat |    ESS ## ---------------------------------------------------------------------------------- ## (Intercept) |   1.30 | 1.49 | 0.99 | [ 0.63,  3.41] | 100% | 1.00 | 0.996 | 129.00"},{"path":"https://easystats.github.io/bayestestR/index.html","id":"point-estimates","dir":"","previous_headings":"","what":"Point-estimates","title":"Understand and Describe Bayesian Models and Posterior Distributions","text":"easystats packages, plot() methods available see package many functions:  median mean available base R functions, map_estimate() bayestestR can used directly find Highest Maximum Posteriori (MAP) estimate posterior, .e., value associated highest probability density (“peak” posterior distribution). words, estimation mode continuous parameters.","code":"library(bayestestR)  posterior <- distribution_gamma(10000, 1.5) # Generate a skewed distribution centrality <- point_estimate(posterior) # Get indices of centrality centrality ## Point Estimate ##  ## Median | Mean |  MAP ## -------------------- ## 1.18   | 1.50 | 0.51"},{"path":"https://easystats.github.io/bayestestR/index.html","id":"uncertainty-ci","dir":"","previous_headings":"","what":"Uncertainty (CI)","title":"Understand and Describe Bayesian Models and Posterior Distributions","text":"hdi() computes Highest Density Interval (HDI) posterior distribution, .e., interval contains points within interval higher probability density points outside interval. HDI can used context Bayesian posterior characterization Credible Interval (CI). Unlike equal-tailed intervals (see eti()) typically exclude 2.5% tail distribution, HDI equal-tailed therefore always includes mode(s) posterior distributions.","code":"posterior <- distribution_chisquared(10000, 4)  hdi(posterior, ci = 0.89) ## 89% HDI: [0.18, 7.63]  eti(posterior, ci = 0.89) ## 89% ETI: [0.75, 9.25]"},{"path":[]},{"path":"https://easystats.github.io/bayestestR/index.html","id":"probability-of-direction-pd","dir":"","previous_headings":"Existence and Significance Testing","what":"Probability of Direction (pd)","title":"Understand and Describe Bayesian Models and Posterior Distributions","text":"p_direction() computes Probability Direction (pd, also known Maximum Probability Effect - MPE). varies 50% 100% (.e., 0.5 1) can interpreted probability (expressed percentage) parameter (described posterior distribution) strictly positive negative (whichever probable). mathematically defined proportion posterior distribution median’s sign. Although differently expressed, index fairly similar (.e., strongly correlated) frequentist p-value. Relationship p-value: cases, seems pd corresponds frequentist one-sided p-value formula p-value = (1-pd/100) two-sided p-value (commonly reported) formula p-value = 2*(1-pd/100). Thus, pd 95%, 97.5% 99.5% 99.95% corresponds approximately two-sided p-value respectively .1, .05, .01 .001. See reporting guidelines.","code":"posterior <- distribution_normal(10000, 0.4, 0.2) p_direction(posterior) ## Probability of Direction: 0.98"},{"path":"https://easystats.github.io/bayestestR/index.html","id":"rope","dir":"","previous_headings":"Existence and Significance Testing","what":"ROPE","title":"Understand and Describe Bayesian Models and Posterior Distributions","text":"rope() computes proportion (percentage) HDI (default 89% HDI) posterior distribution lies within region practical equivalence. Statistically, probability posterior distribution different 0 make much sense (probability different single point infinite). Therefore, idea underlining ROPE let user define area around null value enclosing values equivalent null value practical purposes Kruschke (2018). Kruschke suggests null value set, default, -0.1 0.1 range standardized parameter (negligible effect size according Cohen, 1988). generalized: instance, linear models, ROPE set 0 +/- .1 * sd(y). ROPE range can automatically computed models using rope_range function. Kruschke suggests using proportion 95% (90%, considered stable) HDI falls within ROPE index “null-hypothesis” testing (understood Bayesian framework, see equivalence_test).","code":"posterior <- distribution_normal(10000, 0.4, 0.2) rope(posterior, range = c(-0.1, 0.1)) ## # Proportion of samples inside the ROPE [-0.10, 0.10]: ##  ## inside ROPE ## ----------- ## 4.40 %"},{"path":"https://easystats.github.io/bayestestR/index.html","id":"bayes-factor","dir":"","previous_headings":"Existence and Significance Testing","what":"Bayes Factor","title":"Understand and Describe Bayesian Models and Posterior Distributions","text":"bayesfactor_parameters() computes Bayes factors null (either point interval), bases prior posterior samples single parameter. Bayes factor indicates degree mass posterior distribution shifted away closer null value(s) (relative prior distribution), thus indicating null value become less likely given observed data. null interval, Bayes factor computed comparing prior posterior odds parameter falling within outside null; null point, Savage-Dickey density ratio computed, also approximation Bayes factor comparing marginal likelihoods model model tested parameter restricted point null (Wagenmakers, Lodewyckx, Kuriyal, & Grasman, 2010).  lollipops represent density point-null prior distribution (blue lollipop dotted distribution) posterior distribution (red lollipop yellow distribution). ratio two - Savage-Dickey ratio - indicates degree mass parameter distribution shifted away closer null. info, see Bayes factors vignette.","code":"prior <- distribution_normal(10000, mean = 0, sd = 1) posterior <- distribution_normal(10000, mean = 1, sd = 0.7)  bayesfactor_parameters(posterior, prior, direction = \"two-sided\", null = 0, verbose = FALSE) ## Bayes Factor (Savage-Dickey density ratio) ##  ## BF   ## ---- ## 1.94 ##  ## * Evidence Against The Null: 0"},{"path":[]},{"path":"https://easystats.github.io/bayestestR/index.html","id":"find-ropes-appropriate-range","dir":"","previous_headings":"Utilities","what":"Find ROPE’s appropriate range","title":"Understand and Describe Bayesian Models and Posterior Distributions","text":"rope_range(): function attempts automatically finding suitable “default” values Region Practical Equivalence (ROPE). Kruschke (2018) suggests null value set, default, range -0.1 0.1 standardized parameter (negligible effect size according Cohen, 1988), can generalised linear models -0.1 * sd(y), 0.1 * sd(y). logistic models, parameters expressed log odds ratio can converted standardized difference formula sqrt(3)/pi, resulting range -0.05 0.05.","code":"rope_range(model)"},{"path":"https://easystats.github.io/bayestestR/index.html","id":"density-estimation","dir":"","previous_headings":"Utilities","what":"Density Estimation","title":"Understand and Describe Bayesian Models and Posterior Distributions","text":"estimate_density(): function wrapper different methods density estimation. default, uses base R density default uses different smoothing bandwidth (\"SJ\") legacy default implemented base R density function (\"nrd0\"). However, Deng & Wickham suggest method = \"KernSmooth\" fastest accurate.","code":""},{"path":"https://easystats.github.io/bayestestR/index.html","id":"perfect-distributions","dir":"","previous_headings":"Utilities","what":"Perfect Distributions","title":"Understand and Describe Bayesian Models and Posterior Distributions","text":"distribution(): Generate sample size n near-perfect distributions.","code":"distribution(n = 10) ##  [1] -1.55 -1.00 -0.66 -0.38 -0.12  0.12  0.38  0.66  1.00  1.55"},{"path":"https://easystats.github.io/bayestestR/index.html","id":"probability-of-a-value","dir":"","previous_headings":"Utilities","what":"Probability of a Value","title":"Understand and Describe Bayesian Models and Posterior Distributions","text":"density_at(): Compute density given point distribution.","code":"density_at(rnorm(1000, 1, 1), 1) ## [1] 0.39"},{"path":"https://easystats.github.io/bayestestR/index.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"Understand and Describe Bayesian Models and Posterior Distributions","text":"Please note bayestestR project released Contributor Code Conduct. contributing project, agree abide terms.","code":""},{"path":[]},{"path":"https://easystats.github.io/bayestestR/reference/area_under_curve.html","id":null,"dir":"Reference","previous_headings":"","what":"Area under the Curve (AUC) — area_under_curve","title":"Area under the Curve (AUC) — area_under_curve","text":"Based DescTools AUC function. can calculate area curve naive algorithm elaborated spline approach. curve must given vectors xy-coordinates. function can handle unsorted x values (sorting x) ties x values (ignoring duplicates).","code":""},{"path":"https://easystats.github.io/bayestestR/reference/area_under_curve.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Area under the Curve (AUC) — area_under_curve","text":"","code":"area_under_curve(x, y, method = c(\"trapezoid\", \"step\", \"spline\"), ...)  auc(x, y, method = c(\"trapezoid\", \"step\", \"spline\"), ...)"},{"path":"https://easystats.github.io/bayestestR/reference/area_under_curve.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Area under the Curve (AUC) — area_under_curve","text":"x Vector x values. y Vector y values. method Method compute Area Curve (AUC). Can \"trapezoid\" (default), \"step\" \"spline\". \"trapezoid\", curve formed connecting points direct line (composite trapezoid rule). \"step\" chosen stepwise connection two points used. calculating area spline interpolation splinefun function used combination integrate. ... Arguments passed methods.","code":""},{"path":[]},{"path":"https://easystats.github.io/bayestestR/reference/area_under_curve.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Area under the Curve (AUC) — area_under_curve","text":"","code":"library(bayestestR) posterior <- distribution_normal(1000)  dens <- estimate_density(posterior) dens <- dens[dens$x > 0, ] x <- dens$x y <- dens$y  area_under_curve(x, y, method = \"trapezoid\") #> [1] 0.498307 area_under_curve(x, y, method = \"step\") #> [1] 0.499534 area_under_curve(x, y, method = \"spline\") #> [1] 0.498307"},{"path":"https://easystats.github.io/bayestestR/reference/as.data.frame.density.html","id":null,"dir":"Reference","previous_headings":"","what":"Coerce to a Data Frame — as.data.frame.density","title":"Coerce to a Data Frame — as.data.frame.density","text":"Coerce Data Frame","code":""},{"path":"https://easystats.github.io/bayestestR/reference/as.data.frame.density.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Coerce to a Data Frame — as.data.frame.density","text":"","code":"# S3 method for density as.data.frame(x, ...)"},{"path":"https://easystats.github.io/bayestestR/reference/as.data.frame.density.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Coerce to a Data Frame — as.data.frame.density","text":"x R object. ... additional arguments passed methods.","code":""},{"path":"https://easystats.github.io/bayestestR/reference/as.numeric.p_direction.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert to Numeric — as.numeric.map_estimate","title":"Convert to Numeric — as.numeric.map_estimate","text":"Convert Numeric","code":""},{"path":"https://easystats.github.io/bayestestR/reference/as.numeric.p_direction.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert to Numeric — as.numeric.map_estimate","text":"","code":"# S3 method for map_estimate as.numeric(x, ...)  # S3 method for p_direction as.numeric(x, ...)  # S3 method for p_map as.numeric(x, ...)  # S3 method for p_significance as.numeric(x, ...)"},{"path":"https://easystats.github.io/bayestestR/reference/as.numeric.p_direction.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert to Numeric — as.numeric.map_estimate","text":"x object coerced tested. ... arguments passed methods.","code":""},{"path":"https://easystats.github.io/bayestestR/reference/bayesfactor.html","id":null,"dir":"Reference","previous_headings":"","what":"Bayes Factors (BF) — bayesfactor","title":"Bayes Factors (BF) — bayesfactor","text":"function compte Bayes factors (BFs) appropriate input. vectors single models, compute BFs single parameters(), hypothesis specified, BFs restricted models(). multiple models, return BF corresponding comparison models() model comparison passed, compute inclusion BF().  complete overview functions, read Bayes factor vignette.","code":""},{"path":"https://easystats.github.io/bayestestR/reference/bayesfactor.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Bayes Factors (BF) — bayesfactor","text":"","code":"bayesfactor(   ...,   prior = NULL,   direction = \"two-sided\",   null = 0,   hypothesis = NULL,   effects = c(\"fixed\", \"random\", \"all\"),   verbose = TRUE,   denominator = 1,   match_models = FALSE,   prior_odds = NULL )"},{"path":"https://easystats.github.io/bayestestR/reference/bayesfactor.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Bayes Factors (BF) — bayesfactor","text":"... numeric vector, model object(s), output bayesfactor_models. prior object representing prior distribution (see 'Details'). direction Test type (see 'Details'). One 0, \"two-sided\" (default, two tailed), -1, \"left\" (left tailed) 1, \"right\" (right tailed). null Value null, either scalar (point-null) range (interval-null). hypothesis character vector specifying restrictions logical conditions (see examples ). effects results fixed effects, random effects returned? applies mixed models. May abbreviated. verbose Toggle warnings. denominator Either integer indicating models use denominator, model used denominator. Ignored BFBayesFactor. match_models See details. prior_odds Optional vector prior odds models. See BayesFactor::priorOdds<-.","code":""},{"path":"https://easystats.github.io/bayestestR/reference/bayesfactor.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Bayes Factors (BF) — bayesfactor","text":"type Bayes factor, depending input. See bayesfactor_parameters(), bayesfactor_models() bayesfactor_inclusion()","code":""},{"path":"https://easystats.github.io/bayestestR/reference/bayesfactor.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Bayes Factors (BF) — bayesfactor","text":"also plot()-method implemented see-package.","code":""},{"path":"https://easystats.github.io/bayestestR/reference/bayesfactor.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Bayes Factors (BF) — bayesfactor","text":"","code":"library(bayestestR)  if (require(\"logspline\")) {   prior <- distribution_normal(1000, mean = 0, sd = 1)   posterior <- distribution_normal(1000, mean = .5, sd = .3)    bayesfactor(posterior, prior = prior, verbose = FALSE) } #> Loading required package: logspline #> Bayes Factor (Savage-Dickey density ratio) #>  #> BF   #> ---- #> 1.21 #>  #> * Evidence Against The Null: 0 #>  # \\dontrun{ # rstanarm models # --------------- if (require(\"rstanarm\")) {   model <- stan_lmer(extra ~ group + (1 | ID), data = sleep)   bayesfactor(model, verbose = FALSE) } #> Loading required package: rstanarm #> Loading required package: Rcpp #> This is rstanarm version 2.21.4 #> - See https://mc-stan.org/rstanarm/articles/priors for changes to default priors! #> - Default priors may change, so it's safest to specify priors, even if equivalent to the defaults. #> - For execution on a local, multicore CPU with excess RAM we recommend calling #>   options(mc.cores = parallel::detectCores()) #>  #> SAMPLING FOR MODEL 'continuous' NOW (CHAIN 1). #> Chain 1:  #> Chain 1: Gradient evaluation took 3.7e-05 seconds #> Chain 1: 1000 transitions using 10 leapfrog steps per transition would take 0.37 seconds. #> Chain 1: Adjust your expectations accordingly! #> Chain 1:  #> Chain 1:  #> Chain 1: Iteration:    1 / 2000 [  0%]  (Warmup) #> Chain 1: Iteration:  200 / 2000 [ 10%]  (Warmup) #> Chain 1: Iteration:  400 / 2000 [ 20%]  (Warmup) #> Chain 1: Iteration:  600 / 2000 [ 30%]  (Warmup) #> Chain 1: Iteration:  800 / 2000 [ 40%]  (Warmup) #> Chain 1: Iteration: 1000 / 2000 [ 50%]  (Warmup) #> Chain 1: Iteration: 1001 / 2000 [ 50%]  (Sampling) #> Chain 1: Iteration: 1200 / 2000 [ 60%]  (Sampling) #> Chain 1: Iteration: 1400 / 2000 [ 70%]  (Sampling) #> Chain 1: Iteration: 1600 / 2000 [ 80%]  (Sampling) #> Chain 1: Iteration: 1800 / 2000 [ 90%]  (Sampling) #> Chain 1: Iteration: 2000 / 2000 [100%]  (Sampling) #> Chain 1:  #> Chain 1:  Elapsed Time: 0.258 seconds (Warm-up) #> Chain 1:                0.292 seconds (Sampling) #> Chain 1:                0.55 seconds (Total) #> Chain 1:  #>  #> SAMPLING FOR MODEL 'continuous' NOW (CHAIN 2). #> Chain 2:  #> Chain 2: Gradient evaluation took 1.9e-05 seconds #> Chain 2: 1000 transitions using 10 leapfrog steps per transition would take 0.19 seconds. #> Chain 2: Adjust your expectations accordingly! #> Chain 2:  #> Chain 2:  #> Chain 2: Iteration:    1 / 2000 [  0%]  (Warmup) #> Chain 2: Iteration:  200 / 2000 [ 10%]  (Warmup) #> Chain 2: Iteration:  400 / 2000 [ 20%]  (Warmup) #> Chain 2: Iteration:  600 / 2000 [ 30%]  (Warmup) #> Chain 2: Iteration:  800 / 2000 [ 40%]  (Warmup) #> Chain 2: Iteration: 1000 / 2000 [ 50%]  (Warmup) #> Chain 2: Iteration: 1001 / 2000 [ 50%]  (Sampling) #> Chain 2: Iteration: 1200 / 2000 [ 60%]  (Sampling) #> Chain 2: Iteration: 1400 / 2000 [ 70%]  (Sampling) #> Chain 2: Iteration: 1600 / 2000 [ 80%]  (Sampling) #> Chain 2: Iteration: 1800 / 2000 [ 90%]  (Sampling) #> Chain 2: Iteration: 2000 / 2000 [100%]  (Sampling) #> Chain 2:  #> Chain 2:  Elapsed Time: 0.273 seconds (Warm-up) #> Chain 2:                0.224 seconds (Sampling) #> Chain 2:                0.497 seconds (Total) #> Chain 2:  #>  #> SAMPLING FOR MODEL 'continuous' NOW (CHAIN 3). #> Chain 3:  #> Chain 3: Gradient evaluation took 1.9e-05 seconds #> Chain 3: 1000 transitions using 10 leapfrog steps per transition would take 0.19 seconds. #> Chain 3: Adjust your expectations accordingly! #> Chain 3:  #> Chain 3:  #> Chain 3: Iteration:    1 / 2000 [  0%]  (Warmup) #> Chain 3: Iteration:  200 / 2000 [ 10%]  (Warmup) #> Chain 3: Iteration:  400 / 2000 [ 20%]  (Warmup) #> Chain 3: Iteration:  600 / 2000 [ 30%]  (Warmup) #> Chain 3: Iteration:  800 / 2000 [ 40%]  (Warmup) #> Chain 3: Iteration: 1000 / 2000 [ 50%]  (Warmup) #> Chain 3: Iteration: 1001 / 2000 [ 50%]  (Sampling) #> Chain 3: Iteration: 1200 / 2000 [ 60%]  (Sampling) #> Chain 3: Iteration: 1400 / 2000 [ 70%]  (Sampling) #> Chain 3: Iteration: 1600 / 2000 [ 80%]  (Sampling) #> Chain 3: Iteration: 1800 / 2000 [ 90%]  (Sampling) #> Chain 3: Iteration: 2000 / 2000 [100%]  (Sampling) #> Chain 3:  #> Chain 3:  Elapsed Time: 0.243 seconds (Warm-up) #> Chain 3:                0.389 seconds (Sampling) #> Chain 3:                0.632 seconds (Total) #> Chain 3:  #>  #> SAMPLING FOR MODEL 'continuous' NOW (CHAIN 4). #> Chain 4:  #> Chain 4: Gradient evaluation took 1.9e-05 seconds #> Chain 4: 1000 transitions using 10 leapfrog steps per transition would take 0.19 seconds. #> Chain 4: Adjust your expectations accordingly! #> Chain 4:  #> Chain 4:  #> Chain 4: Iteration:    1 / 2000 [  0%]  (Warmup) #> Chain 4: Iteration:  200 / 2000 [ 10%]  (Warmup) #> Chain 4: Iteration:  400 / 2000 [ 20%]  (Warmup) #> Chain 4: Iteration:  600 / 2000 [ 30%]  (Warmup) #> Chain 4: Iteration:  800 / 2000 [ 40%]  (Warmup) #> Chain 4: Iteration: 1000 / 2000 [ 50%]  (Warmup) #> Chain 4: Iteration: 1001 / 2000 [ 50%]  (Sampling) #> Chain 4: Iteration: 1200 / 2000 [ 60%]  (Sampling) #> Chain 4: Iteration: 1400 / 2000 [ 70%]  (Sampling) #> Chain 4: Iteration: 1600 / 2000 [ 80%]  (Sampling) #> Chain 4: Iteration: 1800 / 2000 [ 90%]  (Sampling) #> Chain 4: Iteration: 2000 / 2000 [100%]  (Sampling) #> Chain 4:  #> Chain 4:  Elapsed Time: 0.261 seconds (Warm-up) #> Chain 4:                0.256 seconds (Sampling) #> Chain 4:                0.517 seconds (Total) #> Chain 4:  #> Bayes Factor (Savage-Dickey density ratio)  #>  #> Parameter   |    BF #> ------------------- #> (Intercept) | 0.181 #> group2      |  4.29 #>  #> * Evidence Against The Null: 0 #>  # }  if (require(\"logspline\")) {   # Frequentist models   # ---------------   m0 <- lm(extra ~ 1, data = sleep)   m1 <- lm(extra ~ group, data = sleep)   m2 <- lm(extra ~ group + ID, data = sleep)    comparison <- bayesfactor(m0, m1, m2)   comparison    bayesfactor(comparison) } #> Inclusion Bayes Factors (Model Averaged) #>  #>       P(prior) P(posterior) Inclusion BF #> group     0.67         1.00     5.61e+03 #> ID        0.33         1.00     9.77e+03 #>  #> * Compared among: all models #> *    Priors odds: uniform-equal"},{"path":"https://easystats.github.io/bayestestR/reference/bayesfactor_inclusion.html","id":null,"dir":"Reference","previous_headings":"","what":"Inclusion Bayes Factors for testing predictors across Bayesian models — bayesfactor_inclusion","title":"Inclusion Bayes Factors for testing predictors across Bayesian models — bayesfactor_inclusion","text":"bf_* function alias main function.  info, see Bayes factors vignette.","code":""},{"path":"https://easystats.github.io/bayestestR/reference/bayesfactor_inclusion.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Inclusion Bayes Factors for testing predictors across Bayesian models — bayesfactor_inclusion","text":"","code":"bayesfactor_inclusion(models, match_models = FALSE, prior_odds = NULL, ...)  bf_inclusion(models, match_models = FALSE, prior_odds = NULL, ...)"},{"path":"https://easystats.github.io/bayestestR/reference/bayesfactor_inclusion.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Inclusion Bayes Factors for testing predictors across Bayesian models — bayesfactor_inclusion","text":"models object class bayesfactor_models() BFBayesFactor. match_models See details. prior_odds Optional vector prior odds models. See BayesFactor::priorOdds<-. ... Arguments passed methods.","code":""},{"path":"https://easystats.github.io/bayestestR/reference/bayesfactor_inclusion.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Inclusion Bayes Factors for testing predictors across Bayesian models — bayesfactor_inclusion","text":"data frame containing prior posterior probabilities, log(BF) effect (Use .numeric() extract non-log Bayes factors; see examples).","code":""},{"path":"https://easystats.github.io/bayestestR/reference/bayesfactor_inclusion.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Inclusion Bayes Factors for testing predictors across Bayesian models — bayesfactor_inclusion","text":"Inclusion Bayes factors answer question: observed data probable models particular effect, models without particular effect? words, average - models effect \\(X\\) likely produced observed data models without effect \\(X\\)?","code":""},{"path":"https://easystats.github.io/bayestestR/reference/bayesfactor_inclusion.html","id":"match-models","dir":"Reference","previous_headings":"","what":"Match Models","title":"Inclusion Bayes Factors for testing predictors across Bayesian models — bayesfactor_inclusion","text":"match_models=FALSE (default), Inclusion BFs computed comparing models term models without term. TRUE, comparison restricted models (1) include interactions term interest; (2) interaction terms, averaging done across models containe main effect terms interaction term comprised.","code":""},{"path":"https://easystats.github.io/bayestestR/reference/bayesfactor_inclusion.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Inclusion Bayes Factors for testing predictors across Bayesian models — bayesfactor_inclusion","text":"Random effects lmer style converted interaction terms: .e., (X|G) become terms 1:G X:G.","code":""},{"path":"https://easystats.github.io/bayestestR/reference/bayesfactor_inclusion.html","id":"interpreting-bayes-factors","dir":"Reference","previous_headings":"","what":"Interpreting Bayes Factors","title":"Inclusion Bayes Factors for testing predictors across Bayesian models — bayesfactor_inclusion","text":"Bayes factor greater 1 can interpreted evidence null, one convention Bayes factor greater 3 can considered \"substantial\" evidence null (vice versa, Bayes factor smaller 1/3 indicates substantial evidence favor null-model) (Wetzels et al. 2011).","code":""},{"path":"https://easystats.github.io/bayestestR/reference/bayesfactor_inclusion.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Inclusion Bayes Factors for testing predictors across Bayesian models — bayesfactor_inclusion","text":"Hinne, M., Gronau, Q. F., van den Bergh, D., Wagenmakers, E. (2019, March 25). conceptual introduction Bayesian Model Averaging. doi:10.31234/osf.io/wgb64 Clyde, M. ., Ghosh, J., & Littman, M. L. (2011). Bayesian adaptive sampling variable selection model averaging. Journal Computational Graphical Statistics, 20(1), 80-101. Mathot, S. (2017). Bayes like Baws: Interpreting Bayesian Repeated Measures JASP. Blog post.","code":""},{"path":[]},{"path":"https://easystats.github.io/bayestestR/reference/bayesfactor_inclusion.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Inclusion Bayes Factors for testing predictors across Bayesian models — bayesfactor_inclusion","text":"Mattan S. Ben-Shachar","code":""},{"path":"https://easystats.github.io/bayestestR/reference/bayesfactor_inclusion.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Inclusion Bayes Factors for testing predictors across Bayesian models — bayesfactor_inclusion","text":"","code":"library(bayestestR)  # Using bayesfactor_models: # ------------------------------ mo0 <- lm(Sepal.Length ~ 1, data = iris) mo1 <- lm(Sepal.Length ~ Species, data = iris) mo2 <- lm(Sepal.Length ~ Species + Petal.Length, data = iris) mo3 <- lm(Sepal.Length ~ Species * Petal.Length, data = iris)  BFmodels <- bayesfactor_models(mo1, mo2, mo3, denominator = mo0) (bf_inc <- bayesfactor_inclusion(BFmodels)) #> Inclusion Bayes Factors (Model Averaged) #>  #>                      P(prior) P(posterior) Inclusion BF #> Species                  0.75         1.00     2.02e+55 #> Petal.Length             0.50         1.00     3.58e+26 #> Petal.Length:Species     0.25         0.04        0.113 #>  #> * Compared among: all models #> *    Priors odds: uniform-equal  as.numeric(bf_inc) #> [1] 2.021143e+55 3.575448e+26 1.131202e-01  # \\dontrun{ # BayesFactor # ------------------------------- library(BayesFactor) #> Loading required package: coda #> Loading required package: Matrix #> ************ #> Welcome to BayesFactor 0.9.12-4.4. If you have questions, please contact Richard Morey (richarddmorey@gmail.com). #>  #> Type BFManual() to open the manual. #> ************  BF <- generalTestBF(len ~ supp * dose, ToothGrowth, progress = FALSE)  bayesfactor_inclusion(BF) #> Inclusion Bayes Factors (Model Averaged) #>  #>           P(prior) P(posterior) Inclusion BF #> supp          0.60         0.98        35.06 #> dose          0.60         1.00     5.75e+12 #> dose:supp     0.20         0.56         5.02 #>  #> * Compared among: all models #> *    Priors odds: uniform-equal  # compare only matched models: bayesfactor_inclusion(BF, match_models = TRUE) #> Inclusion Bayes Factors (Model Averaged) #>  #>           P(prior) P(posterior) Inclusion BF #> supp          0.40         0.43        22.78 #> dose          0.40         0.44     3.83e+12 #> dose:supp     0.20         0.56         1.31 #>  #> * Compared among: matched models only #> *    Priors odds: uniform-equal # }"},{"path":"https://easystats.github.io/bayestestR/reference/bayesfactor_models.html","id":null,"dir":"Reference","previous_headings":"","what":"Bayes Factors (BF) for model comparison — bayesfactor_models","title":"Bayes Factors (BF) for model comparison — bayesfactor_models","text":"function computes extracts Bayes factors fitted models.  bf_* function alias main function.","code":""},{"path":"https://easystats.github.io/bayestestR/reference/bayesfactor_models.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Bayes Factors (BF) for model comparison — bayesfactor_models","text":"","code":"bayesfactor_models(..., denominator = 1, verbose = TRUE)  bf_models(..., denominator = 1, verbose = TRUE)  # S3 method for default bayesfactor_models(..., denominator = 1, verbose = TRUE)  # S3 method for bayesfactor_models update(object, subset = NULL, reference = NULL, ...)  # S3 method for bayesfactor_models as.matrix(x, ...)"},{"path":"https://easystats.github.io/bayestestR/reference/bayesfactor_models.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Bayes Factors (BF) for model comparison — bayesfactor_models","text":"... Fitted models (see details), fit data, single BFBayesFactor object (see 'Details'). Ignored .matrix(), update(). following named arguments present, passed insight::get_loglikelihood (see details): estimator (defaults \"ML\") check_response  (defaults FALSE) denominator Either integer indicating models use denominator, model used denominator. Ignored BFBayesFactor. verbose Toggle warnings. object, x bayesfactor_models() object. subset Vector model indices keep remove. reference Index model reference , \"top\" reference best model, \"bottom\" reference worst model.","code":""},{"path":"https://easystats.github.io/bayestestR/reference/bayesfactor_models.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Bayes Factors (BF) for model comparison — bayesfactor_models","text":"data frame containing models' formulas (reconstructed fixed random effects) log(BF)s  (Use .numeric() extract non-log Bayes factors; see examples), prints nicely.","code":""},{"path":"https://easystats.github.io/bayestestR/reference/bayesfactor_models.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Bayes Factors (BF) for model comparison — bayesfactor_models","text":"passed models supported insight DV models tested equality (else assumed true), models' terms extracted (allowing follow-analysis bayesfactor_inclusion). brmsfit stanreg models, Bayes factors computed using bridgesampling package. brmsfit models must fitted save_pars = save_pars(= TRUE). stanreg models must fitted defined diagnostic_file. BFBayesFactor, bayesfactor_models() mostly wraparound BayesFactor::extractBF(). model types, Bayes factors computed using BIC approximation. Note BICs extracted using insight::get_loglikelihood, see documentation options dealing transformed responses REML estimation. order correctly precisely estimate Bayes factors, rule thumb 4 P's: Proper Priors Plentiful Posteriors. many? number posterior samples needed testing substantially larger estimation (default 4000 samples may enough many cases). conservative rule thumb obtain 10 times samples required estimation (Gronau, Singmann, & Wagenmakers, 2017). less 40,000 samples detected, bayesfactor_models() gives warning.  See also Bayes factors vignette.","code":""},{"path":"https://easystats.github.io/bayestestR/reference/bayesfactor_models.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Bayes Factors (BF) for model comparison — bayesfactor_models","text":"also plot()-method implemented see-package.","code":""},{"path":"https://easystats.github.io/bayestestR/reference/bayesfactor_models.html","id":"interpreting-bayes-factors","dir":"Reference","previous_headings":"","what":"Interpreting Bayes Factors","title":"Bayes Factors (BF) for model comparison — bayesfactor_models","text":"Bayes factor greater 1 can interpreted evidence null, one convention Bayes factor greater 3 can considered \"substantial\" evidence null (vice versa, Bayes factor smaller 1/3 indicates substantial evidence favor null-model) (Wetzels et al. 2011).","code":""},{"path":"https://easystats.github.io/bayestestR/reference/bayesfactor_models.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Bayes Factors (BF) for model comparison — bayesfactor_models","text":"Gronau, Q. F., Singmann, H., & Wagenmakers, E. J. (2017). Bridgesampling: R package estimating normalizing constants. arXiv preprint arXiv:1710.08162. Kass, R. E., Raftery, . E. (1995). Bayes Factors. Journal American Statistical Association, 90(430), 773-795. Robert, C. P. (2016). expected demise Bayes factor. Journal Mathematical Psychology, 72, 33–37. Wagenmakers, E. J. (2007). practical solution pervasive problems p values. Psychonomic bulletin & review, 14(5), 779-804. Wetzels, R., Matzke, D., Lee, M. D., Rouder, J. N., Iverson, G. J., Wagenmakers, E.-J. (2011). Statistical Evidence Experimental Psychology: Empirical Comparison Using 855 t Tests. Perspectives Psychological Science, 6(3), 291–298. doi:10.1177/1745691611406923","code":""},{"path":"https://easystats.github.io/bayestestR/reference/bayesfactor_models.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Bayes Factors (BF) for model comparison — bayesfactor_models","text":"Mattan S. Ben-Shachar","code":""},{"path":"https://easystats.github.io/bayestestR/reference/bayesfactor_models.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Bayes Factors (BF) for model comparison — bayesfactor_models","text":"","code":"# With lm objects: # ---------------- lm1 <- lm(mpg ~ 1, data = mtcars) lm2 <- lm(mpg ~ hp, data = mtcars) lm3 <- lm(mpg ~ hp + drat, data = mtcars) lm4 <- lm(mpg ~ hp * drat, data = mtcars) (BFM <- bayesfactor_models(lm1, lm2, lm3, lm4, denominator = 1)) #> Bayes Factors for Model Comparison #>  #>       Model           BF #> [lm2] hp        4.54e+05 #> [lm3] hp + drat 7.70e+07 #> [lm4] hp * drat 1.59e+07 #>  #> * Against Denominator: [lm1] (Intercept only) #> *   Bayes Factor Type: BIC approximation # bayesfactor_models(lm2, lm3, lm4, denominator = lm1) # same result # bayesfactor_models(lm1, lm2, lm3, lm4, denominator = lm1) # same result   update(BFM, reference = \"bottom\") #> Bayes Factors for Model Comparison #>  #>       Model           BF #> [lm2] hp        4.54e+05 #> [lm3] hp + drat 7.70e+07 #> [lm4] hp * drat 1.59e+07 #>  #> * Against Denominator: [lm1] (Intercept only) #> *   Bayes Factor Type: BIC approximation as.matrix(BFM) #> # Bayes Factors for Model Comparison  #>  #>            Numerator #> Denominator #>  #>           |      [1] |      [2] |      [3] |      [4] #> ---------------------------------------------------------------- #> [1] (Intercept only) |        1 | 4.54e+05 | 7.70e+07 | 1.59e+07 #> [2] hp               | 2.20e-06 |        1 |   169.72 |    35.09 #> [3] hp + drat        | 1.30e-08 |    0.006 |        1 |    0.207 #> [4] hp * drat        | 6.28e-08 |    0.028 |     4.84 |        1 as.numeric(BFM) #> [1]        1.0   453874.3 77029881.3 15925712.4   lm2b <- lm(sqrt(mpg) ~ hp, data = mtcars) # Set check_response = TRUE for transformed responses bayesfactor_models(lm2b, denominator = lm2, check_response = TRUE) #> Bayes Factors for Model Comparison #>  #>        Model   BF #> [lm2b] hp    6.94 #>  #> * Against Denominator: [lm2] hp #> *   Bayes Factor Type: BIC approximation  # \\dontrun{ # With lmerMod objects: # --------------------- if (require(\"lme4\")) {   lmer1 <- lmer(Sepal.Length ~ Petal.Length + (1 | Species), data = iris)   lmer2 <- lmer(Sepal.Length ~ Petal.Length + (Petal.Length | Species), data = iris)   lmer3 <- lmer(Sepal.Length ~ Petal.Length + (Petal.Length | Species) + (1 | Petal.Width),     data = iris   )   bayesfactor_models(lmer1, lmer2, lmer3,     denominator = 1,     estimator = \"REML\"   ) } #> Loading required package: lme4 #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> Bayes Factors for Model Comparison #>  #>         Model                                                          BF #> [lmer2] Petal.Length + (Petal.Length | Species)                     0.058 #> [lmer3] Petal.Length + (Petal.Length | Species) + (1 | Petal.Width) 0.005 #>  #> * Against Denominator: [lmer1] Petal.Length + (1 | Species) #> *   Bayes Factor Type: BIC approximation  # rstanarm models # --------------------- # (note that a unique diagnostic_file MUST be specified in order to work) if (require(\"rstanarm\")) {   stan_m0 <- stan_glm(Sepal.Length ~ 1,     data = iris,     family = gaussian(),     diagnostic_file = file.path(tempdir(), \"df0.csv\")   )   stan_m1 <- stan_glm(Sepal.Length ~ Species,     data = iris,     family = gaussian(),     diagnostic_file = file.path(tempdir(), \"df1.csv\")   )   stan_m2 <- stan_glm(Sepal.Length ~ Species + Petal.Length,     data = iris,     family = gaussian(),     diagnostic_file = file.path(tempdir(), \"df2.csv\")   )   bayesfactor_models(stan_m1, stan_m2, denominator = stan_m0, verbose = FALSE) } #>  #> SAMPLING FOR MODEL 'continuous' NOW (CHAIN 1). #> Chain 1:  #> Chain 1: Gradient evaluation took 1.8e-05 seconds #> Chain 1: 1000 transitions using 10 leapfrog steps per transition would take 0.18 seconds. #> Chain 1: Adjust your expectations accordingly! #> Chain 1:  #> Chain 1:  #> Chain 1: Iteration:    1 / 2000 [  0%]  (Warmup) #> Chain 1: Iteration:  200 / 2000 [ 10%]  (Warmup) #> Chain 1: Iteration:  400 / 2000 [ 20%]  (Warmup) #> Chain 1: Iteration:  600 / 2000 [ 30%]  (Warmup) #> Chain 1: Iteration:  800 / 2000 [ 40%]  (Warmup) #> Chain 1: Iteration: 1000 / 2000 [ 50%]  (Warmup) #> Chain 1: Iteration: 1001 / 2000 [ 50%]  (Sampling) #> Chain 1: Iteration: 1200 / 2000 [ 60%]  (Sampling) #> Chain 1: Iteration: 1400 / 2000 [ 70%]  (Sampling) #> Chain 1: Iteration: 1600 / 2000 [ 80%]  (Sampling) #> Chain 1: Iteration: 1800 / 2000 [ 90%]  (Sampling) #> Chain 1: Iteration: 2000 / 2000 [100%]  (Sampling) #> Chain 1:  #> Chain 1:  Elapsed Time: 0.023 seconds (Warm-up) #> Chain 1:                0.047 seconds (Sampling) #> Chain 1:                0.07 seconds (Total) #> Chain 1:  #>  #> SAMPLING FOR MODEL 'continuous' NOW (CHAIN 2). #> Chain 2:  #> Chain 2: Gradient evaluation took 1e-05 seconds #> Chain 2: 1000 transitions using 10 leapfrog steps per transition would take 0.1 seconds. #> Chain 2: Adjust your expectations accordingly! #> Chain 2:  #> Chain 2:  #> Chain 2: Iteration:    1 / 2000 [  0%]  (Warmup) #> Chain 2: Iteration:  200 / 2000 [ 10%]  (Warmup) #> Chain 2: Iteration:  400 / 2000 [ 20%]  (Warmup) #> Chain 2: Iteration:  600 / 2000 [ 30%]  (Warmup) #> Chain 2: Iteration:  800 / 2000 [ 40%]  (Warmup) #> Chain 2: Iteration: 1000 / 2000 [ 50%]  (Warmup) #> Chain 2: Iteration: 1001 / 2000 [ 50%]  (Sampling) #> Chain 2: Iteration: 1200 / 2000 [ 60%]  (Sampling) #> Chain 2: Iteration: 1400 / 2000 [ 70%]  (Sampling) #> Chain 2: Iteration: 1600 / 2000 [ 80%]  (Sampling) #> Chain 2: Iteration: 1800 / 2000 [ 90%]  (Sampling) #> Chain 2: Iteration: 2000 / 2000 [100%]  (Sampling) #> Chain 2:  #> Chain 2:  Elapsed Time: 0.023 seconds (Warm-up) #> Chain 2:                0.049 seconds (Sampling) #> Chain 2:                0.072 seconds (Total) #> Chain 2:  #>  #> SAMPLING FOR MODEL 'continuous' NOW (CHAIN 3). #> Chain 3:  #> Chain 3: Gradient evaluation took 1e-05 seconds #> Chain 3: 1000 transitions using 10 leapfrog steps per transition would take 0.1 seconds. #> Chain 3: Adjust your expectations accordingly! #> Chain 3:  #> Chain 3:  #> Chain 3: Iteration:    1 / 2000 [  0%]  (Warmup) #> Chain 3: Iteration:  200 / 2000 [ 10%]  (Warmup) #> Chain 3: Iteration:  400 / 2000 [ 20%]  (Warmup) #> Chain 3: Iteration:  600 / 2000 [ 30%]  (Warmup) #> Chain 3: Iteration:  800 / 2000 [ 40%]  (Warmup) #> Chain 3: Iteration: 1000 / 2000 [ 50%]  (Warmup) #> Chain 3: Iteration: 1001 / 2000 [ 50%]  (Sampling) #> Chain 3: Iteration: 1200 / 2000 [ 60%]  (Sampling) #> Chain 3: Iteration: 1400 / 2000 [ 70%]  (Sampling) #> Chain 3: Iteration: 1600 / 2000 [ 80%]  (Sampling) #> Chain 3: Iteration: 1800 / 2000 [ 90%]  (Sampling) #> Chain 3: Iteration: 2000 / 2000 [100%]  (Sampling) #> Chain 3:  #> Chain 3:  Elapsed Time: 0.024 seconds (Warm-up) #> Chain 3:                0.049 seconds (Sampling) #> Chain 3:                0.073 seconds (Total) #> Chain 3:  #>  #> SAMPLING FOR MODEL 'continuous' NOW (CHAIN 4). #> Chain 4:  #> Chain 4: Gradient evaluation took 1e-05 seconds #> Chain 4: 1000 transitions using 10 leapfrog steps per transition would take 0.1 seconds. #> Chain 4: Adjust your expectations accordingly! #> Chain 4:  #> Chain 4:  #> Chain 4: Iteration:    1 / 2000 [  0%]  (Warmup) #> Chain 4: Iteration:  200 / 2000 [ 10%]  (Warmup) #> Chain 4: Iteration:  400 / 2000 [ 20%]  (Warmup) #> Chain 4: Iteration:  600 / 2000 [ 30%]  (Warmup) #> Chain 4: Iteration:  800 / 2000 [ 40%]  (Warmup) #> Chain 4: Iteration: 1000 / 2000 [ 50%]  (Warmup) #> Chain 4: Iteration: 1001 / 2000 [ 50%]  (Sampling) #> Chain 4: Iteration: 1200 / 2000 [ 60%]  (Sampling) #> Chain 4: Iteration: 1400 / 2000 [ 70%]  (Sampling) #> Chain 4: Iteration: 1600 / 2000 [ 80%]  (Sampling) #> Chain 4: Iteration: 1800 / 2000 [ 90%]  (Sampling) #> Chain 4: Iteration: 2000 / 2000 [100%]  (Sampling) #> Chain 4:  #> Chain 4:  Elapsed Time: 0.025 seconds (Warm-up) #> Chain 4:                0.051 seconds (Sampling) #> Chain 4:                0.076 seconds (Total) #> Chain 4:  #>  #> SAMPLING FOR MODEL 'continuous' NOW (CHAIN 1). #> Chain 1:  #> Chain 1: Gradient evaluation took 1.8e-05 seconds #> Chain 1: 1000 transitions using 10 leapfrog steps per transition would take 0.18 seconds. #> Chain 1: Adjust your expectations accordingly! #> Chain 1:  #> Chain 1:  #> Chain 1: Iteration:    1 / 2000 [  0%]  (Warmup) #> Chain 1: Iteration:  200 / 2000 [ 10%]  (Warmup) #> Chain 1: Iteration:  400 / 2000 [ 20%]  (Warmup) #> Chain 1: Iteration:  600 / 2000 [ 30%]  (Warmup) #> Chain 1: Iteration:  800 / 2000 [ 40%]  (Warmup) #> Chain 1: Iteration: 1000 / 2000 [ 50%]  (Warmup) #> Chain 1: Iteration: 1001 / 2000 [ 50%]  (Sampling) #> Chain 1: Iteration: 1200 / 2000 [ 60%]  (Sampling) #> Chain 1: Iteration: 1400 / 2000 [ 70%]  (Sampling) #> Chain 1: Iteration: 1600 / 2000 [ 80%]  (Sampling) #> Chain 1: Iteration: 1800 / 2000 [ 90%]  (Sampling) #> Chain 1: Iteration: 2000 / 2000 [100%]  (Sampling) #> Chain 1:  #> Chain 1:  Elapsed Time: 0.04 seconds (Warm-up) #> Chain 1:                0.064 seconds (Sampling) #> Chain 1:                0.104 seconds (Total) #> Chain 1:  #>  #> SAMPLING FOR MODEL 'continuous' NOW (CHAIN 2). #> Chain 2:  #> Chain 2: Gradient evaluation took 1.2e-05 seconds #> Chain 2: 1000 transitions using 10 leapfrog steps per transition would take 0.12 seconds. #> Chain 2: Adjust your expectations accordingly! #> Chain 2:  #> Chain 2:  #> Chain 2: Iteration:    1 / 2000 [  0%]  (Warmup) #> Chain 2: Iteration:  200 / 2000 [ 10%]  (Warmup) #> Chain 2: Iteration:  400 / 2000 [ 20%]  (Warmup) #> Chain 2: Iteration:  600 / 2000 [ 30%]  (Warmup) #> Chain 2: Iteration:  800 / 2000 [ 40%]  (Warmup) #> Chain 2: Iteration: 1000 / 2000 [ 50%]  (Warmup) #> Chain 2: Iteration: 1001 / 2000 [ 50%]  (Sampling) #> Chain 2: Iteration: 1200 / 2000 [ 60%]  (Sampling) #> Chain 2: Iteration: 1400 / 2000 [ 70%]  (Sampling) #> Chain 2: Iteration: 1600 / 2000 [ 80%]  (Sampling) #> Chain 2: Iteration: 1800 / 2000 [ 90%]  (Sampling) #> Chain 2: Iteration: 2000 / 2000 [100%]  (Sampling) #> Chain 2:  #> Chain 2:  Elapsed Time: 0.037 seconds (Warm-up) #> Chain 2:                0.063 seconds (Sampling) #> Chain 2:                0.1 seconds (Total) #> Chain 2:  #>  #> SAMPLING FOR MODEL 'continuous' NOW (CHAIN 3). #> Chain 3:  #> Chain 3: Gradient evaluation took 1.2e-05 seconds #> Chain 3: 1000 transitions using 10 leapfrog steps per transition would take 0.12 seconds. #> Chain 3: Adjust your expectations accordingly! #> Chain 3:  #> Chain 3:  #> Chain 3: Iteration:    1 / 2000 [  0%]  (Warmup) #> Chain 3: Iteration:  200 / 2000 [ 10%]  (Warmup) #> Chain 3: Iteration:  400 / 2000 [ 20%]  (Warmup) #> Chain 3: Iteration:  600 / 2000 [ 30%]  (Warmup) #> Chain 3: Iteration:  800 / 2000 [ 40%]  (Warmup) #> Chain 3: Iteration: 1000 / 2000 [ 50%]  (Warmup) #> Chain 3: Iteration: 1001 / 2000 [ 50%]  (Sampling) #> Chain 3: Iteration: 1200 / 2000 [ 60%]  (Sampling) #> Chain 3: Iteration: 1400 / 2000 [ 70%]  (Sampling) #> Chain 3: Iteration: 1600 / 2000 [ 80%]  (Sampling) #> Chain 3: Iteration: 1800 / 2000 [ 90%]  (Sampling) #> Chain 3: Iteration: 2000 / 2000 [100%]  (Sampling) #> Chain 3:  #> Chain 3:  Elapsed Time: 0.04 seconds (Warm-up) #> Chain 3:                0.062 seconds (Sampling) #> Chain 3:                0.102 seconds (Total) #> Chain 3:  #>  #> SAMPLING FOR MODEL 'continuous' NOW (CHAIN 4). #> Chain 4:  #> Chain 4: Gradient evaluation took 1.2e-05 seconds #> Chain 4: 1000 transitions using 10 leapfrog steps per transition would take 0.12 seconds. #> Chain 4: Adjust your expectations accordingly! #> Chain 4:  #> Chain 4:  #> Chain 4: Iteration:    1 / 2000 [  0%]  (Warmup) #> Chain 4: Iteration:  200 / 2000 [ 10%]  (Warmup) #> Chain 4: Iteration:  400 / 2000 [ 20%]  (Warmup) #> Chain 4: Iteration:  600 / 2000 [ 30%]  (Warmup) #> Chain 4: Iteration:  800 / 2000 [ 40%]  (Warmup) #> Chain 4: Iteration: 1000 / 2000 [ 50%]  (Warmup) #> Chain 4: Iteration: 1001 / 2000 [ 50%]  (Sampling) #> Chain 4: Iteration: 1200 / 2000 [ 60%]  (Sampling) #> Chain 4: Iteration: 1400 / 2000 [ 70%]  (Sampling) #> Chain 4: Iteration: 1600 / 2000 [ 80%]  (Sampling) #> Chain 4: Iteration: 1800 / 2000 [ 90%]  (Sampling) #> Chain 4: Iteration: 2000 / 2000 [100%]  (Sampling) #> Chain 4:  #> Chain 4:  Elapsed Time: 0.039 seconds (Warm-up) #> Chain 4:                0.06 seconds (Sampling) #> Chain 4:                0.099 seconds (Total) #> Chain 4:  #>  #> SAMPLING FOR MODEL 'continuous' NOW (CHAIN 1). #> Chain 1:  #> Chain 1: Gradient evaluation took 1.9e-05 seconds #> Chain 1: 1000 transitions using 10 leapfrog steps per transition would take 0.19 seconds. #> Chain 1: Adjust your expectations accordingly! #> Chain 1:  #> Chain 1:  #> Chain 1: Iteration:    1 / 2000 [  0%]  (Warmup) #> Chain 1: Iteration:  200 / 2000 [ 10%]  (Warmup) #> Chain 1: Iteration:  400 / 2000 [ 20%]  (Warmup) #> Chain 1: Iteration:  600 / 2000 [ 30%]  (Warmup) #> Chain 1: Iteration:  800 / 2000 [ 40%]  (Warmup) #> Chain 1: Iteration: 1000 / 2000 [ 50%]  (Warmup) #> Chain 1: Iteration: 1001 / 2000 [ 50%]  (Sampling) #> Chain 1: Iteration: 1200 / 2000 [ 60%]  (Sampling) #> Chain 1: Iteration: 1400 / 2000 [ 70%]  (Sampling) #> Chain 1: Iteration: 1600 / 2000 [ 80%]  (Sampling) #> Chain 1: Iteration: 1800 / 2000 [ 90%]  (Sampling) #> Chain 1: Iteration: 2000 / 2000 [100%]  (Sampling) #> Chain 1:  #> Chain 1:  Elapsed Time: 0.124 seconds (Warm-up) #> Chain 1:                0.154 seconds (Sampling) #> Chain 1:                0.278 seconds (Total) #> Chain 1:  #>  #> SAMPLING FOR MODEL 'continuous' NOW (CHAIN 2). #> Chain 2:  #> Chain 2: Gradient evaluation took 1.2e-05 seconds #> Chain 2: 1000 transitions using 10 leapfrog steps per transition would take 0.12 seconds. #> Chain 2: Adjust your expectations accordingly! #> Chain 2:  #> Chain 2:  #> Chain 2: Iteration:    1 / 2000 [  0%]  (Warmup) #> Chain 2: Iteration:  200 / 2000 [ 10%]  (Warmup) #> Chain 2: Iteration:  400 / 2000 [ 20%]  (Warmup) #> Chain 2: Iteration:  600 / 2000 [ 30%]  (Warmup) #> Chain 2: Iteration:  800 / 2000 [ 40%]  (Warmup) #> Chain 2: Iteration: 1000 / 2000 [ 50%]  (Warmup) #> Chain 2: Iteration: 1001 / 2000 [ 50%]  (Sampling) #> Chain 2: Iteration: 1200 / 2000 [ 60%]  (Sampling) #> Chain 2: Iteration: 1400 / 2000 [ 70%]  (Sampling) #> Chain 2: Iteration: 1600 / 2000 [ 80%]  (Sampling) #> Chain 2: Iteration: 1800 / 2000 [ 90%]  (Sampling) #> Chain 2: Iteration: 2000 / 2000 [100%]  (Sampling) #> Chain 2:  #> Chain 2:  Elapsed Time: 0.113 seconds (Warm-up) #> Chain 2:                0.163 seconds (Sampling) #> Chain 2:                0.276 seconds (Total) #> Chain 2:  #>  #> SAMPLING FOR MODEL 'continuous' NOW (CHAIN 3). #> Chain 3:  #> Chain 3: Gradient evaluation took 1.2e-05 seconds #> Chain 3: 1000 transitions using 10 leapfrog steps per transition would take 0.12 seconds. #> Chain 3: Adjust your expectations accordingly! #> Chain 3:  #> Chain 3:  #> Chain 3: Iteration:    1 / 2000 [  0%]  (Warmup) #> Chain 3: Iteration:  200 / 2000 [ 10%]  (Warmup) #> Chain 3: Iteration:  400 / 2000 [ 20%]  (Warmup) #> Chain 3: Iteration:  600 / 2000 [ 30%]  (Warmup) #> Chain 3: Iteration:  800 / 2000 [ 40%]  (Warmup) #> Chain 3: Iteration: 1000 / 2000 [ 50%]  (Warmup) #> Chain 3: Iteration: 1001 / 2000 [ 50%]  (Sampling) #> Chain 3: Iteration: 1200 / 2000 [ 60%]  (Sampling) #> Chain 3: Iteration: 1400 / 2000 [ 70%]  (Sampling) #> Chain 3: Iteration: 1600 / 2000 [ 80%]  (Sampling) #> Chain 3: Iteration: 1800 / 2000 [ 90%]  (Sampling) #> Chain 3: Iteration: 2000 / 2000 [100%]  (Sampling) #> Chain 3:  #> Chain 3:  Elapsed Time: 0.112 seconds (Warm-up) #> Chain 3:                0.134 seconds (Sampling) #> Chain 3:                0.246 seconds (Total) #> Chain 3:  #>  #> SAMPLING FOR MODEL 'continuous' NOW (CHAIN 4). #> Chain 4:  #> Chain 4: Gradient evaluation took 1.2e-05 seconds #> Chain 4: 1000 transitions using 10 leapfrog steps per transition would take 0.12 seconds. #> Chain 4: Adjust your expectations accordingly! #> Chain 4:  #> Chain 4:  #> Chain 4: Iteration:    1 / 2000 [  0%]  (Warmup) #> Chain 4: Iteration:  200 / 2000 [ 10%]  (Warmup) #> Chain 4: Iteration:  400 / 2000 [ 20%]  (Warmup) #> Chain 4: Iteration:  600 / 2000 [ 30%]  (Warmup) #> Chain 4: Iteration:  800 / 2000 [ 40%]  (Warmup) #> Chain 4: Iteration: 1000 / 2000 [ 50%]  (Warmup) #> Chain 4: Iteration: 1001 / 2000 [ 50%]  (Sampling) #> Chain 4: Iteration: 1200 / 2000 [ 60%]  (Sampling) #> Chain 4: Iteration: 1400 / 2000 [ 70%]  (Sampling) #> Chain 4: Iteration: 1600 / 2000 [ 80%]  (Sampling) #> Chain 4: Iteration: 1800 / 2000 [ 90%]  (Sampling) #> Chain 4: Iteration: 2000 / 2000 [100%]  (Sampling) #> Chain 4:  #> Chain 4:  Elapsed Time: 0.119 seconds (Warm-up) #> Chain 4:                0.145 seconds (Sampling) #> Chain 4:                0.264 seconds (Total) #> Chain 4:  #> Bayes Factors for Model Comparison #>  #>     Model                        BF #> [1] Species                6.29e+27 #> [2] Species + Petal.Length 2.25e+53 #>  #> * Against Denominator: [3] (Intercept only) #> *   Bayes Factor Type: marginal likelihoods (bridgesampling)   # brms models # -------------------- # (note the save_pars MUST be set to save_pars(all = TRUE) in order to work) if (require(\"brms\")) {   brm1 <- brm(Sepal.Length ~ 1, data = iris, save_pars = save_pars(all = TRUE))   brm2 <- brm(Sepal.Length ~ Species, data = iris, save_pars = save_pars(all = TRUE))   brm3 <- brm(     Sepal.Length ~ Species + Petal.Length,     data = iris,     save_pars = save_pars(all = TRUE)   )    bayesfactor_models(brm1, brm2, brm3, denominator = 1, verbose = FALSE) } #> Loading required package: brms #> Loading 'brms' package (version 2.19.0). Useful instructions #> can be found by typing help('brms'). A more detailed introduction #> to the package is available through vignette('brms_overview'). #>  #> Attaching package: ‘brms’ #> The following object is masked from ‘package:lme4’: #>  #>     ngrps #> The following objects are masked from ‘package:rstanarm’: #>  #>     dirichlet, exponential, get_y, lasso, ngrps #> The following object is masked from ‘package:stats’: #>  #>     ar #> Compiling Stan program... #> Start sampling #>  #> SAMPLING FOR MODEL '7ee50756b18bb11b98b60243b6abf4c0' NOW (CHAIN 1). #> Chain 1:  #> Chain 1: Gradient evaluation took 3.1e-05 seconds #> Chain 1: 1000 transitions using 10 leapfrog steps per transition would take 0.31 seconds. #> Chain 1: Adjust your expectations accordingly! #> Chain 1:  #> Chain 1:  #> Chain 1: Iteration:    1 / 2000 [  0%]  (Warmup) #> Chain 1: Iteration:  200 / 2000 [ 10%]  (Warmup) #> Chain 1: Iteration:  400 / 2000 [ 20%]  (Warmup) #> Chain 1: Iteration:  600 / 2000 [ 30%]  (Warmup) #> Chain 1: Iteration:  800 / 2000 [ 40%]  (Warmup) #> Chain 1: Iteration: 1000 / 2000 [ 50%]  (Warmup) #> Chain 1: Iteration: 1001 / 2000 [ 50%]  (Sampling) #> Chain 1: Iteration: 1200 / 2000 [ 60%]  (Sampling) #> Chain 1: Iteration: 1400 / 2000 [ 70%]  (Sampling) #> Chain 1: Iteration: 1600 / 2000 [ 80%]  (Sampling) #> Chain 1: Iteration: 1800 / 2000 [ 90%]  (Sampling) #> Chain 1: Iteration: 2000 / 2000 [100%]  (Sampling) #> Chain 1:  #> Chain 1:  Elapsed Time: 0.043737 seconds (Warm-up) #> Chain 1:                0.044539 seconds (Sampling) #> Chain 1:                0.088276 seconds (Total) #> Chain 1:  #>  #> SAMPLING FOR MODEL '7ee50756b18bb11b98b60243b6abf4c0' NOW (CHAIN 2). #> Chain 2:  #> Chain 2: Gradient evaluation took 1.5e-05 seconds #> Chain 2: 1000 transitions using 10 leapfrog steps per transition would take 0.15 seconds. #> Chain 2: Adjust your expectations accordingly! #> Chain 2:  #> Chain 2:  #> Chain 2: Iteration:    1 / 2000 [  0%]  (Warmup) #> Chain 2: Iteration:  200 / 2000 [ 10%]  (Warmup) #> Chain 2: Iteration:  400 / 2000 [ 20%]  (Warmup) #> Chain 2: Iteration:  600 / 2000 [ 30%]  (Warmup) #> Chain 2: Iteration:  800 / 2000 [ 40%]  (Warmup) #> Chain 2: Iteration: 1000 / 2000 [ 50%]  (Warmup) #> Chain 2: Iteration: 1001 / 2000 [ 50%]  (Sampling) #> Chain 2: Iteration: 1200 / 2000 [ 60%]  (Sampling) #> Chain 2: Iteration: 1400 / 2000 [ 70%]  (Sampling) #> Chain 2: Iteration: 1600 / 2000 [ 80%]  (Sampling) #> Chain 2: Iteration: 1800 / 2000 [ 90%]  (Sampling) #> Chain 2: Iteration: 2000 / 2000 [100%]  (Sampling) #> Chain 2:  #> Chain 2:  Elapsed Time: 0.042124 seconds (Warm-up) #> Chain 2:                0.047908 seconds (Sampling) #> Chain 2:                0.090032 seconds (Total) #> Chain 2:  #>  #> SAMPLING FOR MODEL '7ee50756b18bb11b98b60243b6abf4c0' NOW (CHAIN 3). #> Chain 3:  #> Chain 3: Gradient evaluation took 1.5e-05 seconds #> Chain 3: 1000 transitions using 10 leapfrog steps per transition would take 0.15 seconds. #> Chain 3: Adjust your expectations accordingly! #> Chain 3:  #> Chain 3:  #> Chain 3: Iteration:    1 / 2000 [  0%]  (Warmup) #> Chain 3: Iteration:  200 / 2000 [ 10%]  (Warmup) #> Chain 3: Iteration:  400 / 2000 [ 20%]  (Warmup) #> Chain 3: Iteration:  600 / 2000 [ 30%]  (Warmup) #> Chain 3: Iteration:  800 / 2000 [ 40%]  (Warmup) #> Chain 3: Iteration: 1000 / 2000 [ 50%]  (Warmup) #> Chain 3: Iteration: 1001 / 2000 [ 50%]  (Sampling) #> Chain 3: Iteration: 1200 / 2000 [ 60%]  (Sampling) #> Chain 3: Iteration: 1400 / 2000 [ 70%]  (Sampling) #> Chain 3: Iteration: 1600 / 2000 [ 80%]  (Sampling) #> Chain 3: Iteration: 1800 / 2000 [ 90%]  (Sampling) #> Chain 3: Iteration: 2000 / 2000 [100%]  (Sampling) #> Chain 3:  #> Chain 3:  Elapsed Time: 0.043524 seconds (Warm-up) #> Chain 3:                0.045816 seconds (Sampling) #> Chain 3:                0.08934 seconds (Total) #> Chain 3:  #>  #> SAMPLING FOR MODEL '7ee50756b18bb11b98b60243b6abf4c0' NOW (CHAIN 4). #> Chain 4:  #> Chain 4: Gradient evaluation took 1.3e-05 seconds #> Chain 4: 1000 transitions using 10 leapfrog steps per transition would take 0.13 seconds. #> Chain 4: Adjust your expectations accordingly! #> Chain 4:  #> Chain 4:  #> Chain 4: Iteration:    1 / 2000 [  0%]  (Warmup) #> Chain 4: Iteration:  200 / 2000 [ 10%]  (Warmup) #> Chain 4: Iteration:  400 / 2000 [ 20%]  (Warmup) #> Chain 4: Iteration:  600 / 2000 [ 30%]  (Warmup) #> Chain 4: Iteration:  800 / 2000 [ 40%]  (Warmup) #> Chain 4: Iteration: 1000 / 2000 [ 50%]  (Warmup) #> Chain 4: Iteration: 1001 / 2000 [ 50%]  (Sampling) #> Chain 4: Iteration: 1200 / 2000 [ 60%]  (Sampling) #> Chain 4: Iteration: 1400 / 2000 [ 70%]  (Sampling) #> Chain 4: Iteration: 1600 / 2000 [ 80%]  (Sampling) #> Chain 4: Iteration: 1800 / 2000 [ 90%]  (Sampling) #> Chain 4: Iteration: 2000 / 2000 [100%]  (Sampling) #> Chain 4:  #> Chain 4:  Elapsed Time: 0.042124 seconds (Warm-up) #> Chain 4:                0.041708 seconds (Sampling) #> Chain 4:                0.083832 seconds (Total) #> Chain 4:  #> Compiling Stan program... #> Start sampling #>  #> SAMPLING FOR MODEL '7a5afdce5d4c61c643bdd2e18672208c' NOW (CHAIN 1). #> Chain 1:  #> Chain 1: Gradient evaluation took 1.2e-05 seconds #> Chain 1: 1000 transitions using 10 leapfrog steps per transition would take 0.12 seconds. #> Chain 1: Adjust your expectations accordingly! #> Chain 1:  #> Chain 1:  #> Chain 1: Iteration:    1 / 2000 [  0%]  (Warmup) #> Chain 1: Iteration:  200 / 2000 [ 10%]  (Warmup) #> Chain 1: Iteration:  400 / 2000 [ 20%]  (Warmup) #> Chain 1: Iteration:  600 / 2000 [ 30%]  (Warmup) #> Chain 1: Iteration:  800 / 2000 [ 40%]  (Warmup) #> Chain 1: Iteration: 1000 / 2000 [ 50%]  (Warmup) #> Chain 1: Iteration: 1001 / 2000 [ 50%]  (Sampling) #> Chain 1: Iteration: 1200 / 2000 [ 60%]  (Sampling) #> Chain 1: Iteration: 1400 / 2000 [ 70%]  (Sampling) #> Chain 1: Iteration: 1600 / 2000 [ 80%]  (Sampling) #> Chain 1: Iteration: 1800 / 2000 [ 90%]  (Sampling) #> Chain 1: Iteration: 2000 / 2000 [100%]  (Sampling) #> Chain 1:  #> Chain 1:  Elapsed Time: 0.025352 seconds (Warm-up) #> Chain 1:                0.022766 seconds (Sampling) #> Chain 1:                0.048118 seconds (Total) #> Chain 1:  #>  #> SAMPLING FOR MODEL '7a5afdce5d4c61c643bdd2e18672208c' NOW (CHAIN 2). #> Chain 2:  #> Chain 2: Gradient evaluation took 7e-06 seconds #> Chain 2: 1000 transitions using 10 leapfrog steps per transition would take 0.07 seconds. #> Chain 2: Adjust your expectations accordingly! #> Chain 2:  #> Chain 2:  #> Chain 2: Iteration:    1 / 2000 [  0%]  (Warmup) #> Chain 2: Iteration:  200 / 2000 [ 10%]  (Warmup) #> Chain 2: Iteration:  400 / 2000 [ 20%]  (Warmup) #> Chain 2: Iteration:  600 / 2000 [ 30%]  (Warmup) #> Chain 2: Iteration:  800 / 2000 [ 40%]  (Warmup) #> Chain 2: Iteration: 1000 / 2000 [ 50%]  (Warmup) #> Chain 2: Iteration: 1001 / 2000 [ 50%]  (Sampling) #> Chain 2: Iteration: 1200 / 2000 [ 60%]  (Sampling) #> Chain 2: Iteration: 1400 / 2000 [ 70%]  (Sampling) #> Chain 2: Iteration: 1600 / 2000 [ 80%]  (Sampling) #> Chain 2: Iteration: 1800 / 2000 [ 90%]  (Sampling) #> Chain 2: Iteration: 2000 / 2000 [100%]  (Sampling) #> Chain 2:  #> Chain 2:  Elapsed Time: 0.025276 seconds (Warm-up) #> Chain 2:                0.022653 seconds (Sampling) #> Chain 2:                0.047929 seconds (Total) #> Chain 2:  #>  #> SAMPLING FOR MODEL '7a5afdce5d4c61c643bdd2e18672208c' NOW (CHAIN 3). #> Chain 3:  #> Chain 3: Gradient evaluation took 8e-06 seconds #> Chain 3: 1000 transitions using 10 leapfrog steps per transition would take 0.08 seconds. #> Chain 3: Adjust your expectations accordingly! #> Chain 3:  #> Chain 3:  #> Chain 3: Iteration:    1 / 2000 [  0%]  (Warmup) #> Chain 3: Iteration:  200 / 2000 [ 10%]  (Warmup) #> Chain 3: Iteration:  400 / 2000 [ 20%]  (Warmup) #> Chain 3: Iteration:  600 / 2000 [ 30%]  (Warmup) #> Chain 3: Iteration:  800 / 2000 [ 40%]  (Warmup) #> Chain 3: Iteration: 1000 / 2000 [ 50%]  (Warmup) #> Chain 3: Iteration: 1001 / 2000 [ 50%]  (Sampling) #> Chain 3: Iteration: 1200 / 2000 [ 60%]  (Sampling) #> Chain 3: Iteration: 1400 / 2000 [ 70%]  (Sampling) #> Chain 3: Iteration: 1600 / 2000 [ 80%]  (Sampling) #> Chain 3: Iteration: 1800 / 2000 [ 90%]  (Sampling) #> Chain 3: Iteration: 2000 / 2000 [100%]  (Sampling) #> Chain 3:  #> Chain 3:  Elapsed Time: 0.024777 seconds (Warm-up) #> Chain 3:                0.024252 seconds (Sampling) #> Chain 3:                0.049029 seconds (Total) #> Chain 3:  #>  #> SAMPLING FOR MODEL '7a5afdce5d4c61c643bdd2e18672208c' NOW (CHAIN 4). #> Chain 4:  #> Chain 4: Gradient evaluation took 8e-06 seconds #> Chain 4: 1000 transitions using 10 leapfrog steps per transition would take 0.08 seconds. #> Chain 4: Adjust your expectations accordingly! #> Chain 4:  #> Chain 4:  #> Chain 4: Iteration:    1 / 2000 [  0%]  (Warmup) #> Chain 4: Iteration:  200 / 2000 [ 10%]  (Warmup) #> Chain 4: Iteration:  400 / 2000 [ 20%]  (Warmup) #> Chain 4: Iteration:  600 / 2000 [ 30%]  (Warmup) #> Chain 4: Iteration:  800 / 2000 [ 40%]  (Warmup) #> Chain 4: Iteration: 1000 / 2000 [ 50%]  (Warmup) #> Chain 4: Iteration: 1001 / 2000 [ 50%]  (Sampling) #> Chain 4: Iteration: 1200 / 2000 [ 60%]  (Sampling) #> Chain 4: Iteration: 1400 / 2000 [ 70%]  (Sampling) #> Chain 4: Iteration: 1600 / 2000 [ 80%]  (Sampling) #> Chain 4: Iteration: 1800 / 2000 [ 90%]  (Sampling) #> Chain 4: Iteration: 2000 / 2000 [100%]  (Sampling) #> Chain 4:  #> Chain 4:  Elapsed Time: 0.02421 seconds (Warm-up) #> Chain 4:                0.023606 seconds (Sampling) #> Chain 4:                0.047816 seconds (Total) #> Chain 4:  #> Compiling Stan program... #> recompiling to avoid crashing R session #> Start sampling #>  #> SAMPLING FOR MODEL '7a5afdce5d4c61c643bdd2e18672208c' NOW (CHAIN 1). #> Chain 1:  #> Chain 1: Gradient evaluation took 1.3e-05 seconds #> Chain 1: 1000 transitions using 10 leapfrog steps per transition would take 0.13 seconds. #> Chain 1: Adjust your expectations accordingly! #> Chain 1:  #> Chain 1:  #> Chain 1: Iteration:    1 / 2000 [  0%]  (Warmup) #> Chain 1: Iteration:  200 / 2000 [ 10%]  (Warmup) #> Chain 1: Iteration:  400 / 2000 [ 20%]  (Warmup) #> Chain 1: Iteration:  600 / 2000 [ 30%]  (Warmup) #> Chain 1: Iteration:  800 / 2000 [ 40%]  (Warmup) #> Chain 1: Iteration: 1000 / 2000 [ 50%]  (Warmup) #> Chain 1: Iteration: 1001 / 2000 [ 50%]  (Sampling) #> Chain 1: Iteration: 1200 / 2000 [ 60%]  (Sampling) #> Chain 1: Iteration: 1400 / 2000 [ 70%]  (Sampling) #> Chain 1: Iteration: 1600 / 2000 [ 80%]  (Sampling) #> Chain 1: Iteration: 1800 / 2000 [ 90%]  (Sampling) #> Chain 1: Iteration: 2000 / 2000 [100%]  (Sampling) #> Chain 1:  #> Chain 1:  Elapsed Time: 0.07377 seconds (Warm-up) #> Chain 1:                0.074756 seconds (Sampling) #> Chain 1:                0.148526 seconds (Total) #> Chain 1:  #>  #> SAMPLING FOR MODEL '7a5afdce5d4c61c643bdd2e18672208c' NOW (CHAIN 2). #> Chain 2:  #> Chain 2: Gradient evaluation took 8e-06 seconds #> Chain 2: 1000 transitions using 10 leapfrog steps per transition would take 0.08 seconds. #> Chain 2: Adjust your expectations accordingly! #> Chain 2:  #> Chain 2:  #> Chain 2: Iteration:    1 / 2000 [  0%]  (Warmup) #> Chain 2: Iteration:  200 / 2000 [ 10%]  (Warmup) #> Chain 2: Iteration:  400 / 2000 [ 20%]  (Warmup) #> Chain 2: Iteration:  600 / 2000 [ 30%]  (Warmup) #> Chain 2: Iteration:  800 / 2000 [ 40%]  (Warmup) #> Chain 2: Iteration: 1000 / 2000 [ 50%]  (Warmup) #> Chain 2: Iteration: 1001 / 2000 [ 50%]  (Sampling) #> Chain 2: Iteration: 1200 / 2000 [ 60%]  (Sampling) #> Chain 2: Iteration: 1400 / 2000 [ 70%]  (Sampling) #> Chain 2: Iteration: 1600 / 2000 [ 80%]  (Sampling) #> Chain 2: Iteration: 1800 / 2000 [ 90%]  (Sampling) #> Chain 2: Iteration: 2000 / 2000 [100%]  (Sampling) #> Chain 2:  #> Chain 2:  Elapsed Time: 0.072293 seconds (Warm-up) #> Chain 2:                0.081336 seconds (Sampling) #> Chain 2:                0.153629 seconds (Total) #> Chain 2:  #>  #> SAMPLING FOR MODEL '7a5afdce5d4c61c643bdd2e18672208c' NOW (CHAIN 3). #> Chain 3:  #> Chain 3: Gradient evaluation took 8e-06 seconds #> Chain 3: 1000 transitions using 10 leapfrog steps per transition would take 0.08 seconds. #> Chain 3: Adjust your expectations accordingly! #> Chain 3:  #> Chain 3:  #> Chain 3: Iteration:    1 / 2000 [  0%]  (Warmup) #> Chain 3: Iteration:  200 / 2000 [ 10%]  (Warmup) #> Chain 3: Iteration:  400 / 2000 [ 20%]  (Warmup) #> Chain 3: Iteration:  600 / 2000 [ 30%]  (Warmup) #> Chain 3: Iteration:  800 / 2000 [ 40%]  (Warmup) #> Chain 3: Iteration: 1000 / 2000 [ 50%]  (Warmup) #> Chain 3: Iteration: 1001 / 2000 [ 50%]  (Sampling) #> Chain 3: Iteration: 1200 / 2000 [ 60%]  (Sampling) #> Chain 3: Iteration: 1400 / 2000 [ 70%]  (Sampling) #> Chain 3: Iteration: 1600 / 2000 [ 80%]  (Sampling) #> Chain 3: Iteration: 1800 / 2000 [ 90%]  (Sampling) #> Chain 3: Iteration: 2000 / 2000 [100%]  (Sampling) #> Chain 3:  #> Chain 3:  Elapsed Time: 0.071625 seconds (Warm-up) #> Chain 3:                0.076767 seconds (Sampling) #> Chain 3:                0.148392 seconds (Total) #> Chain 3:  #>  #> SAMPLING FOR MODEL '7a5afdce5d4c61c643bdd2e18672208c' NOW (CHAIN 4). #> Chain 4:  #> Chain 4: Gradient evaluation took 9e-06 seconds #> Chain 4: 1000 transitions using 10 leapfrog steps per transition would take 0.09 seconds. #> Chain 4: Adjust your expectations accordingly! #> Chain 4:  #> Chain 4:  #> Chain 4: Iteration:    1 / 2000 [  0%]  (Warmup) #> Chain 4: Iteration:  200 / 2000 [ 10%]  (Warmup) #> Chain 4: Iteration:  400 / 2000 [ 20%]  (Warmup) #> Chain 4: Iteration:  600 / 2000 [ 30%]  (Warmup) #> Chain 4: Iteration:  800 / 2000 [ 40%]  (Warmup) #> Chain 4: Iteration: 1000 / 2000 [ 50%]  (Warmup) #> Chain 4: Iteration: 1001 / 2000 [ 50%]  (Sampling) #> Chain 4: Iteration: 1200 / 2000 [ 60%]  (Sampling) #> Chain 4: Iteration: 1400 / 2000 [ 70%]  (Sampling) #> Chain 4: Iteration: 1600 / 2000 [ 80%]  (Sampling) #> Chain 4: Iteration: 1800 / 2000 [ 90%]  (Sampling) #> Chain 4: Iteration: 2000 / 2000 [100%]  (Sampling) #> Chain 4:  #> Chain 4:  Elapsed Time: 0.070124 seconds (Warm-up) #> Chain 4:                0.079739 seconds (Sampling) #> Chain 4:                0.149863 seconds (Total) #> Chain 4:  #> Bayes Factors for Model Comparison #>  #>     Model                        BF #> [2] Species                5.87e+29 #> [3] Species + Petal.Length 7.61e+55 #>  #> * Against Denominator: [1] (Intercept only) #> *   Bayes Factor Type: marginal likelihoods (bridgesampling)   # BayesFactor # --------------------------- if (require(\"BayesFactor\")) {   data(puzzles)   BF <- anovaBF(RT ~ shape * color + ID,     data = puzzles,     whichRandom = \"ID\", progress = FALSE   )   BF   bayesfactor_models(BF) # basically the same } #> Bayes Factors for Model Comparison #>  #>     Model                               BF #> [2] shape + ID                        2.87 #> [3] color + ID                        2.78 #> [4] shape + color + ID               12.34 #> [5] shape + color + shape:color + ID  4.13 #>  #> * Against Denominator: [1] ID #> *   Bayes Factor Type: JZS (BayesFactor) # }"},{"path":"https://easystats.github.io/bayestestR/reference/bayesfactor_parameters.html","id":null,"dir":"Reference","previous_headings":"","what":"Bayes Factors (BF) for a Single Parameter — bayesfactor_parameters","title":"Bayes Factors (BF) for a Single Parameter — bayesfactor_parameters","text":"method computes Bayes factors null (either point interval), based prior posterior samples single parameter. Bayes factor indicates degree mass posterior distribution shifted away closer null value(s) (relative prior distribution), thus indicating null value become less likely given observed data.  null interval, Bayes factor computed comparing prior posterior odds parameter falling within outside null interval (Morey & Rouder, 2011; Liao et al., 2020); null point, Savage-Dickey density ratio computed, also approximation Bayes factor comparing marginal likelihoods model model tested parameter restricted point null (Wagenmakers et al., 2010; Heck, 2019).  Note logspline package used estimating densities probabilities, must installed function work. bayesfactor_pointnull() bayesfactor_rope() wrappers around bayesfactor_parameters different defaults null tested (point range, respectively). Aliases main functions prefixed bf_*, like bf_parameters() bf_pointnull(). info, particular specifying correct priors factors 2 levels, see Bayes factors vignette.","code":""},{"path":"https://easystats.github.io/bayestestR/reference/bayesfactor_parameters.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Bayes Factors (BF) for a Single Parameter — bayesfactor_parameters","text":"","code":"bayesfactor_parameters(   posterior,   prior = NULL,   direction = \"two-sided\",   null = 0,   verbose = TRUE,   ... )  bayesfactor_pointnull(   posterior,   prior = NULL,   direction = \"two-sided\",   null = 0,   verbose = TRUE,   ... )  bayesfactor_rope(   posterior,   prior = NULL,   direction = \"two-sided\",   null = rope_range(posterior),   verbose = TRUE,   ... )  bf_parameters(   posterior,   prior = NULL,   direction = \"two-sided\",   null = 0,   verbose = TRUE,   ... )  bf_pointnull(   posterior,   prior = NULL,   direction = \"two-sided\",   null = 0,   verbose = TRUE,   ... )  bf_rope(   posterior,   prior = NULL,   direction = \"two-sided\",   null = rope_range(posterior),   verbose = TRUE,   ... )  # S3 method for numeric bayesfactor_parameters(   posterior,   prior = NULL,   direction = \"two-sided\",   null = 0,   verbose = TRUE,   ... )  # S3 method for stanreg bayesfactor_parameters(   posterior,   prior = NULL,   direction = \"two-sided\",   null = 0,   verbose = TRUE,   effects = c(\"fixed\", \"random\", \"all\"),   component = c(\"conditional\", \"location\", \"smooth_terms\", \"sigma\", \"zi\",     \"zero_inflated\", \"all\"),   parameters = NULL,   ... )  # S3 method for brmsfit bayesfactor_parameters(   posterior,   prior = NULL,   direction = \"two-sided\",   null = 0,   verbose = TRUE,   effects = c(\"fixed\", \"random\", \"all\"),   component = c(\"conditional\", \"location\", \"smooth_terms\", \"sigma\", \"zi\",     \"zero_inflated\", \"all\"),   parameters = NULL,   ... )  # S3 method for blavaan bayesfactor_parameters(   posterior,   prior = NULL,   direction = \"two-sided\",   null = 0,   verbose = TRUE,   ... )  # S3 method for data.frame bayesfactor_parameters(   posterior,   prior = NULL,   direction = \"two-sided\",   null = 0,   verbose = TRUE,   ... )"},{"path":"https://easystats.github.io/bayestestR/reference/bayesfactor_parameters.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Bayes Factors (BF) for a Single Parameter — bayesfactor_parameters","text":"posterior numerical vector, stanreg / brmsfit object, emmGrid data frame - representing posterior distribution(s) (see 'Details'). prior object representing prior distribution (see 'Details'). direction Test type (see 'Details'). One 0, \"two-sided\" (default, two tailed), -1, \"left\" (left tailed) 1, \"right\" (right tailed). null Value null, either scalar (point-null) range (interval-null). verbose Toggle warnings. ... Arguments passed methods. (Can used pass arguments internal logspline::logspline().) effects results fixed effects, random effects returned? applies mixed models. May abbreviated. component results parameters, parameters conditional model zero-inflated part model returned? May abbreviated. applies brms-models. parameters Regular expression pattern describes parameters returned. Meta-parameters (like lp__ prior_) filtered default, parameters typically appear summary() returned. Use parameters select specific parameters output.","code":""},{"path":"https://easystats.github.io/bayestestR/reference/bayesfactor_parameters.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Bayes Factors (BF) for a Single Parameter — bayesfactor_parameters","text":"data frame containing (log) Bayes factor representing evidence null  (Use .numeric() extract non-log Bayes factors; see examples).","code":""},{"path":"https://easystats.github.io/bayestestR/reference/bayesfactor_parameters.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Bayes Factors (BF) for a Single Parameter — bayesfactor_parameters","text":"method used compute Bayes factors based prior posterior distributions.","code":""},{"path":"https://easystats.github.io/bayestestR/reference/bayesfactor_parameters.html","id":"one-sided-amp-dividing-tests-setting-an-order-restriction-","dir":"Reference","previous_headings":"","what":"One-sided & Dividing Tests (setting an order restriction)","title":"Bayes Factors (BF) for a Single Parameter — bayesfactor_parameters","text":"One sided tests (controlled direction) conducted restricting prior posterior non-null values (\"alternative\") one side null (Morey & Wagenmakers, 2014). example, prior hypothesis parameter positive, alternative restricted region right null (point interval). example, Bayes factor comparing \"null\" 0-0.1 alternative >0.1, set bayesfactor_parameters(null = c(0, 0.1), direction = \">\").  also possible compute Bayes factor dividing hypotheses - , null alternative complementary, opposing one-sided hypotheses (Morey & Wagenmakers, 2014). example, Bayes factor comparing \"null\" <0 alternative >0, set bayesfactor_parameters(null = c(-Inf, 0)).","code":""},{"path":"https://easystats.github.io/bayestestR/reference/bayesfactor_parameters.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Bayes Factors (BF) for a Single Parameter — bayesfactor_parameters","text":"also plot()-method implemented see-package.","code":""},{"path":"https://easystats.github.io/bayestestR/reference/bayesfactor_parameters.html","id":"setting-the-correct-prior","dir":"Reference","previous_headings":"","what":"Setting the correct prior","title":"Bayes Factors (BF) for a Single Parameter — bayesfactor_parameters","text":"computation Bayes factors, model priors must proper priors (least flat, preferable informative); priors alternative get wider, likelihood null value(s) increases, extreme completely flat priors null infinitely favorable alternative (called Jeffreys-Lindley-Bartlett paradox). Thus, ever try (want) compute Bayes factor informed prior.  (Note default, brms::brm() uses flat priors fixed-effects; See example .)  important provide correct prior meaningful results. posterior numerical vector, prior also numerical vector. posterior data.frame, prior also data.frame, matching column order. posterior stanreg, brmsfit supported Bayesian model: prior can set NULL, case prior samples drawn internally. prior can also model equivalent posterior samples priors . See unupdate(). Note: posterior brmsfit_multiple model, prior must provided. posterior emmGrid / emm_list object: prior also emmGrid / emm_list object equivalent posterior created model priors samples . See unupdate(). prior can also original (posterior) model. , function try update emmGrid / emm_list use unupdate()d prior-model. (done brmsfit models.) Note: emmGrid undergone transformations (\"log\", \"response\", etc.), regriding, prior must emmGrid object, stated .","code":""},{"path":"https://easystats.github.io/bayestestR/reference/bayesfactor_parameters.html","id":"interpreting-bayes-factors","dir":"Reference","previous_headings":"","what":"Interpreting Bayes Factors","title":"Bayes Factors (BF) for a Single Parameter — bayesfactor_parameters","text":"Bayes factor greater 1 can interpreted evidence null, one convention Bayes factor greater 3 can considered \"substantial\" evidence null (vice versa, Bayes factor smaller 1/3 indicates substantial evidence favor null-model) (Wetzels et al. 2011).","code":""},{"path":"https://easystats.github.io/bayestestR/reference/bayesfactor_parameters.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Bayes Factors (BF) for a Single Parameter — bayesfactor_parameters","text":"Wagenmakers, E. J., Lodewyckx, T., Kuriyal, H., Grasman, R. (2010). Bayesian hypothesis testing psychologists: tutorial Savage-Dickey method. Cognitive psychology, 60(3), 158-189. Heck, D. W. (2019). caveat Savage–Dickey density ratio: case computing Bayes factors regression parameters. British Journal Mathematical Statistical Psychology, 72(2), 316-333. Morey, R. D., & Wagenmakers, E. J. (2014). Simple relation Bayesian order-restricted point-null hypothesis tests. Statistics & Probability Letters, 92, 121-124. Morey, R. D., & Rouder, J. N. (2011). Bayes factor approaches testing interval null hypotheses. Psychological methods, 16(4), 406. Liao, J. G., Midya, V., & Berg, . (2020). Connecting contrasting Bayes factor modified ROPE procedure testing interval null hypotheses. American Statistician, 1-19. Wetzels, R., Matzke, D., Lee, M. D., Rouder, J. N., Iverson, G. J., Wagenmakers, E.-J. (2011). Statistical Evidence Experimental Psychology: Empirical Comparison Using 855 t Tests. Perspectives Psychological Science, 6(3), 291–298. doi:10.1177/1745691611406923","code":""},{"path":"https://easystats.github.io/bayestestR/reference/bayesfactor_parameters.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Bayes Factors (BF) for a Single Parameter — bayesfactor_parameters","text":"Mattan S. Ben-Shachar","code":""},{"path":"https://easystats.github.io/bayestestR/reference/bayesfactor_parameters.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Bayes Factors (BF) for a Single Parameter — bayesfactor_parameters","text":"","code":"library(bayestestR) if (require(\"logspline\")) {   prior <- distribution_normal(1000, mean = 0, sd = 1)   posterior <- distribution_normal(1000, mean = .5, sd = .3)   (BF_pars <- bayesfactor_parameters(posterior, prior, verbose = FALSE))    as.numeric(BF_pars) } #> [1] 1.212843 # \\dontrun{ # rstanarm models # --------------- if (require(\"rstanarm\") && require(\"emmeans\") && require(\"logspline\")) {   contrasts(sleep$group) <- contr.equalprior_pairs # see vingette   stan_model <- suppressWarnings(stan_lmer(     extra ~ group + (1 | ID),     data = sleep,     refresh = 0   ))   bayesfactor_parameters(stan_model, verbose = FALSE)   bayesfactor_parameters(stan_model, null = rope_range(stan_model))    # emmGrid objects   # ---------------   group_diff <- pairs(emmeans(stan_model, ~group))   bayesfactor_parameters(group_diff, prior = stan_model, verbose = FALSE)    # Or   group_diff_prior <- pairs(emmeans(unupdate(stan_model), ~group))   bayesfactor_parameters(group_diff, prior = group_diff_prior, verbose = FALSE) } #> Loading required package: emmeans #> Sampling priors, please wait... #> Warning: Model has 0 prior weights, but we recovered 20 rows of data. #> So prior weights were ignored. #> Warning: Model has 0 prior weights, but we recovered 20 rows of data. #> So prior weights were ignored. #> Sampling priors, please wait... #> Warning: Model has 0 prior weights, but we recovered 20 rows of data. #> So prior weights were ignored. #> Bayes Factor (Savage-Dickey density ratio) #>  #> Parameter       |   BF #> ---------------------- #> group1 - group2 | 3.32 #>  #> * Evidence Against The Null: 0 #>   # brms models # ----------- if (require(\"brms\")) {   contrasts(sleep$group) <- contr.equalprior_pairs # see vingette   my_custom_priors <-     set_prior(\"student_t(3, 0, 1)\", class = \"b\") +     set_prior(\"student_t(3, 0, 1)\", class = \"sd\", group = \"ID\")    brms_model <- suppressWarnings(brm(extra ~ group + (1 | ID),     data = sleep,     prior = my_custom_priors,     refresh = 0   ))   bayesfactor_parameters(brms_model, verbose = FALSE) } #> Compiling Stan program... #> Start sampling #> ===> warning: knot  3  removed - double knot #> ===> warning: knot  4  removed - double knot #> * several double knots suggests that your data is * #> * strongly rounded, attention might be required   * #> ===> warning: knot  3  removed - double knot #> ===> warning: knot  4  removed - double knot #> * several double knots suggests that your data is * #> * strongly rounded, attention might be required   * #> Bayes Factor (Savage-Dickey density ratio)  #>  #> Parameter   |   BF #> ------------------ #> (Intercept) | 4.02 #> group1      | 9.90 #>  #> * Evidence Against The Null: 0 #>  # }"},{"path":"https://easystats.github.io/bayestestR/reference/bayesfactor_restricted.html","id":null,"dir":"Reference","previous_headings":"","what":"Bayes Factors (BF) for Order Restricted Models — bayesfactor_restricted","title":"Bayes Factors (BF) for Order Restricted Models — bayesfactor_restricted","text":"method computes Bayes factors comparing model order restrictions parameters fully unrestricted model. Note method used confirmatory analyses.  bf_* function alias main function. info, particular specifying correct priors factors 2 levels, see Bayes factors vignette.","code":""},{"path":"https://easystats.github.io/bayestestR/reference/bayesfactor_restricted.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Bayes Factors (BF) for Order Restricted Models — bayesfactor_restricted","text":"","code":"bayesfactor_restricted(   posterior,   hypothesis,   prior = NULL,   verbose = TRUE,   ... )  bf_restricted(posterior, hypothesis, prior = NULL, verbose = TRUE, ...)  # S3 method for stanreg bayesfactor_restricted(   posterior,   hypothesis,   prior = NULL,   verbose = TRUE,   effects = c(\"fixed\", \"random\", \"all\"),   component = c(\"conditional\", \"zi\", \"zero_inflated\", \"all\"),   ... )  # S3 method for brmsfit bayesfactor_restricted(   posterior,   hypothesis,   prior = NULL,   verbose = TRUE,   effects = c(\"fixed\", \"random\", \"all\"),   component = c(\"conditional\", \"zi\", \"zero_inflated\", \"all\"),   ... )  # S3 method for blavaan bayesfactor_restricted(   posterior,   hypothesis,   prior = NULL,   verbose = TRUE,   ... )  # S3 method for emmGrid bayesfactor_restricted(   posterior,   hypothesis,   prior = NULL,   verbose = TRUE,   ... )  # S3 method for bayesfactor_restricted as.logical(x, which = c(\"posterior\", \"prior\"), ...)"},{"path":"https://easystats.github.io/bayestestR/reference/bayesfactor_restricted.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Bayes Factors (BF) for Order Restricted Models — bayesfactor_restricted","text":"posterior stanreg / brmsfit object, emmGrid data frame - representing posterior distribution(s) (see Details). hypothesis character vector specifying restrictions logical conditions (see examples ). prior object representing prior distribution (see Details). verbose Toggle warnings. ... Currently used. effects results fixed effects, random effects returned? applies mixed models. May abbreviated. component results parameters, parameters conditional model zero-inflated part model returned? May abbreviated. applies brms-models. x object class bayesfactor_restricted logical matrix posterior prior distribution(s)?","code":""},{"path":"https://easystats.github.io/bayestestR/reference/bayesfactor_restricted.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Bayes Factors (BF) for Order Restricted Models — bayesfactor_restricted","text":"data frame containing (log) Bayes factor representing evidence un-restricted model (Use .numeric() extract non-log Bayes factors; see examples). (bool_results attribute contains results sample, indicating included hypothesized restriction.)","code":""},{"path":"https://easystats.github.io/bayestestR/reference/bayesfactor_restricted.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Bayes Factors (BF) for Order Restricted Models — bayesfactor_restricted","text":"method used compute Bayes factors order-restricted models vs un-restricted models setting order restriction prior posterior distributions (Morey & Wagenmakers, 2013).  (Though possible use bayesfactor_restricted() test interval restrictions, suitable testing order restrictions; see examples).","code":""},{"path":"https://easystats.github.io/bayestestR/reference/bayesfactor_restricted.html","id":"setting-the-correct-prior","dir":"Reference","previous_headings":"","what":"Setting the correct prior","title":"Bayes Factors (BF) for Order Restricted Models — bayesfactor_restricted","text":"computation Bayes factors, model priors must proper priors (least flat, preferable informative); priors alternative get wider, likelihood null value(s) increases, extreme completely flat priors null infinitely favorable alternative (called Jeffreys-Lindley-Bartlett paradox). Thus, ever try (want) compute Bayes factor informed prior.  (Note default, brms::brm() uses flat priors fixed-effects; See example .)  important provide correct prior meaningful results. posterior numerical vector, prior also numerical vector. posterior data.frame, prior also data.frame, matching column order. posterior stanreg, brmsfit supported Bayesian model: prior can set NULL, case prior samples drawn internally. prior can also model equivalent posterior samples priors . See unupdate(). Note: posterior brmsfit_multiple model, prior must provided. posterior emmGrid / emm_list object: prior also emmGrid / emm_list object equivalent posterior created model priors samples . See unupdate(). prior can also original (posterior) model. , function try update emmGrid / emm_list use unupdate()d prior-model. (done brmsfit models.) Note: emmGrid undergone transformations (\"log\", \"response\", etc.), regriding, prior must emmGrid object, stated .","code":""},{"path":"https://easystats.github.io/bayestestR/reference/bayesfactor_restricted.html","id":"interpreting-bayes-factors","dir":"Reference","previous_headings":"","what":"Interpreting Bayes Factors","title":"Bayes Factors (BF) for Order Restricted Models — bayesfactor_restricted","text":"Bayes factor greater 1 can interpreted evidence null, one convention Bayes factor greater 3 can considered \"substantial\" evidence null (vice versa, Bayes factor smaller 1/3 indicates substantial evidence favor null-model) (Wetzels et al. 2011).","code":""},{"path":"https://easystats.github.io/bayestestR/reference/bayesfactor_restricted.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Bayes Factors (BF) for Order Restricted Models — bayesfactor_restricted","text":"Morey, R. D., & Wagenmakers, E. J. (2014). Simple relation Bayesian order-restricted point-null hypothesis tests. Statistics & Probability Letters, 92, 121-124. Morey, R. D., & Rouder, J. N. (2011). Bayes factor approaches testing interval null hypotheses. Psychological methods, 16(4), 406. Morey, R. D. (Jan, 2015). Multiple Comparisons BayesFactor, Part 2 – order restrictions. Retrieved https://richarddmorey.org/category/order-restrictions/.","code":""},{"path":"https://easystats.github.io/bayestestR/reference/bayesfactor_restricted.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Bayes Factors (BF) for Order Restricted Models — bayesfactor_restricted","text":"","code":"set.seed(444) library(bayestestR) prior <- data.frame(   A = rnorm(500),   B = rnorm(500),   C = rnorm(500) )  posterior <- data.frame(   A = rnorm(500, .4, 0.7),   B = rnorm(500, -.2, 0.4),   C = rnorm(500, 0, 0.5) )  hyps <- c(   \"A > B & B > C\",   \"A > B & A > C\",   \"C > A\" )   (b <- bayesfactor_restricted(posterior, hypothesis = hyps, prior = prior)) #> Bayes Factor (Order-Restriction) #>  #> Hypothesis    P(Prior) P(Posterior)    BF #> A > B & B > C     0.16         0.23  1.39 #> A > B & A > C     0.36         0.59  1.61 #> C > A             0.46         0.34 0.742 #>  #> * Bayes factors for the restricted model vs. the un-restricted model.  bool <- as.logical(b, which = \"posterior\") head(bool) #>      A > B & B > C A > B & A > C C > A #> [1,]          TRUE          TRUE FALSE #> [2,]          TRUE          TRUE FALSE #> [3,]          TRUE          TRUE FALSE #> [4,]         FALSE          TRUE FALSE #> [5,]         FALSE         FALSE  TRUE #> [6,]         FALSE          TRUE FALSE   see::plots(   plot(estimate_density(posterior)),   # distribution **conditional** on the restrictions   plot(estimate_density(posterior[bool[, hyps[1]], ])) + ggplot2::ggtitle(hyps[1]),   plot(estimate_density(posterior[bool[, hyps[2]], ])) + ggplot2::ggtitle(hyps[2]),   plot(estimate_density(posterior[bool[, hyps[3]], ])) + ggplot2::ggtitle(hyps[3]),   guides = \"collect\" )  # \\dontrun{ # rstanarm models # --------------- data(\"mtcars\")  fit_stan <- rstanarm::stan_glm(mpg ~ wt + cyl + am,   data = mtcars, refresh = 0 ) hyps <- c(   \"am > 0 & cyl < 0\",   \"cyl < 0\",   \"wt - cyl > 0\" )  bayesfactor_restricted(fit_stan, hypothesis = hyps) #> Sampling priors, please wait... #> Bayes Factor (Order-Restriction) #>  #> Hypothesis       P(Prior) P(Posterior)    BF #> am > 0 & cyl < 0     0.25         0.56  2.25 #> cyl < 0              0.50         1.00  1.99 #> wt - cyl > 0         0.50         0.10 0.197 #>  #> * Bayes factors for the restricted model vs. the un-restricted model. # } # \\dontrun{ # emmGrid objects # --------------- # replicating http://bayesfactor.blogspot.com/2015/01/multiple-comparisons-with-bayesfactor-2.html data(\"disgust\") contrasts(disgust$condition) <- contr.equalprior_pairs # see vignette fit_model <- rstanarm::stan_glm(score ~ condition, data = disgust, family = gaussian()) #>  #> SAMPLING FOR MODEL 'continuous' NOW (CHAIN 1). #> Chain 1:  #> Chain 1: Gradient evaluation took 1.8e-05 seconds #> Chain 1: 1000 transitions using 10 leapfrog steps per transition would take 0.18 seconds. #> Chain 1: Adjust your expectations accordingly! #> Chain 1:  #> Chain 1:  #> Chain 1: Iteration:    1 / 2000 [  0%]  (Warmup) #> Chain 1: Iteration:  200 / 2000 [ 10%]  (Warmup) #> Chain 1: Iteration:  400 / 2000 [ 20%]  (Warmup) #> Chain 1: Iteration:  600 / 2000 [ 30%]  (Warmup) #> Chain 1: Iteration:  800 / 2000 [ 40%]  (Warmup) #> Chain 1: Iteration: 1000 / 2000 [ 50%]  (Warmup) #> Chain 1: Iteration: 1001 / 2000 [ 50%]  (Sampling) #> Chain 1: Iteration: 1200 / 2000 [ 60%]  (Sampling) #> Chain 1: Iteration: 1400 / 2000 [ 70%]  (Sampling) #> Chain 1: Iteration: 1600 / 2000 [ 80%]  (Sampling) #> Chain 1: Iteration: 1800 / 2000 [ 90%]  (Sampling) #> Chain 1: Iteration: 2000 / 2000 [100%]  (Sampling) #> Chain 1:  #> Chain 1:  Elapsed Time: 0.039 seconds (Warm-up) #> Chain 1:                0.05 seconds (Sampling) #> Chain 1:                0.089 seconds (Total) #> Chain 1:  #>  #> SAMPLING FOR MODEL 'continuous' NOW (CHAIN 2). #> Chain 2:  #> Chain 2: Gradient evaluation took 1.1e-05 seconds #> Chain 2: 1000 transitions using 10 leapfrog steps per transition would take 0.11 seconds. #> Chain 2: Adjust your expectations accordingly! #> Chain 2:  #> Chain 2:  #> Chain 2: Iteration:    1 / 2000 [  0%]  (Warmup) #> Chain 2: Iteration:  200 / 2000 [ 10%]  (Warmup) #> Chain 2: Iteration:  400 / 2000 [ 20%]  (Warmup) #> Chain 2: Iteration:  600 / 2000 [ 30%]  (Warmup) #> Chain 2: Iteration:  800 / 2000 [ 40%]  (Warmup) #> Chain 2: Iteration: 1000 / 2000 [ 50%]  (Warmup) #> Chain 2: Iteration: 1001 / 2000 [ 50%]  (Sampling) #> Chain 2: Iteration: 1200 / 2000 [ 60%]  (Sampling) #> Chain 2: Iteration: 1400 / 2000 [ 70%]  (Sampling) #> Chain 2: Iteration: 1600 / 2000 [ 80%]  (Sampling) #> Chain 2: Iteration: 1800 / 2000 [ 90%]  (Sampling) #> Chain 2: Iteration: 2000 / 2000 [100%]  (Sampling) #> Chain 2:  #> Chain 2:  Elapsed Time: 0.039 seconds (Warm-up) #> Chain 2:                0.052 seconds (Sampling) #> Chain 2:                0.091 seconds (Total) #> Chain 2:  #>  #> SAMPLING FOR MODEL 'continuous' NOW (CHAIN 3). #> Chain 3:  #> Chain 3: Gradient evaluation took 1.1e-05 seconds #> Chain 3: 1000 transitions using 10 leapfrog steps per transition would take 0.11 seconds. #> Chain 3: Adjust your expectations accordingly! #> Chain 3:  #> Chain 3:  #> Chain 3: Iteration:    1 / 2000 [  0%]  (Warmup) #> Chain 3: Iteration:  200 / 2000 [ 10%]  (Warmup) #> Chain 3: Iteration:  400 / 2000 [ 20%]  (Warmup) #> Chain 3: Iteration:  600 / 2000 [ 30%]  (Warmup) #> Chain 3: Iteration:  800 / 2000 [ 40%]  (Warmup) #> Chain 3: Iteration: 1000 / 2000 [ 50%]  (Warmup) #> Chain 3: Iteration: 1001 / 2000 [ 50%]  (Sampling) #> Chain 3: Iteration: 1200 / 2000 [ 60%]  (Sampling) #> Chain 3: Iteration: 1400 / 2000 [ 70%]  (Sampling) #> Chain 3: Iteration: 1600 / 2000 [ 80%]  (Sampling) #> Chain 3: Iteration: 1800 / 2000 [ 90%]  (Sampling) #> Chain 3: Iteration: 2000 / 2000 [100%]  (Sampling) #> Chain 3:  #> Chain 3:  Elapsed Time: 0.039 seconds (Warm-up) #> Chain 3:                0.05 seconds (Sampling) #> Chain 3:                0.089 seconds (Total) #> Chain 3:  #>  #> SAMPLING FOR MODEL 'continuous' NOW (CHAIN 4). #> Chain 4:  #> Chain 4: Gradient evaluation took 1e-05 seconds #> Chain 4: 1000 transitions using 10 leapfrog steps per transition would take 0.1 seconds. #> Chain 4: Adjust your expectations accordingly! #> Chain 4:  #> Chain 4:  #> Chain 4: Iteration:    1 / 2000 [  0%]  (Warmup) #> Chain 4: Iteration:  200 / 2000 [ 10%]  (Warmup) #> Chain 4: Iteration:  400 / 2000 [ 20%]  (Warmup) #> Chain 4: Iteration:  600 / 2000 [ 30%]  (Warmup) #> Chain 4: Iteration:  800 / 2000 [ 40%]  (Warmup) #> Chain 4: Iteration: 1000 / 2000 [ 50%]  (Warmup) #> Chain 4: Iteration: 1001 / 2000 [ 50%]  (Sampling) #> Chain 4: Iteration: 1200 / 2000 [ 60%]  (Sampling) #> Chain 4: Iteration: 1400 / 2000 [ 70%]  (Sampling) #> Chain 4: Iteration: 1600 / 2000 [ 80%]  (Sampling) #> Chain 4: Iteration: 1800 / 2000 [ 90%]  (Sampling) #> Chain 4: Iteration: 2000 / 2000 [100%]  (Sampling) #> Chain 4:  #> Chain 4:  Elapsed Time: 0.037 seconds (Warm-up) #> Chain 4:                0.051 seconds (Sampling) #> Chain 4:                0.088 seconds (Total) #> Chain 4:   em_condition <- emmeans::emmeans(fit_model, ~condition) #> Warning: Model has 0 prior weights, but we recovered 150 rows of data. #> So prior weights were ignored. hyps <- c(\"lemon < control & control < sulfur\")  bayesfactor_restricted(em_condition, prior = fit_model, hypothesis = hyps) #> Sampling priors, please wait... #> Warning: Model has 0 prior weights, but we recovered 150 rows of data. #> So prior weights were ignored. #> Bayes Factor (Order-Restriction) #>  #> Hypothesis                         P(Prior) P(Posterior)   BF #> lemon < control & control < sulfur     0.17         0.75 4.28 #>  #> * Bayes factors for the restricted model vs. the un-restricted model. # > # Bayes Factor (Order-Restriction) # > # >                          Hypothesis P(Prior) P(Posterior)   BF # >  lemon < control & control < sulfur     0.17         0.75 4.49 # > --- # > Bayes factors for the restricted model vs. the un-restricted model. # }"},{"path":"https://easystats.github.io/bayestestR/reference/bayestestR-package.html","id":null,"dir":"Reference","previous_headings":"","what":"bayestestR: Describing Effects and their Uncertainty, Existence and Significance within the Bayesian Framework — bayestestR-package","title":"bayestestR: Describing Effects and their Uncertainty, Existence and Significance within the Bayesian Framework — bayestestR-package","text":"Existing R packages allow users easily fit large variety models extract visualize posterior draws. However, packages return limited set indices (e.g., point-estimates CIs). bayestestR provides comprehensive consistent set functions analyze describe posterior distributions generated variety models objects, including popular modeling packages rstanarm, brms BayesFactor. References: Makowski et al. (2019) doi:10.21105/joss.01541 Makowski et al. (2019) doi:10.3389/fpsyg.2019.02767","code":""},{"path":"https://easystats.github.io/bayestestR/reference/bayestestR-package.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"bayestestR: Describing Effects and their Uncertainty, Existence and Significance within the Bayesian Framework — bayestestR-package","text":"bayestestR","code":""},{"path":[]},{"path":"https://easystats.github.io/bayestestR/reference/bayestestR-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"bayestestR: Describing Effects and their Uncertainty, Existence and Significance within the Bayesian Framework — bayestestR-package","text":"Maintainer: Dominique Makowski dom.makowski@gmail.com (ORCID) (@Dom_Makowski) Authors: Daniel Lüdecke d.luedecke@uke.de (ORCID) (@strengejacke) Mattan S. Ben-Shachar matanshm@post.bgu.ac.il (ORCID) (@mattansb) Indrajeet Patil patilindrajeet.science@gmail.com (ORCID) (@patilindrajeets) Michael D. Wilson michael.d.wilson@curtin.edu.au (ORCID) Brenton M. Wiernik brenton@wiernik.org (ORCID) (@bmwiernik) contributors: Paul-Christian Bürkner paul.buerkner@gmail.com [reviewer] Tristan Mahr tristan.mahr@wisc.edu (ORCID) [reviewer] Henrik Singmann singmann@gmail.com (ORCID) [contributor] Quentin F. Gronau (ORCID) [contributor] Sam Crawley sam@crawley.nz (ORCID) [contributor]","code":""},{"path":"https://easystats.github.io/bayestestR/reference/bci.html","id":null,"dir":"Reference","previous_headings":"","what":"Bias Corrected and Accelerated Interval (BCa) — bci","title":"Bias Corrected and Accelerated Interval (BCa) — bci","text":"Compute Bias Corrected Accelerated Interval (BCa) posterior distributions.","code":""},{"path":"https://easystats.github.io/bayestestR/reference/bci.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Bias Corrected and Accelerated Interval (BCa) — bci","text":"","code":"bci(x, ...)  bcai(x, ...)  # S3 method for numeric bci(x, ci = 0.95, verbose = TRUE, ...)  # S3 method for data.frame bci(x, ci = 0.95, verbose = TRUE, ...)  # S3 method for MCMCglmm bci(x, ci = 0.95, verbose = TRUE, ...)  # S3 method for sim.merMod bci(   x,   ci = 0.95,   effects = c(\"fixed\", \"random\", \"all\"),   parameters = NULL,   verbose = TRUE,   ... )  # S3 method for sim bci(x, ci = 0.95, parameters = NULL, verbose = TRUE, ...)  # S3 method for emmGrid bci(x, ci = 0.95, verbose = TRUE, ...)  # S3 method for stanreg bci(   x,   ci = 0.95,   effects = c(\"fixed\", \"random\", \"all\"),   component = c(\"location\", \"all\", \"conditional\", \"smooth_terms\", \"sigma\",     \"distributional\", \"auxiliary\"),   parameters = NULL,   verbose = TRUE,   ... )  # S3 method for brmsfit bci(   x,   ci = 0.95,   effects = c(\"fixed\", \"random\", \"all\"),   component = c(\"conditional\", \"zi\", \"zero_inflated\", \"all\"),   parameters = NULL,   verbose = TRUE,   ... )  # S3 method for BFBayesFactor bci(x, ci = 0.95, verbose = TRUE, ...)"},{"path":"https://easystats.github.io/bayestestR/reference/bci.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Bias Corrected and Accelerated Interval (BCa) — bci","text":"x Vector representing posterior distribution, data frame vectors. Can also Bayesian model. bayestestR supports wide range models (see, example, methods(\"hdi\")) documented 'Usage' section, methods classes mostly resemble arguments .numeric .data.framemethods. ... Currently used. ci Value vector probability (credible) interval - CI (0 1) estimated. Default .95 (95%). verbose Toggle warnings. effects results fixed effects, random effects returned? applies mixed models. May abbreviated. parameters Regular expression pattern describes parameters returned. Meta-parameters (like lp__ prior_) filtered default, parameters typically appear summary() returned. Use parameters select specific parameters output. component results parameters, parameters conditional model zero-inflated part model returned? May abbreviated. applies brms-models.","code":""},{"path":"https://easystats.github.io/bayestestR/reference/bci.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Bias Corrected and Accelerated Interval (BCa) — bci","text":"data frame following columns: Parameter model parameter(s), x model-object. x vector, column missing. CI probability credible interval. CI_low, CI_high lower upper credible interval limits parameters.","code":""},{"path":"https://easystats.github.io/bayestestR/reference/bci.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Bias Corrected and Accelerated Interval (BCa) — bci","text":"Unlike equal-tailed intervals (see eti()) typically exclude 2.5% tail distribution always include median, HDI equal-tailed therefore always includes mode(s) posterior distributions. can useful better represent credibility mass distribution, HDI also limitations. See spi() details.  95% 89% Credible Intervals (CI) two reasonable ranges characterize uncertainty related estimation (see discussion differences two values).  89% intervals (ci = 0.89) deemed stable , instance, 95% intervals (Kruschke, 2014). effective sample size least 10.000 recommended one wants estimate 95% intervals high precision (Kruschke, 2014, p. 183ff). Unfortunately, default number posterior samples Bayes packages (e.g., rstanarm brms) 4.000 (thus, might want increase fitting model). Moreover, 89 indicates arbitrariness interval limits - remarkable property highest prime number exceed already unstable 95% threshold (McElreath, 2015).  However, 95% advantages . instance, shares (case normal posterior distribution) intuitive relationship standard deviation conveys accurate image (artificial) bounds distribution. Also, wider, makes analyses conservative (.e., probability covering 0 larger 95% CI lower ranges 89%), good thing context reproducibility crisis.  95% equal-tailed interval (ETI) 2.5% distribution either side limits. indicates 2.5th percentile 97.5h percentile. symmetric distributions, two methods computing credible intervals, ETI HDI, return similar results.  case skewed distributions. Indeed, possible parameter values ETI lower credibility (less probable) parameter values outside ETI. property seems undesirable summary credible values distribution.  hand, ETI range change transformations applied distribution (instance, log odds scale probabilities): lower higher bounds transformed distribution correspond transformed lower higher bounds original distribution. contrary, applying transformations distribution change resulting HDI.","code":""},{"path":"https://easystats.github.io/bayestestR/reference/bci.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Bias Corrected and Accelerated Interval (BCa) — bci","text":"DiCiccio, T. J. B. Efron. (1996). Bootstrap Confidence Intervals. Statistical Science. 11(3): 189–212. 10.1214/ss/1032280214","code":""},{"path":[]},{"path":"https://easystats.github.io/bayestestR/reference/bci.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Bias Corrected and Accelerated Interval (BCa) — bci","text":"","code":"posterior <- rnorm(1000) bci(posterior) #> 95% ETI: [-1.78, 2.11] bci(posterior, ci = c(0.80, 0.89, 0.95)) #> Equal-Tailed Interval #>  #> 80% ETI       |       89% ETI |       95% ETI #> --------------------------------------------- #> [-1.17, 1.34] | [-1.52, 1.70] | [-1.78, 2.11]"},{"path":"https://easystats.github.io/bayestestR/reference/bic_to_bf.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert BIC indices to Bayes Factors via the BIC-approximation method. — bic_to_bf","title":"Convert BIC indices to Bayes Factors via the BIC-approximation method. — bic_to_bf","text":"difference two Bayesian information criterion (BIC) indices two models can used approximate Bayes factors via:  $$BF_{10} = e^{(BIC_0 - BIC_1)/2}$$","code":""},{"path":"https://easystats.github.io/bayestestR/reference/bic_to_bf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert BIC indices to Bayes Factors via the BIC-approximation method. — bic_to_bf","text":"","code":"bic_to_bf(bic, denominator, log = FALSE)"},{"path":"https://easystats.github.io/bayestestR/reference/bic_to_bf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert BIC indices to Bayes Factors via the BIC-approximation method. — bic_to_bf","text":"bic vector BIC values. denominator BIC value use denominator (test ). log TRUE, return log(BF).","code":""},{"path":"https://easystats.github.io/bayestestR/reference/bic_to_bf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert BIC indices to Bayes Factors via the BIC-approximation method. — bic_to_bf","text":"Bayes Factors corresponding BIC values denominator.","code":""},{"path":"https://easystats.github.io/bayestestR/reference/bic_to_bf.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Convert BIC indices to Bayes Factors via the BIC-approximation method. — bic_to_bf","text":"Wagenmakers, E. J. (2007). practical solution pervasive problems p values. Psychonomic bulletin & review, 14(5), 779-804","code":""},{"path":"https://easystats.github.io/bayestestR/reference/bic_to_bf.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert BIC indices to Bayes Factors via the BIC-approximation method. — bic_to_bf","text":"","code":"bic1 <- BIC(lm(Sepal.Length ~ 1, data = iris)) bic2 <- BIC(lm(Sepal.Length ~ Species, data = iris)) bic3 <- BIC(lm(Sepal.Length ~ Species + Petal.Length, data = iris)) bic4 <- BIC(lm(Sepal.Length ~ Species * Petal.Length, data = iris))  bic_to_bf(c(bic1, bic2, bic3, bic4), denominator = bic1) #> [1] 1.000000e+00 1.695852e+29 5.843105e+55 2.203243e+54"},{"path":"https://easystats.github.io/bayestestR/reference/check_prior.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if Prior is Informative — check_prior","title":"Check if Prior is Informative — check_prior","text":"Performs simple test check whether prior informative posterior. idea, accompanying heuristics, discussed blogpost.","code":""},{"path":"https://easystats.github.io/bayestestR/reference/check_prior.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if Prior is Informative — check_prior","text":"","code":"check_prior(model, method = \"gelman\", simulate_priors = TRUE, ...)"},{"path":"https://easystats.github.io/bayestestR/reference/check_prior.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if Prior is Informative — check_prior","text":"model stanreg, stanfit, brmsfit, blavaan, MCMCglmm object. method Can \"gelman\" \"lakeland\". \"gelman\" method, SD posterior 0.1 times SD prior, prior considered informative. \"lakeland\" method, prior considered informative posterior falls within 95% HDI prior. simulate_priors prior distributions simulated using simulate_prior() (default; faster) sampled via unupdate() (slower, accurate). ... Currently used.","code":""},{"path":"https://easystats.github.io/bayestestR/reference/check_prior.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if Prior is Informative — check_prior","text":"data frame two columns: parameter names quality prior (might \"informative\", \"uninformative\") \"determinable\" prior distribution determined).","code":""},{"path":"https://easystats.github.io/bayestestR/reference/check_prior.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Check if Prior is Informative — check_prior","text":"https://statmodeling.stat.columbia.edu/2019/08/10/","code":""},{"path":"https://easystats.github.io/bayestestR/reference/check_prior.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check if Prior is Informative — check_prior","text":"","code":"# \\dontrun{ library(bayestestR) if (require(\"rstanarm\")) {   model <- stan_glm(mpg ~ wt + am, data = mtcars, chains = 1, refresh = 0)   check_prior(model, method = \"gelman\")   check_prior(model, method = \"lakeland\")    # An extreme example where both methods diverge:   model <- stan_glm(mpg ~ wt,     data = mtcars[1:3, ],     prior = normal(-3.3, 1, FALSE),     prior_intercept = normal(0, 1000, FALSE),     refresh = 0   )   check_prior(model, method = \"gelman\")   check_prior(model, method = \"lakeland\")   # can provide visual confirmation to the Lakeland method   plot(si(model, verbose = FALSE)) }  # }"},{"path":"https://easystats.github.io/bayestestR/reference/ci.html","id":null,"dir":"Reference","previous_headings":"","what":"Confidence/Credible/Compatibility Interval (CI) — ci","title":"Confidence/Credible/Compatibility Interval (CI) — ci","text":"Compute Confidence/Credible/Compatibility Intervals (CI) Support Intervals (SI) Bayesian frequentist models. Documentation accessible :","code":""},{"path":"https://easystats.github.io/bayestestR/reference/ci.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Confidence/Credible/Compatibility Interval (CI) — ci","text":"","code":"ci(x, ...)  # S3 method for numeric ci(x, ci = 0.95, method = \"ETI\", verbose = TRUE, BF = 1, ...)  # S3 method for data.frame ci(x, ci = 0.95, method = \"ETI\", verbose = TRUE, BF = 1, ...)  # S3 method for sim.merMod ci(   x,   ci = 0.95,   method = \"ETI\",   effects = c(\"fixed\", \"random\", \"all\"),   parameters = NULL,   verbose = TRUE,   ... )  # S3 method for sim ci(x, ci = 0.95, method = \"ETI\", parameters = NULL, verbose = TRUE, ...)  # S3 method for stanreg ci(   x,   ci = 0.95,   method = \"ETI\",   effects = c(\"fixed\", \"random\", \"all\"),   component = c(\"location\", \"all\", \"conditional\", \"smooth_terms\", \"sigma\",     \"distributional\", \"auxiliary\"),   parameters = NULL,   verbose = TRUE,   BF = 1,   ... )  # S3 method for brmsfit ci(   x,   ci = 0.95,   method = \"ETI\",   effects = c(\"fixed\", \"random\", \"all\"),   component = c(\"conditional\", \"zi\", \"zero_inflated\", \"all\"),   parameters = NULL,   verbose = TRUE,   BF = 1,   ... )  # S3 method for BFBayesFactor ci(x, ci = 0.95, method = \"ETI\", verbose = TRUE, BF = 1, ...)  # S3 method for MCMCglmm ci(x, ci = 0.95, method = \"ETI\", verbose = TRUE, ...)"},{"path":"https://easystats.github.io/bayestestR/reference/ci.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Confidence/Credible/Compatibility Interval (CI) — ci","text":"x stanreg brmsfit model, vector representing posterior distribution. ... Currently used. ci Value vector probability CI (0 1) estimated. Default .95 (95%). method Can 'ETI' (default), 'HDI', 'BCI', 'SPI' 'SI'. verbose Toggle warnings. BF amount support required included support interval. effects results fixed effects, random effects returned? applies mixed models. May abbreviated. parameters Regular expression pattern describes parameters returned. Meta-parameters (like lp__ prior_) filtered default, parameters typically appear summary() returned. Use parameters select specific parameters output. component results parameters, parameters conditional model zero-inflated part model returned? May abbreviated. applies brms-models.","code":""},{"path":"https://easystats.github.io/bayestestR/reference/ci.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Confidence/Credible/Compatibility Interval (CI) — ci","text":"data frame following columns: Parameter model parameter(s), x model-object. x vector, column missing. CI probability credible interval. CI_low, CI_high lower upper credible interval limits parameters.","code":""},{"path":"https://easystats.github.io/bayestestR/reference/ci.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Confidence/Credible/Compatibility Interval (CI) — ci","text":"Bayesian models Frequentist models","code":""},{"path":"https://easystats.github.io/bayestestR/reference/ci.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Confidence/Credible/Compatibility Interval (CI) — ci","text":"comes interpretation, recommend thinking CI terms \"uncertainty\" \"compatibility\" interval, latter defined “Given value interval background assumptions, data seem surprising” (Gelman & Greenland 2019).  also plot()-method implemented see-package.","code":""},{"path":"https://easystats.github.io/bayestestR/reference/ci.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Confidence/Credible/Compatibility Interval (CI) — ci","text":"Gelman , Greenland S. confidence intervals better termed \"uncertainty intervals\"? BMJ 2019;l5381. 10.1136/bmj.l5381","code":""},{"path":[]},{"path":"https://easystats.github.io/bayestestR/reference/ci.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Confidence/Credible/Compatibility Interval (CI) — ci","text":"","code":"library(bayestestR)  posterior <- rnorm(1000) ci(posterior, method = \"ETI\") #> 95% ETI: [-2.00, 1.96] ci(posterior, method = \"HDI\") #> 95% HDI: [-1.91, 2.03]  df <- data.frame(replicate(4, rnorm(100))) ci(df, method = \"ETI\", ci = c(0.80, 0.89, 0.95)) #> Equal-Tailed Interval #>  #> Parameter |       80% ETI |       89% ETI |       95% ETI #> --------------------------------------------------------- #> X1        | [-1.46, 1.35] | [-1.70, 1.63] | [-1.94, 1.94] #> X2        | [-1.21, 1.34] | [-1.51, 1.71] | [-1.81, 2.08] #> X3        | [-1.20, 1.19] | [-1.54, 1.48] | [-2.02, 1.71] #> X4        | [-1.22, 1.51] | [-1.88, 1.61] | [-2.20, 1.82] ci(df, method = \"HDI\", ci = c(0.80, 0.89, 0.95)) #> Highest Density Interval #>  #> Parameter |       80% HDI |       89% HDI |       95% HDI #> --------------------------------------------------------- #> X1        | [-1.38, 1.37] | [-1.95, 1.37] | [-1.77, 2.17] #> X2        | [-1.20, 1.35] | [-1.64, 1.52] | [-2.15, 1.80] #> X3        | [-1.21, 1.17] | [-1.46, 1.56] | [-2.07, 1.72] #> X4        | [-1.03, 1.52] | [-1.45, 1.74] | [-2.34, 1.71]  model <- suppressWarnings(   stan_glm(mpg ~ wt, data = mtcars, chains = 2, iter = 200, refresh = 0) ) ci(model, method = \"ETI\", ci = c(0.80, 0.89)) #> Equal-Tailed Interval #>  #> Parameter   |        80% ETI |        89% ETI | Effects |   Component #> --------------------------------------------------------------------- #> (Intercept) | [34.59, 39.93] | [34.12, 40.56] |   fixed | conditional #> wt          | [-6.10, -4.52] | [-6.27, -4.33] |   fixed | conditional ci(model, method = \"HDI\", ci = c(0.80, 0.89)) #> Highest Density Interval  #>  #> Parameter   |        80% HDI |        89% HDI #> --------------------------------------------- #> (Intercept) | [34.36, 39.67] | [34.20, 40.60] #> wt          | [-6.09, -4.51] | [-6.37, -4.47] bf <- ttestBF(x = rnorm(100, 1, 1)) ci(bf, method = \"ETI\") #> Equal-Tailed Interval #>  #> Parameter  |      95% ETI #> ------------------------- #> Difference | [0.80, 1.23] ci(bf, method = \"HDI\") #> Highest Density Interval #>  #> Parameter  |      95% HDI #> ------------------------- #> Difference | [0.81, 1.24] model <- emtrends(model, ~1, \"wt\") #> Warning: Model has 0 prior weights, but we recovered 32 rows of data. #> So prior weights were ignored. ci(model, method = \"ETI\") #> Equal-Tailed Interval #>  #> Parameter |        95% ETI #> -------------------------- #> overall   | [-6.37, -4.20] ci(model, method = \"HDI\") #> Highest Density Interval #>  #> Parameter |        95% HDI #> -------------------------- #> overall   | [-6.37, -4.18]"},{"path":"https://easystats.github.io/bayestestR/reference/contr.equalprior.html","id":null,"dir":"Reference","previous_headings":"","what":"Contrast Matrices for Equal Marginal Priors in Bayesian Estimation — contr.equalprior","title":"Contrast Matrices for Equal Marginal Priors in Bayesian Estimation — contr.equalprior","text":"Build contrasts factors equal marginal priors levels. 3 functions give orthogonal contrasts, scaled differently allow different prior specifications (see 'Details'). Implementation Singmann & Gronau's bfrms, following description Rouder, Morey, Speckman, & Province (2012, p. 363).","code":""},{"path":"https://easystats.github.io/bayestestR/reference/contr.equalprior.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Contrast Matrices for Equal Marginal Priors in Bayesian Estimation — contr.equalprior","text":"","code":"contr.equalprior(n, contrasts = TRUE, sparse = FALSE)  contr.equalprior_pairs(n, contrasts = TRUE, sparse = FALSE)  contr.equalprior_deviations(n, contrasts = TRUE, sparse = FALSE)"},{"path":"https://easystats.github.io/bayestestR/reference/contr.equalprior.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Contrast Matrices for Equal Marginal Priors in Bayesian Estimation — contr.equalprior","text":"n vector levels factor, number levels. contrasts logical indicating whether contrasts     computed. sparse logical indicating result sparse     (class dgCMatrix), using     package Matrix.","code":""},{"path":"https://easystats.github.io/bayestestR/reference/contr.equalprior.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Contrast Matrices for Equal Marginal Priors in Bayesian Estimation — contr.equalprior","text":"matrix n rows k columns, k=n-1 contrasts TRUE k=n contrasts FALSE.","code":""},{"path":"https://easystats.github.io/bayestestR/reference/contr.equalprior.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Contrast Matrices for Equal Marginal Priors in Bayesian Estimation — contr.equalprior","text":"using stats::contr.treatment, dummy variable difference level reference level. useful setting different priors coefficient, used one trying set general prior differences means, (well stats::contr.sum others) results unequal marginal priors means difference .   can see priors means (narrow prior), likewise pairwise differences (priors differences narrow). solution use one methods provided , result marginally equal priors means differences . Though obscure interpretation parameters, setting equal priors means differences important useful specifying equal priors means factor differences correct estimation Bayes factors contrasts order restrictions multi-level factors (k>2). See info specifying correct priors factors 2 levels Bayes factors vignette. NOTE: setting priors dummy variables, always: Use priors centered 0! location/centered priors meaningless! Use identically-scaled priors dummy variables single factor! contr.equalprior returns original orthogonal-normal contrasts described Rouder, Morey, Speckman, & Province (2012, p. 363). Setting contrasts = FALSE returns \\(I_{n} - \\frac{1}{n}\\) matrix.","code":"library(brms)  data <- data.frame(   group = factor(rep(LETTERS[1:4], each = 3)),   y = rnorm(12) )  contrasts(data$group) # R's default contr.treatment #>   B C D #> A 0 0 0 #> B 1 0 0 #> C 0 1 0 #> D 0 0 1  model_prior <- brm(   y ~ group, data = data,   sample_prior = \"only\",   # Set the same priors on the 3 dummy variable   # (Using an arbitrary scale)   prior = set_prior(\"normal(0, 10)\", coef = c(\"groupB\", \"groupC\", \"groupD\")) )  est <- emmeans::emmeans(model_prior, pairwise ~ group)  point_estimate(est, centr = \"mean\", disp = TRUE) #> Point Estimate #> #> Parameter |  Mean |    SD #> ------------------------- #> A         | -0.01 |  6.35 #> B         | -0.10 |  9.59 #> C         |  0.11 |  9.55 #> D         | -0.16 |  9.52 #> A - B     |  0.10 |  9.94 #> A - C     | -0.12 |  9.96 #> A - D     |  0.15 |  9.87 #> B - C     | -0.22 | 14.38 #> B - D     |  0.05 | 14.14 #> C - D     |  0.27 | 14.00"},{"path":"https://easystats.github.io/bayestestR/reference/contr.equalprior.html","id":"contr-equalprior-pairs","dir":"Reference","previous_headings":"","what":"contr.equalprior_pairs","title":"Contrast Matrices for Equal Marginal Priors in Bayesian Estimation — contr.equalprior","text":"Useful setting priors terms pairwise differences means - scales priors defines prior distribution pair-wise differences pairwise differences (e.g., - B, B - C, etc.).   means prior distribution, distribution differences matches prior set \"normal(0, 10)\". Success!","code":"contrasts(data$group) <- contr.equalprior_pairs contrasts(data$group) #>         [,1]       [,2]       [,3] #> A  0.0000000  0.6123724  0.0000000 #> B -0.1893048 -0.2041241  0.5454329 #> C -0.3777063 -0.2041241 -0.4366592 #> D  0.5670111 -0.2041241 -0.1087736  model_prior <- brm(   y ~ group, data = data,   sample_prior = \"only\",   # Set the same priors on the 3 dummy variable   # (Using an arbitrary scale)   prior = set_prior(\"normal(0, 10)\", coef = c(\"group1\", \"group2\", \"group3\")) )  est <- emmeans(model_prior, pairwise ~ group)  point_estimate(est, centr = \"mean\", disp = TRUE) #> Point Estimate #> #> Parameter |  Mean |    SD #> ------------------------- #> A         | -0.31 |  7.46 #> B         | -0.24 |  7.47 #> C         | -0.34 |  7.50 #> D         | -0.30 |  7.25 #> A - B     | -0.08 | 10.00 #> A - C     |  0.03 | 10.03 #> A - D     | -0.01 |  9.85 #> B - C     |  0.10 | 10.28 #> B - D     |  0.06 |  9.94 #> C - D     | -0.04 | 10.18"},{"path":"https://easystats.github.io/bayestestR/reference/contr.equalprior.html","id":"contr-equalprior-deviations","dir":"Reference","previous_headings":"","what":"contr.equalprior_deviations","title":"Contrast Matrices for Equal Marginal Priors in Bayesian Estimation — contr.equalprior","text":"Useful setting priors terms deviations mean grand mean - scales priors defines prior distribution distance (, ) mean one levels might overall mean. (See examples.)","code":""},{"path":"https://easystats.github.io/bayestestR/reference/contr.equalprior.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Contrast Matrices for Equal Marginal Priors in Bayesian Estimation — contr.equalprior","text":"Rouder, J. N., Morey, R. D., Speckman, P. L., & Province, J. M. (2012). Default Bayes factors ANOVA designs. Journal Mathematical Psychology, 56(5), 356-374. https://doi.org/10.1016/j.jmp.2012.08.001","code":""},{"path":"https://easystats.github.io/bayestestR/reference/contr.equalprior.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Contrast Matrices for Equal Marginal Priors in Bayesian Estimation — contr.equalprior","text":"","code":"contr.equalprior(2) # Q_2 in Rouder et al. (2012, p. 363) #>            [,1] #> [1,] -0.7071068 #> [2,]  0.7071068  contr.equalprior(5) # equivalent to Q_5 in Rouder et al. (2012, p. 363) #>            [,1]       [,2]          [,3]       [,4] #> [1,]  0.0000000  0.8944272  0.000000e+00  0.0000000 #> [2,]  0.7962740 -0.2236068  0.000000e+00  0.3405111 #> [3,] -0.5864616 -0.2236068 -6.993624e-17  0.6372306 #> [4,] -0.1049062 -0.2236068 -7.071068e-01 -0.4888708 #> [5,] -0.1049062 -0.2236068  7.071068e-01 -0.4888708  ## check decomposition Q3 <- contr.equalprior(3) Q3 %*% t(Q3) ## 2/3 on diagonal and -1/3 on off-diagonal elements #>            [,1]       [,2]       [,3] #> [1,]  0.6666667 -0.3333333 -0.3333333 #> [2,] -0.3333333  0.6666667 -0.3333333 #> [3,] -0.3333333 -0.3333333  0.6666667"},{"path":"https://easystats.github.io/bayestestR/reference/convert_bayesian_as_frequentist.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert (refit) a Bayesian model to frequentist — convert_bayesian_as_frequentist","title":"Convert (refit) a Bayesian model to frequentist — convert_bayesian_as_frequentist","text":"Refit Bayesian model frequentist. Can useful comparisons.","code":""},{"path":"https://easystats.github.io/bayestestR/reference/convert_bayesian_as_frequentist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert (refit) a Bayesian model to frequentist — convert_bayesian_as_frequentist","text":"","code":"convert_bayesian_as_frequentist(model, data = NULL, REML = TRUE)  bayesian_as_frequentist(model, data = NULL, REML = TRUE)"},{"path":"https://easystats.github.io/bayestestR/reference/convert_bayesian_as_frequentist.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert (refit) a Bayesian model to frequentist — convert_bayesian_as_frequentist","text":"model Bayesian model. data Data used model. NULL, try extract model. REML mixed effects, models estimated using restricted maximum likelihood (REML) (TRUE, default) maximum likelihood (FALSE)?","code":""},{"path":"https://easystats.github.io/bayestestR/reference/convert_bayesian_as_frequentist.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert (refit) a Bayesian model to frequentist — convert_bayesian_as_frequentist","text":"","code":"# \\donttest{ # Rstanarm ---------------------- if (require(\"rstanarm\")) {   # Simple regressions   model <- stan_glm(Sepal.Length ~ Species,     data = iris, chains = 2, refresh = 0   )   bayesian_as_frequentist(model) } #>  #> Call: #> stats::lm(formula = formula$conditional, data = data) #>  #> Coefficients: #>       (Intercept)  Speciesversicolor   Speciesvirginica   #>             5.006              0.930              1.582   #>  # }  # \\dontrun{ if (require(\"rstanarm\")) {   model <- stan_glm(vs ~ mpg,     family = \"binomial\",     data = mtcars, chains = 2, refresh = 0   )   bayesian_as_frequentist(model)    # Mixed models   model <- stan_glmer(Sepal.Length ~ Petal.Length + (1 | Species),     data = iris, chains = 2, refresh = 0   )   bayesian_as_frequentist(model)    model <- stan_glmer(vs ~ mpg + (1 | cyl),     family = \"binomial\",     data = mtcars, chains = 2, refresh = 0   )   bayesian_as_frequentist(model) } #> Generalized linear mixed model fit by maximum likelihood (Laplace #>   Approximation) [glmerMod] #>  Family: binomial  ( logit ) #> Formula: vs ~ mpg + (1 | cyl) #>    Data: data #>      AIC      BIC   logLik deviance df.resid  #>  31.1738  35.5710 -12.5869  25.1738       29  #> Random effects: #>  Groups Name        Std.Dev. #>  cyl    (Intercept) 1.925    #> Number of obs: 32, groups:  cyl, 3 #> Fixed Effects: #> (Intercept)          mpg   #>     -3.9227       0.1723   # }"},{"path":"https://easystats.github.io/bayestestR/reference/cwi.html","id":null,"dir":"Reference","previous_headings":"","what":"Curvewise Intervals (CWI) — cwi","title":"Curvewise Intervals (CWI) — cwi","text":"Compute Curvewise interval (CWI) (also called \"simultaneous interval\" \"joint interval\") posterior distributions using ggdist::curve_interval(). Whereas typical \"pointwise intervals\" contain xx% posterior single parameter, joint/curvewise intervals contain xx% posterior distribution parameters.","code":""},{"path":"https://easystats.github.io/bayestestR/reference/cwi.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Curvewise Intervals (CWI) — cwi","text":"","code":"cwi(x, ...)  # S3 method for data.frame cwi(x, ci = 0.95, ...)"},{"path":"https://easystats.github.io/bayestestR/reference/cwi.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Curvewise Intervals (CWI) — cwi","text":"x Vector representing posterior distribution, data frame vectors. Can also Bayesian model. bayestestR supports wide range models (see, example, methods(\"hdi\")) documented 'Usage' section, methods classes mostly resemble arguments .numeric .data.framemethods. ... Currently used. ci Value vector probability (credible) interval - CI (0 1) estimated. Default .95 (95%).","code":""},{"path":"https://easystats.github.io/bayestestR/reference/cwi.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Curvewise Intervals (CWI) — cwi","text":"data frame following columns: Parameter model parameter(s), x model-object. x vector, column missing. CI probability credible interval. CI_low, CI_high lower upper credible interval limits parameters.","code":""},{"path":"https://easystats.github.io/bayestestR/reference/cwi.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Curvewise Intervals (CWI) — cwi","text":"Applied model predictions, pointwise intervals contain xx% predicted response values conditional specific predictor values. contrast, curvewise intervals contain xx% predicted response values across predictor values. Put another way, curvewise intervals contain xx% full prediction lines model. details, see ggdist documentation curvewise intervals.","code":""},{"path":[]},{"path":"https://easystats.github.io/bayestestR/reference/cwi.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Curvewise Intervals (CWI) — cwi","text":"","code":"# \\donttest{ library(bayestestR)  if (require(\"ggplot2\") && require(\"rstanarm\") && require(\"ggdist\")) {   # Generate data =============================================   k <- 11 # number of curves (iterations)   n <- 201 # number of rows   data <- data.frame(x = seq(-15, 15, length.out = n))    # Simulate iterations as new columns   for (i in 1:k) {     data[paste0(\"iter_\", i)] <- dnorm(data$x, seq(-5, 5, length.out = k)[i], 3)   }    # Note: first, we need to transpose the data to have iters as rows   iters <- datawizard::data_transpose(data[paste0(\"iter_\", 1:k)])    # Compute Median   data$Median <- point_estimate(iters)[[\"Median\"]]    # Compute Credible Intervals ================================    # Compute ETI (default type of CI)   data[c(\"ETI_low\", \"ETI_high\")] <- eti(iters, ci = 0.5)[c(\"CI_low\", \"CI_high\")]    # Compute CWI   # ggdist::curve_interval(reshape_iterations(data), iter_value .width = 0.5)    # Visualization =============================================   ggplot(data, aes(x = x, y = Median)) +     geom_ribbon(aes(ymin = ETI_low, ymax = ETI_high), fill = \"red\", alpha = 0.3) +     geom_line(linewidth = 1) +     geom_line(       data = reshape_iterations(data),       aes(y = iter_value, group = iter_group),       alpha = 0.3     ) } #> Loading required package: ggplot2 #> Loading required package: ggdist #>  #> Attaching package: ‘ggdist’ #> The following objects are masked from ‘package:brms’: #>  #>     dstudent_t, pstudent_t, qstudent_t, rstudent_t #> The following object is masked from ‘package:bayestestR’: #>  #>     hdi  # }"},{"path":"https://easystats.github.io/bayestestR/reference/density_at.html","id":null,"dir":"Reference","previous_headings":"","what":"Density Probability at a Given Value — density_at","title":"Density Probability at a Given Value — density_at","text":"Compute density value given point distribution (.e., value y axis value x distribution).","code":""},{"path":"https://easystats.github.io/bayestestR/reference/density_at.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Density Probability at a Given Value — density_at","text":"","code":"density_at(posterior, x, precision = 2^10, method = \"kernel\", ...)"},{"path":"https://easystats.github.io/bayestestR/reference/density_at.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Density Probability at a Given Value — density_at","text":"posterior Vector representing posterior distribution. x value get approximate probability. precision Number points density data. See n parameter density. method Density estimation method. Can \"kernel\" (default), \"logspline\" \"KernSmooth\". ... Currently used.","code":""},{"path":"https://easystats.github.io/bayestestR/reference/density_at.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Density Probability at a Given Value — density_at","text":"","code":"library(bayestestR) posterior <- distribution_normal(n = 10) density_at(posterior, 0) #> [1] 0.3207106 density_at(posterior, c(0, 1)) #> [1] 0.3207106 0.2375008"},{"path":"https://easystats.github.io/bayestestR/reference/describe_posterior.html","id":null,"dir":"Reference","previous_headings":"","what":"Describe Posterior Distributions — describe_posterior","title":"Describe Posterior Distributions — describe_posterior","text":"Compute indices relevant describe characterize posterior distributions.","code":""},{"path":"https://easystats.github.io/bayestestR/reference/describe_posterior.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Describe Posterior Distributions — describe_posterior","text":"","code":"describe_posterior(posteriors, ...)  # S3 method for numeric describe_posterior(   posteriors,   centrality = \"median\",   dispersion = FALSE,   ci = 0.95,   ci_method = \"eti\",   test = c(\"p_direction\", \"rope\"),   rope_range = \"default\",   rope_ci = 0.95,   keep_iterations = FALSE,   bf_prior = NULL,   BF = 1,   ... )  # S3 method for stanreg describe_posterior(   posteriors,   centrality = \"median\",   dispersion = FALSE,   ci = 0.95,   ci_method = \"eti\",   test = c(\"p_direction\", \"rope\"),   rope_range = \"default\",   rope_ci = 0.95,   keep_iterations = FALSE,   bf_prior = NULL,   diagnostic = c(\"ESS\", \"Rhat\"),   priors = FALSE,   effects = c(\"fixed\", \"random\", \"all\"),   component = c(\"location\", \"all\", \"conditional\", \"smooth_terms\", \"sigma\",     \"distributional\", \"auxiliary\"),   parameters = NULL,   BF = 1,   ... )  # S3 method for brmsfit describe_posterior(   posteriors,   centrality = \"median\",   dispersion = FALSE,   ci = 0.95,   ci_method = \"eti\",   test = c(\"p_direction\", \"rope\"),   rope_range = \"default\",   rope_ci = 0.95,   keep_iterations = FALSE,   bf_prior = NULL,   diagnostic = c(\"ESS\", \"Rhat\"),   effects = c(\"fixed\", \"random\", \"all\"),   component = c(\"conditional\", \"zi\", \"zero_inflated\", \"all\", \"location\",     \"distributional\", \"auxiliary\"),   parameters = NULL,   BF = 1,   priors = FALSE,   ... )"},{"path":"https://easystats.github.io/bayestestR/reference/describe_posterior.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Describe Posterior Distributions — describe_posterior","text":"posteriors vector, data frame model posterior draws. bayestestR supports wide range models (see methods(\"describe_posterior\")) documented 'Usage' section, methods classes mostly resemble arguments .numeric method. ... Additional arguments passed methods. centrality point-estimates (centrality indices) compute.  Character (vector) list one options: \"median\", \"mean\", \"MAP\" \"\". dispersion Logical, TRUE, computes indices dispersion related estimate(s) (SD MAD mean median, respectively). ci Value vector probability CI (0 1) estimated. Default .95 (95%). ci_method type index used Credible Interval. Can \"ETI\" (default, see eti()), \"HDI\" (see hdi()), \"BCI\" (see bci()), \"SPI\" (see spi()), \"SI\" (see si()). test indices effect existence compute. Character (vector) list one options: \"p_direction\" (\"pd\"), \"rope\", \"p_map\", \"equivalence_test\" (\"equitest\"), \"bayesfactor\" (\"bf\") \"\" compute tests. \"test\", corresponding bayestestR function called (e.g. rope() p_direction()) results included summary output. rope_range ROPE's lower higher bounds. list two values (e.g., c(-0.1, 0.1)) \"default\". \"default\", bounds set x +- 0.1*SD(response). rope_ci Credible Interval (CI) probability, corresponding proportion HDI, use percentage ROPE. keep_iterations TRUE, keep iterations (draws) bootstrapped Bayesian models. added additional columns named iter_1, iter_2, .... can reshape long format running reshape_iterations(). bf_prior Distribution representing prior computation Bayes factors / SI. Used input posterior, otherwise (case models) ignored. BF amount support required included support interval. diagnostic Diagnostic metrics compute.  Character (vector) list one options: \"ESS\", \"Rhat\", \"MCSE\" \"\". priors Add prior used parameter. effects results fixed effects, random effects returned? applies mixed models. May abbreviated. component results parameters, parameters conditional model zero-inflated part model returned? May abbreviated. applies brms-models. parameters Regular expression pattern describes parameters returned. Meta-parameters (like lp__ prior_) filtered default, parameters typically appear summary() returned. Use parameters select specific parameters output.","code":""},{"path":"https://easystats.github.io/bayestestR/reference/describe_posterior.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Describe Posterior Distributions — describe_posterior","text":"One components point estimates (like posterior mean median), intervals tests can omitted summary output setting related argument NULL. example, test = NULL centrality = NULL return HDI (CI).","code":""},{"path":"https://easystats.github.io/bayestestR/reference/describe_posterior.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Describe Posterior Distributions — describe_posterior","text":"Makowski, D., Ben-Shachar, M. S., Chen, S. H. ., Lüdecke, D. (2019). Indices Effect Existence Significance Bayesian Framework. Frontiers Psychology 2019;10:2767. doi:10.3389/fpsyg.2019.02767 Region Practical Equivalence (ROPE) Bayes factors","code":""},{"path":"https://easystats.github.io/bayestestR/reference/describe_posterior.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Describe Posterior Distributions — describe_posterior","text":"","code":"library(bayestestR)  if (require(\"logspline\")) {   x <- rnorm(1000)   describe_posterior(x, verbose = FALSE)   describe_posterior(x,     centrality = \"all\",     dispersion = TRUE,     test = \"all\",     verbose = FALSE   )   describe_posterior(x, ci = c(0.80, 0.90), verbose = FALSE)    df <- data.frame(replicate(4, rnorm(100)))   describe_posterior(df, verbose = FALSE)   describe_posterior(     df,     centrality = \"all\",     dispersion = TRUE,     test = \"all\",     verbose = FALSE   )   describe_posterior(df, ci = c(0.80, 0.90), verbose = FALSE)    df <- data.frame(replicate(4, rnorm(20)))   head(reshape_iterations(     describe_posterior(df, keep_iterations = TRUE, verbose = FALSE)   )) } #>   Parameter     Median   CI    CI_low  CI_high   pd ROPE_CI ROPE_low ROPE_high #> 1        X1 -0.2147310 0.95 -1.698070 1.422037 0.60    0.95     -0.1       0.1 #> 2        X2 -0.2111929 0.95 -2.382498 2.407703 0.55    0.95     -0.1       0.1 #> 3        X3  0.2226573 0.95 -1.955394 2.606282 0.55    0.95     -0.1       0.1 #> 4        X4 -0.2003640 0.95 -1.575063 0.609562 0.65    0.95     -0.1       0.1 #> 5        X1 -0.2147310 0.95 -1.698070 1.422037 0.60    0.95     -0.1       0.1 #> 6        X2 -0.2111929 0.95 -2.382498 2.407703 0.55    0.95     -0.1       0.1 #>   ROPE_Percentage iter_index iter_group iter_value #> 1      0.05555556          1          1  0.5133729 #> 2      0.11111111          2          1 -0.3562522 #> 3      0.05555556          3          1  1.3220376 #> 4      0.16666667          4          1  0.3424455 #> 5      0.05555556          1          2 -0.1388723 #> 6      0.11111111          2          2 -0.4961029 # \\dontrun{ # rstanarm models # ----------------------------------------------- if (require(\"rstanarm\") && require(\"emmeans\")) {   model <- stan_glm(mpg ~ wt + gear, data = mtcars, chains = 2, iter = 200, refresh = 0)   describe_posterior(model)   describe_posterior(model, centrality = \"all\", dispersion = TRUE, test = \"all\")   describe_posterior(model, ci = c(0.80, 0.90))    # emmeans estimates   # -----------------------------------------------   describe_posterior(emtrends(model, ~1, \"wt\")) } #> Warning: The largest R-hat is 1.05, indicating chains have not mixed. #> Running the chains for more iterations may help. See #> https://mc-stan.org/misc/warnings.html#r-hat #> Warning: Bulk Effective Samples Size (ESS) is too low, indicating posterior means and medians may be unreliable. #> Running the chains for more iterations may help. See #> https://mc-stan.org/misc/warnings.html#bulk-ess #> Warning: Tail Effective Samples Size (ESS) is too low, indicating posterior variances and tail quantiles may be unreliable. #> Running the chains for more iterations may help. See #> https://mc-stan.org/misc/warnings.html#tail-ess #> Warning: Bayes factors might not be precise. #>   For precise Bayes factors, sampling at least 40,000 posterior samples is #>   recommended. #> Warning: Model has 0 prior weights, but we recovered 32 rows of data. #> So prior weights were ignored. #> Summary of Posterior Distribution #>  #> Parameter | Median |         95% CI |   pd |          ROPE | % in ROPE #> ---------------------------------------------------------------------- #> overall   |  -5.37 | [-6.57, -4.25] | 100% | [-0.10, 0.10] |        0%  # BayesFactor objects # ----------------------------------------------- if (require(\"BayesFactor\")) {   bf <- ttestBF(x = rnorm(100, 1, 1))   describe_posterior(bf)   describe_posterior(bf, centrality = \"all\", dispersion = TRUE, test = \"all\")   describe_posterior(bf, ci = c(0.80, 0.90)) } #> Summary of Posterior Distribution #>  #> Parameter  | Median |       80% CI |       90% CI |   pd |          ROPE | % in ROPE |       BF |              Prior #> -------------------------------------------------------------------------------------------------------------------- #> Difference |   0.97 | [0.84, 1.09] | [0.81, 1.12] | 100% | [-0.09, 0.09] |        0% | 1.27e+15 | Cauchy (0 +- 0.71) # }"},{"path":"https://easystats.github.io/bayestestR/reference/describe_prior.html","id":null,"dir":"Reference","previous_headings":"","what":"Describe Priors — describe_prior","title":"Describe Priors — describe_prior","text":"Returns summary priors used model.","code":""},{"path":"https://easystats.github.io/bayestestR/reference/describe_prior.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Describe Priors — describe_prior","text":"","code":"describe_prior(model, ...)  # S3 method for brmsfit describe_prior(   model,   effects = c(\"fixed\", \"random\", \"all\"),   component = c(\"conditional\", \"zi\", \"zero_inflated\", \"all\", \"location\",     \"distributional\", \"auxiliary\"),   parameters = NULL,   ... )"},{"path":"https://easystats.github.io/bayestestR/reference/describe_prior.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Describe Priors — describe_prior","text":"model Bayesian model. ... Currently used. effects results fixed effects, random effects returned? applies mixed models. May abbreviated. component results parameters, parameters conditional model zero-inflated part model returned? May abbreviated. applies brms-models. parameters Regular expression pattern describes parameters returned. Meta-parameters (like lp__ prior_) filtered default, parameters typically appear summary() returned. Use parameters select specific parameters output.","code":""},{"path":"https://easystats.github.io/bayestestR/reference/describe_prior.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Describe Priors — describe_prior","text":"","code":"# \\dontrun{ library(bayestestR)  # rstanarm models # ----------------------------------------------- if (require(\"rstanarm\")) {   model <- rstanarm::stan_glm(mpg ~ wt + cyl, data = mtcars)   describe_prior(model) } #>  #> SAMPLING FOR MODEL 'continuous' NOW (CHAIN 1). #> Chain 1:  #> Chain 1: Gradient evaluation took 2e-05 seconds #> Chain 1: 1000 transitions using 10 leapfrog steps per transition would take 0.2 seconds. #> Chain 1: Adjust your expectations accordingly! #> Chain 1:  #> Chain 1:  #> Chain 1: Iteration:    1 / 2000 [  0%]  (Warmup) #> Chain 1: Iteration:  200 / 2000 [ 10%]  (Warmup) #> Chain 1: Iteration:  400 / 2000 [ 20%]  (Warmup) #> Chain 1: Iteration:  600 / 2000 [ 30%]  (Warmup) #> Chain 1: Iteration:  800 / 2000 [ 40%]  (Warmup) #> Chain 1: Iteration: 1000 / 2000 [ 50%]  (Warmup) #> Chain 1: Iteration: 1001 / 2000 [ 50%]  (Sampling) #> Chain 1: Iteration: 1200 / 2000 [ 60%]  (Sampling) #> Chain 1: Iteration: 1400 / 2000 [ 70%]  (Sampling) #> Chain 1: Iteration: 1600 / 2000 [ 80%]  (Sampling) #> Chain 1: Iteration: 1800 / 2000 [ 90%]  (Sampling) #> Chain 1: Iteration: 2000 / 2000 [100%]  (Sampling) #> Chain 1:  #> Chain 1:  Elapsed Time: 0.062 seconds (Warm-up) #> Chain 1:                0.059 seconds (Sampling) #> Chain 1:                0.121 seconds (Total) #> Chain 1:  #>  #> SAMPLING FOR MODEL 'continuous' NOW (CHAIN 2). #> Chain 2:  #> Chain 2: Gradient evaluation took 2e-05 seconds #> Chain 2: 1000 transitions using 10 leapfrog steps per transition would take 0.2 seconds. #> Chain 2: Adjust your expectations accordingly! #> Chain 2:  #> Chain 2:  #> Chain 2: Iteration:    1 / 2000 [  0%]  (Warmup) #> Chain 2: Iteration:  200 / 2000 [ 10%]  (Warmup) #> Chain 2: Iteration:  400 / 2000 [ 20%]  (Warmup) #> Chain 2: Iteration:  600 / 2000 [ 30%]  (Warmup) #> Chain 2: Iteration:  800 / 2000 [ 40%]  (Warmup) #> Chain 2: Iteration: 1000 / 2000 [ 50%]  (Warmup) #> Chain 2: Iteration: 1001 / 2000 [ 50%]  (Sampling) #> Chain 2: Iteration: 1200 / 2000 [ 60%]  (Sampling) #> Chain 2: Iteration: 1400 / 2000 [ 70%]  (Sampling) #> Chain 2: Iteration: 1600 / 2000 [ 80%]  (Sampling) #> Chain 2: Iteration: 1800 / 2000 [ 90%]  (Sampling) #> Chain 2: Iteration: 2000 / 2000 [100%]  (Sampling) #> Chain 2:  #> Chain 2:  Elapsed Time: 0.062 seconds (Warm-up) #> Chain 2:                0.058 seconds (Sampling) #> Chain 2:                0.12 seconds (Total) #> Chain 2:  #>  #> SAMPLING FOR MODEL 'continuous' NOW (CHAIN 3). #> Chain 3:  #> Chain 3: Gradient evaluation took 1.1e-05 seconds #> Chain 3: 1000 transitions using 10 leapfrog steps per transition would take 0.11 seconds. #> Chain 3: Adjust your expectations accordingly! #> Chain 3:  #> Chain 3:  #> Chain 3: Iteration:    1 / 2000 [  0%]  (Warmup) #> Chain 3: Iteration:  200 / 2000 [ 10%]  (Warmup) #> Chain 3: Iteration:  400 / 2000 [ 20%]  (Warmup) #> Chain 3: Iteration:  600 / 2000 [ 30%]  (Warmup) #> Chain 3: Iteration:  800 / 2000 [ 40%]  (Warmup) #> Chain 3: Iteration: 1000 / 2000 [ 50%]  (Warmup) #> Chain 3: Iteration: 1001 / 2000 [ 50%]  (Sampling) #> Chain 3: Iteration: 1200 / 2000 [ 60%]  (Sampling) #> Chain 3: Iteration: 1400 / 2000 [ 70%]  (Sampling) #> Chain 3: Iteration: 1600 / 2000 [ 80%]  (Sampling) #> Chain 3: Iteration: 1800 / 2000 [ 90%]  (Sampling) #> Chain 3: Iteration: 2000 / 2000 [100%]  (Sampling) #> Chain 3:  #> Chain 3:  Elapsed Time: 0.057 seconds (Warm-up) #> Chain 3:                0.056 seconds (Sampling) #> Chain 3:                0.113 seconds (Total) #> Chain 3:  #>  #> SAMPLING FOR MODEL 'continuous' NOW (CHAIN 4). #> Chain 4:  #> Chain 4: Gradient evaluation took 1.2e-05 seconds #> Chain 4: 1000 transitions using 10 leapfrog steps per transition would take 0.12 seconds. #> Chain 4: Adjust your expectations accordingly! #> Chain 4:  #> Chain 4:  #> Chain 4: Iteration:    1 / 2000 [  0%]  (Warmup) #> Chain 4: Iteration:  200 / 2000 [ 10%]  (Warmup) #> Chain 4: Iteration:  400 / 2000 [ 20%]  (Warmup) #> Chain 4: Iteration:  600 / 2000 [ 30%]  (Warmup) #> Chain 4: Iteration:  800 / 2000 [ 40%]  (Warmup) #> Chain 4: Iteration: 1000 / 2000 [ 50%]  (Warmup) #> Chain 4: Iteration: 1001 / 2000 [ 50%]  (Sampling) #> Chain 4: Iteration: 1200 / 2000 [ 60%]  (Sampling) #> Chain 4: Iteration: 1400 / 2000 [ 70%]  (Sampling) #> Chain 4: Iteration: 1600 / 2000 [ 80%]  (Sampling) #> Chain 4: Iteration: 1800 / 2000 [ 90%]  (Sampling) #> Chain 4: Iteration: 2000 / 2000 [100%]  (Sampling) #> Chain 4:  #> Chain 4:  Elapsed Time: 0.075 seconds (Warm-up) #> Chain 4:                0.052 seconds (Sampling) #> Chain 4:                0.127 seconds (Total) #> Chain 4:  #>     Parameter Prior_Distribution Prior_Location Prior_Scale #> 1 (Intercept)             normal       20.09062   15.067370 #> 2          wt             normal        0.00000   15.399106 #> 3         cyl             normal        0.00000    8.436748  # brms models # ----------------------------------------------- if (require(\"brms\")) {   model <- brms::brm(mpg ~ wt + cyl, data = mtcars)   describe_prior(model) } #> Compiling Stan program... #> Start sampling #>  #> SAMPLING FOR MODEL '2d19b3a372313df641edf05db5e9f303' NOW (CHAIN 1). #> Chain 1:  #> Chain 1: Gradient evaluation took 1.2e-05 seconds #> Chain 1: 1000 transitions using 10 leapfrog steps per transition would take 0.12 seconds. #> Chain 1: Adjust your expectations accordingly! #> Chain 1:  #> Chain 1:  #> Chain 1: Iteration:    1 / 2000 [  0%]  (Warmup) #> Chain 1: Iteration:  200 / 2000 [ 10%]  (Warmup) #> Chain 1: Iteration:  400 / 2000 [ 20%]  (Warmup) #> Chain 1: Iteration:  600 / 2000 [ 30%]  (Warmup) #> Chain 1: Iteration:  800 / 2000 [ 40%]  (Warmup) #> Chain 1: Iteration: 1000 / 2000 [ 50%]  (Warmup) #> Chain 1: Iteration: 1001 / 2000 [ 50%]  (Sampling) #> Chain 1: Iteration: 1200 / 2000 [ 60%]  (Sampling) #> Chain 1: Iteration: 1400 / 2000 [ 70%]  (Sampling) #> Chain 1: Iteration: 1600 / 2000 [ 80%]  (Sampling) #> Chain 1: Iteration: 1800 / 2000 [ 90%]  (Sampling) #> Chain 1: Iteration: 2000 / 2000 [100%]  (Sampling) #> Chain 1:  #> Chain 1:  Elapsed Time: 0.028307 seconds (Warm-up) #> Chain 1:                0.029078 seconds (Sampling) #> Chain 1:                0.057385 seconds (Total) #> Chain 1:  #>  #> SAMPLING FOR MODEL '2d19b3a372313df641edf05db5e9f303' NOW (CHAIN 2). #> Chain 2:  #> Chain 2: Gradient evaluation took 8e-06 seconds #> Chain 2: 1000 transitions using 10 leapfrog steps per transition would take 0.08 seconds. #> Chain 2: Adjust your expectations accordingly! #> Chain 2:  #> Chain 2:  #> Chain 2: Iteration:    1 / 2000 [  0%]  (Warmup) #> Chain 2: Iteration:  200 / 2000 [ 10%]  (Warmup) #> Chain 2: Iteration:  400 / 2000 [ 20%]  (Warmup) #> Chain 2: Iteration:  600 / 2000 [ 30%]  (Warmup) #> Chain 2: Iteration:  800 / 2000 [ 40%]  (Warmup) #> Chain 2: Iteration: 1000 / 2000 [ 50%]  (Warmup) #> Chain 2: Iteration: 1001 / 2000 [ 50%]  (Sampling) #> Chain 2: Iteration: 1200 / 2000 [ 60%]  (Sampling) #> Chain 2: Iteration: 1400 / 2000 [ 70%]  (Sampling) #> Chain 2: Iteration: 1600 / 2000 [ 80%]  (Sampling) #> Chain 2: Iteration: 1800 / 2000 [ 90%]  (Sampling) #> Chain 2: Iteration: 2000 / 2000 [100%]  (Sampling) #> Chain 2:  #> Chain 2:  Elapsed Time: 0.027752 seconds (Warm-up) #> Chain 2:                0.026642 seconds (Sampling) #> Chain 2:                0.054394 seconds (Total) #> Chain 2:  #>  #> SAMPLING FOR MODEL '2d19b3a372313df641edf05db5e9f303' NOW (CHAIN 3). #> Chain 3:  #> Chain 3: Gradient evaluation took 7e-06 seconds #> Chain 3: 1000 transitions using 10 leapfrog steps per transition would take 0.07 seconds. #> Chain 3: Adjust your expectations accordingly! #> Chain 3:  #> Chain 3:  #> Chain 3: Iteration:    1 / 2000 [  0%]  (Warmup) #> Chain 3: Iteration:  200 / 2000 [ 10%]  (Warmup) #> Chain 3: Iteration:  400 / 2000 [ 20%]  (Warmup) #> Chain 3: Iteration:  600 / 2000 [ 30%]  (Warmup) #> Chain 3: Iteration:  800 / 2000 [ 40%]  (Warmup) #> Chain 3: Iteration: 1000 / 2000 [ 50%]  (Warmup) #> Chain 3: Iteration: 1001 / 2000 [ 50%]  (Sampling) #> Chain 3: Iteration: 1200 / 2000 [ 60%]  (Sampling) #> Chain 3: Iteration: 1400 / 2000 [ 70%]  (Sampling) #> Chain 3: Iteration: 1600 / 2000 [ 80%]  (Sampling) #> Chain 3: Iteration: 1800 / 2000 [ 90%]  (Sampling) #> Chain 3: Iteration: 2000 / 2000 [100%]  (Sampling) #> Chain 3:  #> Chain 3:  Elapsed Time: 0.028008 seconds (Warm-up) #> Chain 3:                0.026868 seconds (Sampling) #> Chain 3:                0.054876 seconds (Total) #> Chain 3:  #>  #> SAMPLING FOR MODEL '2d19b3a372313df641edf05db5e9f303' NOW (CHAIN 4). #> Chain 4:  #> Chain 4: Gradient evaluation took 8e-06 seconds #> Chain 4: 1000 transitions using 10 leapfrog steps per transition would take 0.08 seconds. #> Chain 4: Adjust your expectations accordingly! #> Chain 4:  #> Chain 4:  #> Chain 4: Iteration:    1 / 2000 [  0%]  (Warmup) #> Chain 4: Iteration:  200 / 2000 [ 10%]  (Warmup) #> Chain 4: Iteration:  400 / 2000 [ 20%]  (Warmup) #> Chain 4: Iteration:  600 / 2000 [ 30%]  (Warmup) #> Chain 4: Iteration:  800 / 2000 [ 40%]  (Warmup) #> Chain 4: Iteration: 1000 / 2000 [ 50%]  (Warmup) #> Chain 4: Iteration: 1001 / 2000 [ 50%]  (Sampling) #> Chain 4: Iteration: 1200 / 2000 [ 60%]  (Sampling) #> Chain 4: Iteration: 1400 / 2000 [ 70%]  (Sampling) #> Chain 4: Iteration: 1600 / 2000 [ 80%]  (Sampling) #> Chain 4: Iteration: 1800 / 2000 [ 90%]  (Sampling) #> Chain 4: Iteration: 2000 / 2000 [100%]  (Sampling) #> Chain 4:  #> Chain 4:  Elapsed Time: 0.026787 seconds (Warm-up) #> Chain 4:                0.028802 seconds (Sampling) #> Chain 4:                0.055589 seconds (Total) #> Chain 4:  #>     Parameter Prior_Distribution Prior_Location Prior_Scale Prior_df #> 1 b_Intercept          student_t           19.2         5.4        3 #> 2        b_wt            uniform             NA          NA       NA #> 3       b_cyl            uniform             NA          NA       NA #> 4       sigma          student_t            0.0         5.4        3  # BayesFactor objects # ----------------------------------------------- if (require(\"BayesFactor\")) {   bf <- ttestBF(x = rnorm(100, 1, 1))   describe_prior(bf) } #>    Parameter Prior_Distribution Prior_Location Prior_Scale #> 1 Difference             cauchy              0   0.7071068 # }"},{"path":"https://easystats.github.io/bayestestR/reference/diagnostic_draws.html","id":null,"dir":"Reference","previous_headings":"","what":"Diagnostic values for each iteration — diagnostic_draws","title":"Diagnostic values for each iteration — diagnostic_draws","text":"Returns accumulated log-posterior, average Metropolis acceptance rate, divergent transitions, treedepth rather terminated evolution normally.","code":""},{"path":"https://easystats.github.io/bayestestR/reference/diagnostic_draws.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Diagnostic values for each iteration — diagnostic_draws","text":"","code":"diagnostic_draws(posteriors, ...)"},{"path":"https://easystats.github.io/bayestestR/reference/diagnostic_draws.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Diagnostic values for each iteration — diagnostic_draws","text":"posteriors stanreg, stanfit, brmsfit, blavaan object. ... Currently used.","code":""},{"path":"https://easystats.github.io/bayestestR/reference/diagnostic_draws.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Diagnostic values for each iteration — diagnostic_draws","text":"","code":"# \\dontrun{ set.seed(333)  if (require(\"brms\", quietly = TRUE)) {   model <- brm(mpg ~ wt * cyl * vs,     data = mtcars,     iter = 100, control = list(adapt_delta = 0.80),     refresh = 0   )   diagnostic_draws(model) } #> Compiling Stan program... #> Start sampling #> Warning: There were 64 transitions after warmup that exceeded the maximum treedepth. Increase max_treedepth above 10. See #> https://mc-stan.org/misc/warnings.html#maximum-treedepth-exceeded #> Warning: Examine the pairs() plot to diagnose sampling problems #> Warning: The largest R-hat is 1.52, indicating chains have not mixed. #> Running the chains for more iterations may help. See #> https://mc-stan.org/misc/warnings.html#r-hat #> Warning: Bulk Effective Samples Size (ESS) is too low, indicating posterior means and medians may be unreliable. #> Running the chains for more iterations may help. See #> https://mc-stan.org/misc/warnings.html#bulk-ess #> Warning: Tail Effective Samples Size (ESS) is too low, indicating posterior variances and tail quantiles may be unreliable. #> Running the chains for more iterations may help. See #> https://mc-stan.org/misc/warnings.html#tail-ess #>     Chain Iteration Acceptance_Rate  Step_Size Tree_Depth n_Leapfrog Divergent #> 1       1         1       0.9518223 0.03813651         10       1023         0 #> 2       1         2       0.9999675 0.03813651         10       1023         0 #> 3       1         3       0.9801007 0.03813651          9        767         0 #> 4       1         4       0.9750932 0.03813651         10       1023         0 #> 5       1         5       0.8717287 0.03813651         10       1023         0 #> 6       1         6       0.9997736 0.03813651          8        383         0 #> 7       1         7       0.9892475 0.03813651          6         63         0 #> 8       1         8       0.6868810 0.03813651          6         63         0 #> 9       1         9       0.9979884 0.03813651         10       1023         0 #> 10      1        10       0.8614224 0.03813651         10       1023         0 #> 11      1        11       0.9783541 0.03813651          7        127         0 #> 12      1        12       0.9915447 0.03813651          7        127         0 #> 13      1        13       0.9478282 0.03813651          7        127         0 #> 14      1        14       0.8969477 0.03813651          5         63         0 #> 15      1        15       0.9999776 0.03813651         10       1023         0 #> 16      1        16       0.9512513 0.03813651          6         63         0 #> 17      1        17       0.9689009 0.03813651          9        703         0 #> 18      1        18       0.9851710 0.03813651          5         31         0 #> 19      1        19       0.9696171 0.03813651          9       1023         0 #> 20      1        20       0.8047513 0.03813651          4         31         0 #> 21      1        21       0.8100535 0.03813651          6        127         0 #> 22      1        22       0.9813718 0.03813651          7        191         0 #> 23      1        23       0.9286945 0.03813651          7        255         0 #> 24      1        24       0.9541205 0.03813651          5         47         0 #> 25      1        25       0.9198108 0.03813651         10       1023         0 #> 26      1        26       0.9755696 0.03813651         10       1023         0 #> 27      1        27       0.9958205 0.03813651          6        127         0 #> 28      1        28       0.9831916 0.03813651         10       1023         0 #> 29      1        29       0.9998986 0.03813651          7        255         0 #> 30      1        30       0.9933605 0.03813651         10       1023         0 #> 31      1        31       0.9663187 0.03813651          9       1023         0 #> 32      1        32       0.9431863 0.03813651         10       1023         0 #> 33      1        33       0.9994200 0.03813651         10       1023         0 #> 34      1        34       0.9987293 0.03813651          6        127         0 #> 35      1        35       0.7650077 0.03813651          5         63         0 #> 36      1        36       0.9045024 0.03813651          8        351         0 #> 37      1        37       1.0000000 0.03813651          5         31         0 #> 38      1        38       0.9500080 0.03813651         10       1023         0 #> 39      1        39       0.8482122 0.03813651         10       1023         0 #> 40      1        40       0.9975702 0.03813651         10       1023         0 #> 41      1        41       0.9980460 0.03813651         10       1023         0 #> 42      1        42       0.9548004 0.03813651         10       1023         0 #> 43      1        43       0.9054731 0.03813651          8        511         0 #> 44      1        44       0.9958498 0.03813651          6        127         0 #> 45      1        45       0.8722416 0.03813651          7        127         0 #> 46      1        46       0.9175596 0.03813651          5         63         0 #> 47      1        47       0.9834023 0.03813651         10       1023         0 #> 48      1        48       0.9870499 0.03813651         10       1023         0 #> 49      1        49       0.8421329 0.03813651         10       1023         0 #> 50      1        50       0.9533279 0.03813651          8        447         0 #> 51      2         1       0.9942984 0.03742511          9       1023         0 #> 52      2         2       0.9974586 0.03742511          6        127         0 #> 53      2         3       0.9618087 0.03742511         10       1023         0 #> 54      2         4       0.9395077 0.03742511          7        127         0 #> 55      2         5       0.7058848 0.03742511          7        255         0 #> 56      2         6       0.9449148 0.03742511          8        511         0 #> 57      2         7       0.9533854 0.03742511          8        319         0 #> 58      2         8       0.9985742 0.03742511          6         63         0 #> 59      2         9       0.9741088 0.03742511          9        831         0 #> 60      2        10       0.8697726 0.03742511          6        127         0 #> 61      2        11       0.8979211 0.03742511          8        335         0 #> 62      2        12       0.9951917 0.03742511         10       1023         0 #> 63      2        13       0.9965731 0.03742511         10       1023         0 #> 64      2        14       0.9902518 0.03742511          3         15         0 #> 65      2        15       0.9329949 0.03742511          6         63         0 #> 66      2        16       0.9327242 0.03742511          6        127         0 #> 67      2        17       0.9661217 0.03742511         10       1023         0 #> 68      2        18       0.8880797 0.03742511         10       1023         0 #> 69      2        19       0.9333451 0.03742511          8        383         0 #> 70      2        20       1.0000000 0.03742511          4         31         0 #> 71      2        21       0.9932392 0.03742511          8        383         0 #> 72      2        22       0.9950198 0.03742511          6        127         0 #> 73      2        23       0.9823765 0.03742511          7        255         0 #> 74      2        24       0.8879894 0.03742511         10       1023         0 #> 75      2        25       0.9622887 0.03742511          7        127         0 #> 76      2        26       0.9639965 0.03742511          7        207         0 #> 77      2        27       0.9619045 0.03742511          7        207         0 #> 78      2        28       0.9894090 0.03742511          7        191         0 #> 79      2        29       0.9921125 0.03742511         10       1023         0 #> 80      2        30       0.6772717 0.03742511          9        767         0 #> 81      2        31       0.9272060 0.03742511          9        639         0 #> 82      2        32       0.9106396 0.03742511         10       1023         0 #> 83      2        33       0.6036875 0.03742511          7        127         0 #> 84      2        34       0.9668550 0.03742511         10       1023         0 #> 85      2        35       0.9739767 0.03742511          9        583         0 #> 86      2        36       0.9987048 0.03742511          6         63         0 #> 87      2        37       0.9998904 0.03742511          9        767         0 #> 88      2        38       0.9959910 0.03742511          6         63         0 #> 89      2        39       0.8637198 0.03742511          6         63         0 #> 90      2        40       0.9702056 0.03742511          8        383         0 #> 91      2        41       0.5560633 0.03742511          4         15         0 #> 92      2        42       0.9207831 0.03742511         10       1023         0 #> 93      2        43       0.9950492 0.03742511         10       1023         0 #> 94      2        44       0.9634650 0.03742511          7        191         0 #> 95      2        45       0.9852246 0.03742511          8        511         0 #> 96      2        46       0.9262220 0.03742511          9        767         0 #> 97      2        47       0.9465821 0.03742511          6        127         0 #> 98      2        48       0.9887467 0.03742511         10       1023         0 #> 99      2        49       0.9737241 0.03742511         10       1023         0 #> 100     2        50       0.7829408 0.03742511          8        447         0 #> 101     3         1       0.9848591 0.04010297          8        407         0 #> 102     3         2       0.8063506 0.04010297         10       1023         0 #> 103     3         3       0.9597859 0.04010297          6        127         0 #> 104     3         4       0.9203251 0.04010297          8        511         0 #> 105     3         5       0.9220852 0.04010297          6         63         0 #> 106     3         6       0.9674887 0.04010297          6         63         0 #> 107     3         7       0.9254870 0.04010297          7        135         0 #> 108     3         8       0.9936997 0.04010297         10       1023         0 #> 109     3         9       0.8589987 0.04010297         10       1023         0 #> 110     3        10       0.9098468 0.04010297          9        531         0 #> 111     3        11       1.0000000 0.04010297          6        127         0 #> 112     3        12       0.7646288 0.04010297         10       1023         0 #> 113     3        13       0.9881770 0.04010297          9        767         0 #> 114     3        14       0.9781391 0.04010297          8        447         0 #> 115     3        15       0.8776403 0.04010297         10       1023         0 #> 116     3        16       0.9997990 0.04010297          9        783         0 #> 117     3        17       0.9992967 0.04010297          8        511         0 #> 118     3        18       0.9827987 0.04010297         10       1023         0 #> 119     3        19       0.9947309 0.04010297         10       1023         0 #> 120     3        20       0.9997890 0.04010297          6         63         0 #> 121     3        21       0.9935902 0.04010297          9        575         0 #> 122     3        22       0.9869788 0.04010297          8        383         0 #> 123     3        23       0.9367410 0.04010297          6        127         0 #> 124     3        24       0.9221264 0.04010297          9        831         0 #> 125     3        25       0.9165130 0.04010297          9        575         0 #> 126     3        26       0.9680456 0.04010297          8        511         0 #> 127     3        27       0.9596899 0.04010297         10       1023         0 #> 128     3        28       0.9729233 0.04010297         10       1023         0 #> 129     3        29       0.6485087 0.04010297          9        575         0 #> 130     3        30       0.9482286 0.04010297          5         63         0 #> 131     3        31       0.9802466 0.04010297          7        223         0 #> 132     3        32       0.8061831 0.04010297          7        255         0 #> 133     3        33       0.9868143 0.04010297          6         63         0 #> 134     3        34       0.7887867 0.04010297          7        191         0 #> 135     3        35       0.9077475 0.04010297          8        511         0 #> 136     3        36       0.9949887 0.04010297          6         63         0 #> 137     3        37       0.7892307 0.04010297          6         63         0 #> 138     3        38       0.8572789 0.04010297          6        127         0 #> 139     3        39       0.9972253 0.04010297         10       1023         0 #> 140     3        40       0.6349430 0.04010297         10       1023         0 #> 141     3        41       0.9993413 0.04010297         10       1023         0 #> 142     3        42       0.9622146 0.04010297          9        959         0 #> 143     3        43       0.9376185 0.04010297          6        127         0 #> 144     3        44       0.9274533 0.04010297          4         31         0 #> 145     3        45       0.9858428 0.04010297         10       1023         0 #> 146     3        46       0.6741989 0.04010297          7        127         0 #> 147     3        47       0.9806186 0.04010297          7        127         0 #> 148     3        48       0.9254779 0.04010297          5         31         0 #> 149     3        49       0.9923296 0.04010297          9       1023         0 #> 150     3        50       0.9853857 0.04010297          6        127         0 #> 151     4         1       0.9877153 0.03294062          9        831         0 #> 152     4         2       0.9891490 0.03294062          3         15         0 #> 153     4         3       0.9708961 0.03294062          8        319         0 #> 154     4         4       0.9342205 0.03294062          6         63         0 #> 155     4         5       0.9928766 0.03294062          9        639         0 #> 156     4         6       0.8926433 0.03294062         10       1023         0 #> 157     4         7       0.9743889 0.03294062         10       1023         0 #> 158     4         8       0.7438761 0.03294062         10       1023         0 #> 159     4         9       0.9954311 0.03294062          7        175         0 #> 160     4        10       0.9866541 0.03294062         10       1023         0 #> 161     4        11       0.9999930 0.03294062         10       1023         0 #> 162     4        12       0.7637147 0.03294062          8        255         0 #> 163     4        13       0.9744280 0.03294062         10       1023         0 #> 164     4        14       0.9388204 0.03294062          8        255         0 #> 165     4        15       0.3840759 0.03294062         10       1023         0 #> 166     4        16       0.9518194 0.03294062         10       1023         0 #> 167     4        17       0.9620510 0.03294062         10       1023         0 #> 168     4        18       0.9258375 0.03294062          8        511         0 #> 169     4        19       0.9974698 0.03294062          6         63         0 #> 170     4        20       0.9558772 0.03294062          7        191         0 #> 171     4        21       0.9970313 0.03294062          6         63         0 #> 172     4        22       0.9844976 0.03294062          8        255         0 #> 173     4        23       0.9226927 0.03294062         10       1023         0 #> 174     4        24       0.9518987 0.03294062         10       1023         0 #> 175     4        25       0.9233124 0.03294062          7        127         0 #> 176     4        26       0.9884196 0.03294062         10       1023         0 #> 177     4        27       0.9222195 0.03294062         10       1023         0 #> 178     4        28       0.9159981 0.03294062          6         63         0 #> 179     4        29       0.9263841 0.03294062          6        127         0 #> 180     4        30       0.9996128 0.03294062         10       1023         0 #> 181     4        31       0.9894506 0.03294062          6        127         0 #> 182     4        32       0.6703441 0.03294062          7        191         0 #> 183     4        33       0.9549878 0.03294062          6         63         0 #> 184     4        34       0.8391503 0.03294062          9       1023         0 #> 185     4        35       0.9405409 0.03294062         10       1023         0 #> 186     4        36       0.7191308 0.03294062          8        307         0 #> 187     4        37       0.9374288 0.03294062          4         31         0 #> 188     4        38       0.7694806 0.03294062          8        255         0 #> 189     4        39       0.9537490 0.03294062          8        255         0 #> 190     4        40       0.9815695 0.03294062          7        255         0 #> 191     4        41       0.9431963 0.03294062          6         63         0 #> 192     4        42       0.9463757 0.03294062          9        639         0 #> 193     4        43       0.6797214 0.03294062         10       1023         0 #> 194     4        44       0.9999896 0.03294062         10       1023         0 #> 195     4        45       0.9989271 0.03294062          8        319         0 #> 196     4        46       0.9926023 0.03294062          5         31         0 #> 197     4        47       0.9725823 0.03294062          7        191         0 #> 198     4        48       0.9378215 0.03294062          6        127         0 #> 199     4        49       0.8758168 0.03294062          6        127         0 #> 200     4        50       0.9315004 0.03294062          6         63         0 #>       Energy LogPosterior #> 1   88.72823    -79.71584 #> 2   81.92644    -77.23319 #> 3   82.19129    -76.27791 #> 4   80.92778    -77.42208 #> 5   81.78190    -77.40304 #> 6   80.13995    -77.62974 #> 7   79.62431    -77.90486 #> 8   86.43148    -80.53134 #> 9   84.84117    -78.94113 #> 10  81.80098    -78.46512 #> 11  82.44757    -79.59165 #> 12  84.36834    -81.18719 #> 13  86.03105    -78.44942 #> 14  83.50406    -80.05956 #> 15  82.24766    -77.97604 #> 16  82.97318    -77.61000 #> 17  81.24064    -79.42491 #> 18  81.78653    -78.07333 #> 19  85.00530    -80.30828 #> 20  83.49064    -77.57779 #> 21  84.74905    -82.28676 #> 22  89.60564    -80.61505 #> 23  83.19326    -79.23986 #> 24  84.95224    -77.27530 #> 25  81.28760    -78.01322 #> 26  84.40696    -78.99492 #> 27  82.25258    -77.31538 #> 28  84.83239    -81.08728 #> 29  83.50600    -78.21385 #> 30  83.95334    -78.85135 #> 31  81.97159    -76.69703 #> 32  81.78577    -77.64265 #> 33  82.04647    -76.37772 #> 34  79.33122    -76.69094 #> 35  83.70297    -81.67730 #> 36  86.94710    -80.34568 #> 37  82.52421    -80.56450 #> 38  84.15626    -80.37233 #> 39  87.11964    -84.21521 #> 40  87.06091    -77.51564 #> 41  81.97318    -77.49202 #> 42  82.07997    -78.52180 #> 43  84.94396    -79.03051 #> 44  85.76894    -82.13167 #> 45  85.32383    -76.04260 #> 46  78.74831    -77.52916 #> 47  78.71520    -76.47894 #> 48  79.43565    -76.90393 #> 49  82.66804    -78.59361 #> 50  83.67092    -79.43890 #> 51  79.32337    -75.54376 #> 52  77.93457    -77.07975 #> 53  80.79541    -76.62784 #> 54  78.94448    -77.30344 #> 55  83.18548    -78.41630 #> 56  81.73124    -76.13328 #> 57  79.71571    -77.12949 #> 58  82.45967    -80.99307 #> 59  86.63004    -78.68252 #> 60  80.90197    -75.56304 #> 61  78.57726    -77.52539 #> 62  81.57386    -79.08522 #> 63  83.08388    -76.25277 #> 64  77.15956    -75.99794 #> 65  82.60475    -78.03709 #> 66  79.95994    -75.70662 #> 67  79.51085    -76.15356 #> 68  80.29491    -76.89533 #> 69  87.54931    -81.72495 #> 70  84.48559    -79.69225 #> 71  82.90181    -78.01387 #> 72  82.47913    -79.86994 #> 73  85.48778    -82.53606 #> 74  94.19511    -86.11703 #> 75  91.80439    -85.35257 #> 76  87.80509    -83.89761 #> 77  89.85155    -78.96379 #> 78  84.60154    -79.74314 #> 79  84.71451    -76.08671 #> 80  82.39951    -77.63566 #> 81  84.52350    -77.26972 #> 82  87.25980    -81.14223 #> 83  88.00177    -84.55655 #> 84  88.78878    -83.44046 #> 85  85.63780    -78.26291 #> 86  81.28065    -77.94392 #> 87  84.56182    -80.66676 #> 88  87.46071    -84.37307 #> 89  88.27048    -78.22719 #> 90  82.32215    -77.40941 #> 91  81.57453    -79.26815 #> 92  85.98493    -80.36687 #> 93  86.55434    -80.16466 #> 94  87.33378    -77.96720 #> 95  79.55679    -76.04721 #> 96  81.15887    -76.98332 #> 97  79.09947    -77.59816 #> 98  82.41465    -76.57522 #> 99  81.48408    -76.59515 #> 100 82.36937    -80.15097 #> 101 81.50629    -77.20981 #> 102 80.83496    -77.99517 #> 103 82.88055    -79.40865 #> 104 82.18305    -78.94940 #> 105 80.31226    -78.02839 #> 106 82.21259    -80.33124 #> 107 87.40305    -80.85359 #> 108 84.78344    -78.92884 #> 109 84.91727    -78.87204 #> 110 81.27093    -79.44832 #> 111 81.28217    -78.89515 #> 112 85.99862    -80.45754 #> 113 85.09058    -81.87135 #> 114 84.82064    -81.04850 #> 115 85.50438    -83.58423 #> 116 87.17266    -79.41205 #> 117 80.11866    -78.84906 #> 118 86.58425    -81.98979 #> 119 83.75640    -81.25949 #> 120 84.35811    -81.73645 #> 121 84.23923    -80.46270 #> 122 85.83805    -77.81735 #> 123 80.22976    -77.61183 #> 124 79.44234    -77.20299 #> 125 79.15253    -77.74725 #> 126 82.88915    -78.55748 #> 127 84.17852    -77.43028 #> 128 80.08496    -77.31208 #> 129 83.90934    -78.93080 #> 130 80.60665    -78.13348 #> 131 81.36774    -77.96599 #> 132 83.50240    -80.30777 #> 133 84.32425    -79.73869 #> 134 86.11630    -83.75447 #> 135 91.93614    -83.17443 #> 136 86.32658    -82.00492 #> 137 85.78508    -77.27715 #> 138 80.44121    -77.22325 #> 139 79.63163    -78.11702 #> 140 83.54012    -81.19119 #> 141 83.30596    -79.19406 #> 142 85.30550    -78.75429 #> 143 84.89073    -77.64972 #> 144 81.60666    -77.20680 #> 145 82.59583    -77.43128 #> 146 85.36940    -81.53244 #> 147 84.21347    -80.13813 #> 148 83.01565    -78.66367 #> 149 87.09991    -78.01638 #> 150 79.28678    -75.51478 #> 151 85.93475    -78.03875 #> 152 79.21686    -77.91080 #> 153 81.06906    -78.38143 #> 154 80.63429    -77.46983 #> 155 79.48405    -77.03045 #> 156 81.13265    -77.98983 #> 157 81.98902    -75.38256 #> 158 80.20409    -76.16568 #> 159 78.18199    -76.80631 #> 160 82.31416    -76.87809 #> 161 82.59499    -79.47412 #> 162 88.81766    -83.85114 #> 163 86.11125    -79.49297 #> 164 82.27910    -79.50611 #> 165 93.49763    -83.77884 #> 166 88.69710    -81.74681 #> 167 88.75043    -82.57774 #> 168 87.42097    -81.08728 #> 169 84.69918    -79.86064 #> 170 87.58994    -82.93310 #> 171 84.51690    -80.78678 #> 172 83.56889    -80.38814 #> 173 83.66370    -79.33916 #> 174 83.12177    -77.93584 #> 175 83.28170    -76.78482 #> 176 83.27314    -78.30721 #> 177 83.77400    -80.07098 #> 178 81.98020    -77.73988 #> 179 82.87082    -79.42171 #> 180 81.35242    -76.82008 #> 181 83.94805    -79.46088 #> 182 85.58450    -80.64997 #> 183 84.27251    -78.15703 #> 184 82.39802    -78.26349 #> 185 82.11357    -78.73302 #> 186 83.53299    -81.42431 #> 187 86.17695    -78.87642 #> 188 89.12022    -84.12258 #> 189 89.70747    -84.86539 #> 190 89.11327    -81.33055 #> 191 84.57640    -81.46297 #> 192 83.99530    -77.39721 #> 193 83.29539    -77.72249 #> 194 82.05603    -78.56741 #> 195 81.28343    -77.20728 #> 196 78.77535    -77.53008 #> 197 82.29409    -77.88978 #> 198 84.30232    -78.34842 #> 199 87.03334    -82.39521 #> 200 86.02024    -81.96460 # }"},{"path":"https://easystats.github.io/bayestestR/reference/diagnostic_posterior.html","id":null,"dir":"Reference","previous_headings":"","what":"Posteriors Sampling Diagnostic — diagnostic_posterior","title":"Posteriors Sampling Diagnostic — diagnostic_posterior","text":"Extract diagnostic metrics (Effective Sample Size (ESS), Rhat Monte Carlo Standard Error MCSE).","code":""},{"path":"https://easystats.github.io/bayestestR/reference/diagnostic_posterior.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Posteriors Sampling Diagnostic — diagnostic_posterior","text":"","code":"diagnostic_posterior(posteriors, diagnostic = c(\"ESS\", \"Rhat\"), ...)  # S3 method for stanreg diagnostic_posterior(   posteriors,   diagnostic = \"all\",   effects = c(\"fixed\", \"random\", \"all\"),   component = c(\"location\", \"all\", \"conditional\", \"smooth_terms\", \"sigma\",     \"distributional\", \"auxiliary\"),   parameters = NULL,   ... )  # S3 method for brmsfit diagnostic_posterior(   posteriors,   diagnostic = \"all\",   effects = c(\"fixed\", \"random\", \"all\"),   component = c(\"conditional\", \"zi\", \"zero_inflated\", \"all\"),   parameters = NULL,   ... )"},{"path":"https://easystats.github.io/bayestestR/reference/diagnostic_posterior.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Posteriors Sampling Diagnostic — diagnostic_posterior","text":"posteriors stanreg, stanfit, brmsfit, blavaan object. diagnostic Diagnostic metrics compute.  Character (vector) list one options: \"ESS\", \"Rhat\", \"MCSE\" \"\". ... Currently used. effects parameters fixed effects, random effects returned? applies mixed models. May abbreviated. component type parameters return, parameters conditional model, zero-inflated part model, dispersion term, instrumental variables marginal effects returned? Applies models zero-inflated /dispersion formula, models instrumental variables (called fixed-effects regressions), models marginal effects mfx. May abbreviated. Note conditional component also called count mean component, depending model. three convenient shortcuts: component = \"\" returns possible parameters. component = \"location\", location parameters conditional, zero_inflated, smooth_terms, instruments returned (everything fixed random effects - depending effects argument - auxiliary parameters). component = \"distributional\" (\"auxiliary\"), components like sigma, dispersion, beta precision (auxiliary parameters) returned. parameters Regular expression pattern describes parameters returned.","code":""},{"path":"https://easystats.github.io/bayestestR/reference/diagnostic_posterior.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Posteriors Sampling Diagnostic — diagnostic_posterior","text":"Effective Sample (ESS) large possible, although applications, effective sample size greater 1000 sufficient stable estimates (Bürkner, 2017). ESS corresponds number independent samples estimation power N autocorrelated samples. measure “much independent information autocorrelated chains” (Kruschke 2015, p182-3). Rhat closest 1. larger 1.1 (Gelman Rubin, 1992) 1.01 (Vehtari et al., 2019). split Rhat statistic quantifies consistency ensemble Markov chains. Monte Carlo Standard Error (MCSE) another measure accuracy chains. defined standard deviation chains divided effective sample size (formula mcse() Kruschke 2015, p. 187). MCSE “provides quantitative suggestion big estimation noise ”.","code":""},{"path":"https://easystats.github.io/bayestestR/reference/diagnostic_posterior.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Posteriors Sampling Diagnostic — diagnostic_posterior","text":"Gelman, ., & Rubin, D. B. (1992). Inference iterative simulation using multiple sequences. Statistical science, 7(4), 457-472. Vehtari, ., Gelman, ., Simpson, D., Carpenter, B., Bürkner, P. C. (2019). Rank-normalization, folding, localization: improved Rhat assessing convergence MCMC. arXiv preprint arXiv:1903.08008. Kruschke, J. (2014). Bayesian data analysis: tutorial R, JAGS, Stan. Academic Press.","code":""},{"path":"https://easystats.github.io/bayestestR/reference/diagnostic_posterior.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Posteriors Sampling Diagnostic — diagnostic_posterior","text":"","code":"# \\dontrun{ # rstanarm models # ----------------------------------------------- if (require(\"rstanarm\", quietly = TRUE)) {   model <- stan_glm(mpg ~ wt + gear, data = mtcars, chains = 2, iter = 200, refresh = 0)   diagnostic_posterior(model) } #> Warning: The largest R-hat is 1.13, indicating chains have not mixed. #> Running the chains for more iterations may help. See #> https://mc-stan.org/misc/warnings.html#r-hat #> Warning: Bulk Effective Samples Size (ESS) is too low, indicating posterior means and medians may be unreliable. #> Running the chains for more iterations may help. See #> https://mc-stan.org/misc/warnings.html#bulk-ess #> Warning: Tail Effective Samples Size (ESS) is too low, indicating posterior variances and tail quantiles may be unreliable. #> Running the chains for more iterations may help. See #> https://mc-stan.org/misc/warnings.html#tail-ess #> Warning: Markov chains did not converge! Do not analyze results! #>     Parameter      Rhat      ESS       MCSE #> 1 (Intercept) 0.9980336 182.6025 0.36283152 #> 2        gear 0.9917174 206.3058 0.06519599 #> 3          wt 0.9978902 186.7773 0.04770867  # brms models # ----------------------------------------------- if (require(\"brms\", quietly = TRUE)) {   model <- brms::brm(mpg ~ wt + cyl, data = mtcars)   diagnostic_posterior(model) } #> Compiling Stan program... #> Start sampling #>  #> SAMPLING FOR MODEL '2d19b3a372313df641edf05db5e9f303' NOW (CHAIN 1). #> Chain 1:  #> Chain 1: Gradient evaluation took 9e-06 seconds #> Chain 1: 1000 transitions using 10 leapfrog steps per transition would take 0.09 seconds. #> Chain 1: Adjust your expectations accordingly! #> Chain 1:  #> Chain 1:  #> Chain 1: Iteration:    1 / 2000 [  0%]  (Warmup) #> Chain 1: Iteration:  200 / 2000 [ 10%]  (Warmup) #> Chain 1: Iteration:  400 / 2000 [ 20%]  (Warmup) #> Chain 1: Iteration:  600 / 2000 [ 30%]  (Warmup) #> Chain 1: Iteration:  800 / 2000 [ 40%]  (Warmup) #> Chain 1: Iteration: 1000 / 2000 [ 50%]  (Warmup) #> Chain 1: Iteration: 1001 / 2000 [ 50%]  (Sampling) #> Chain 1: Iteration: 1200 / 2000 [ 60%]  (Sampling) #> Chain 1: Iteration: 1400 / 2000 [ 70%]  (Sampling) #> Chain 1: Iteration: 1600 / 2000 [ 80%]  (Sampling) #> Chain 1: Iteration: 1800 / 2000 [ 90%]  (Sampling) #> Chain 1: Iteration: 2000 / 2000 [100%]  (Sampling) #> Chain 1:  #> Chain 1:  Elapsed Time: 0.028987 seconds (Warm-up) #> Chain 1:                0.025314 seconds (Sampling) #> Chain 1:                0.054301 seconds (Total) #> Chain 1:  #>  #> SAMPLING FOR MODEL '2d19b3a372313df641edf05db5e9f303' NOW (CHAIN 2). #> Chain 2:  #> Chain 2: Gradient evaluation took 8e-06 seconds #> Chain 2: 1000 transitions using 10 leapfrog steps per transition would take 0.08 seconds. #> Chain 2: Adjust your expectations accordingly! #> Chain 2:  #> Chain 2:  #> Chain 2: Iteration:    1 / 2000 [  0%]  (Warmup) #> Chain 2: Iteration:  200 / 2000 [ 10%]  (Warmup) #> Chain 2: Iteration:  400 / 2000 [ 20%]  (Warmup) #> Chain 2: Iteration:  600 / 2000 [ 30%]  (Warmup) #> Chain 2: Iteration:  800 / 2000 [ 40%]  (Warmup) #> Chain 2: Iteration: 1000 / 2000 [ 50%]  (Warmup) #> Chain 2: Iteration: 1001 / 2000 [ 50%]  (Sampling) #> Chain 2: Iteration: 1200 / 2000 [ 60%]  (Sampling) #> Chain 2: Iteration: 1400 / 2000 [ 70%]  (Sampling) #> Chain 2: Iteration: 1600 / 2000 [ 80%]  (Sampling) #> Chain 2: Iteration: 1800 / 2000 [ 90%]  (Sampling) #> Chain 2: Iteration: 2000 / 2000 [100%]  (Sampling) #> Chain 2:  #> Chain 2:  Elapsed Time: 0.028432 seconds (Warm-up) #> Chain 2:                0.02928 seconds (Sampling) #> Chain 2:                0.057712 seconds (Total) #> Chain 2:  #>  #> SAMPLING FOR MODEL '2d19b3a372313df641edf05db5e9f303' NOW (CHAIN 3). #> Chain 3:  #> Chain 3: Gradient evaluation took 7e-06 seconds #> Chain 3: 1000 transitions using 10 leapfrog steps per transition would take 0.07 seconds. #> Chain 3: Adjust your expectations accordingly! #> Chain 3:  #> Chain 3:  #> Chain 3: Iteration:    1 / 2000 [  0%]  (Warmup) #> Chain 3: Iteration:  200 / 2000 [ 10%]  (Warmup) #> Chain 3: Iteration:  400 / 2000 [ 20%]  (Warmup) #> Chain 3: Iteration:  600 / 2000 [ 30%]  (Warmup) #> Chain 3: Iteration:  800 / 2000 [ 40%]  (Warmup) #> Chain 3: Iteration: 1000 / 2000 [ 50%]  (Warmup) #> Chain 3: Iteration: 1001 / 2000 [ 50%]  (Sampling) #> Chain 3: Iteration: 1200 / 2000 [ 60%]  (Sampling) #> Chain 3: Iteration: 1400 / 2000 [ 70%]  (Sampling) #> Chain 3: Iteration: 1600 / 2000 [ 80%]  (Sampling) #> Chain 3: Iteration: 1800 / 2000 [ 90%]  (Sampling) #> Chain 3: Iteration: 2000 / 2000 [100%]  (Sampling) #> Chain 3:  #> Chain 3:  Elapsed Time: 0.029392 seconds (Warm-up) #> Chain 3:                0.028313 seconds (Sampling) #> Chain 3:                0.057705 seconds (Total) #> Chain 3:  #>  #> SAMPLING FOR MODEL '2d19b3a372313df641edf05db5e9f303' NOW (CHAIN 4). #> Chain 4:  #> Chain 4: Gradient evaluation took 7e-06 seconds #> Chain 4: 1000 transitions using 10 leapfrog steps per transition would take 0.07 seconds. #> Chain 4: Adjust your expectations accordingly! #> Chain 4:  #> Chain 4:  #> Chain 4: Iteration:    1 / 2000 [  0%]  (Warmup) #> Chain 4: Iteration:  200 / 2000 [ 10%]  (Warmup) #> Chain 4: Iteration:  400 / 2000 [ 20%]  (Warmup) #> Chain 4: Iteration:  600 / 2000 [ 30%]  (Warmup) #> Chain 4: Iteration:  800 / 2000 [ 40%]  (Warmup) #> Chain 4: Iteration: 1000 / 2000 [ 50%]  (Warmup) #> Chain 4: Iteration: 1001 / 2000 [ 50%]  (Sampling) #> Chain 4: Iteration: 1200 / 2000 [ 60%]  (Sampling) #> Chain 4: Iteration: 1400 / 2000 [ 70%]  (Sampling) #> Chain 4: Iteration: 1600 / 2000 [ 80%]  (Sampling) #> Chain 4: Iteration: 1800 / 2000 [ 90%]  (Sampling) #> Chain 4: Iteration: 2000 / 2000 [100%]  (Sampling) #> Chain 4:  #> Chain 4:  Elapsed Time: 0.028961 seconds (Warm-up) #> Chain 4:                0.028914 seconds (Sampling) #> Chain 4:                0.057875 seconds (Total) #> Chain 4:  #>     Parameter      Rhat      ESS       MCSE #> 1 b_Intercept 1.0008913 4857.258 0.02677092 #> 2       b_cyl 1.0001706 1908.201 0.01044256 #> 3        b_wt 0.9998954 1894.325 0.01874661 # }"},{"path":"https://easystats.github.io/bayestestR/reference/disgust.html","id":null,"dir":"Reference","previous_headings":"","what":"Moral Disgust Judgment — disgust","title":"Moral Disgust Judgment — disgust","text":"sample (simulated) dataset, used tests examples.","code":""},{"path":"https://easystats.github.io/bayestestR/reference/disgust.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Moral Disgust Judgment — disgust","text":"data frame 500 rows 5 variables: score Score questionnaire, ranges 0 50 higher scores representing harsher moral judgment condition one three conditions, differing odor present room: pleasant scent associated cleanliness (lemon), disgusting scent (sulfur), control condition unusual odor present","code":"data(\"disgust\") head(disgust, n = 5) #>   score condition #> 1    13   control #> 2    26   control #> 3    30   control #> 4    23   control #> 5    34   control"},{"path":"https://easystats.github.io/bayestestR/reference/disgust.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Moral Disgust Judgment — disgust","text":"Richard D. Morey","code":""},{"path":"https://easystats.github.io/bayestestR/reference/distribution.html","id":null,"dir":"Reference","previous_headings":"","what":"Empirical Distributions — distribution","title":"Empirical Distributions — distribution","text":"Generate sequence n-quantiles, .e., sample size n near-perfect distribution.","code":""},{"path":"https://easystats.github.io/bayestestR/reference/distribution.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Empirical Distributions — distribution","text":"","code":"distribution(type = \"normal\", ...)  distribution_custom(n, type = \"norm\", ..., random = FALSE)  distribution_beta(n, shape1, shape2, ncp = 0, random = FALSE, ...)  distribution_binomial(n, size = 1, prob = 0.5, random = FALSE, ...)  distribution_binom(n, size = 1, prob = 0.5, random = FALSE, ...)  distribution_cauchy(n, location = 0, scale = 1, random = FALSE, ...)  distribution_chisquared(n, df, ncp = 0, random = FALSE, ...)  distribution_chisq(n, df, ncp = 0, random = FALSE, ...)  distribution_gamma(n, shape, scale = 1, random = FALSE, ...)  distribution_mixture_normal(n, mean = c(-3, 3), sd = 1, random = FALSE, ...)  distribution_normal(n, mean = 0, sd = 1, random = FALSE, ...)  distribution_gaussian(n, mean = 0, sd = 1, random = FALSE, ...)  distribution_nbinom(n, size, prob, mu, phi, random = FALSE, ...)  distribution_poisson(n, lambda = 1, random = FALSE, ...)  distribution_student(n, df, ncp, random = FALSE, ...)  distribution_t(n, df, ncp, random = FALSE, ...)  distribution_student_t(n, df, ncp, random = FALSE, ...)  distribution_tweedie(n, xi = NULL, mu, phi, power = NULL, random = FALSE, ...)  distribution_uniform(n, min = 0, max = 1, random = FALSE, ...)  rnorm_perfect(n, mean = 0, sd = 1)"},{"path":"https://easystats.github.io/bayestestR/reference/distribution.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Empirical Distributions — distribution","text":"type Can names base R's Distributions, like \"cauchy\", \"pois\" \"beta\". ... Arguments passed methods. n number observations random Generate near-perfect random (simple wrappers base R r* functions) distributions. shape1, shape2 non-negative parameters Beta distribution. ncp non-centrality parameter. size number trials (zero ). prob probability success trial. location, scale location scale parameters. df degrees freedom (non-negative, can non-integer). shape Shape parameter. mean vector means. sd vector standard deviations. mu mean phi Corresponding glmmTMB's implementation nbinom distribution, size=mu/phi. lambda vector (non-negative) means. xi tweedie distributions, value xi variance var(Y) = phi * mu^xi. power Alias xi. min, max lower upper limits distribution.  Must finite.","code":""},{"path":"https://easystats.github.io/bayestestR/reference/distribution.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Empirical Distributions — distribution","text":"random = FALSE, function return q*(ppoints(n), ...).","code":""},{"path":"https://easystats.github.io/bayestestR/reference/distribution.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Empirical Distributions — distribution","text":"","code":"library(bayestestR) x <- distribution(n = 10) plot(density(x))   x <- distribution(type = \"gamma\", n = 100, shape = 2) plot(density(x))"},{"path":"https://easystats.github.io/bayestestR/reference/dot-extract_priors_rstanarm.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract and Returns the priors formatted for rstanarm — .extract_priors_rstanarm","title":"Extract and Returns the priors formatted for rstanarm — .extract_priors_rstanarm","text":"Extract Returns priors formatted rstanarm","code":""},{"path":"https://easystats.github.io/bayestestR/reference/dot-extract_priors_rstanarm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract and Returns the priors formatted for rstanarm — .extract_priors_rstanarm","text":"","code":".extract_priors_rstanarm(model, ...)"},{"path":"https://easystats.github.io/bayestestR/reference/dot-prior_new_location.html","id":null,"dir":"Reference","previous_headings":"","what":"Set a new location for a prior — .prior_new_location","title":"Set a new location for a prior — .prior_new_location","text":"Set new location prior","code":""},{"path":"https://easystats.github.io/bayestestR/reference/dot-prior_new_location.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set a new location for a prior — .prior_new_location","text":"","code":".prior_new_location(prior, sign, magnitude = 10)"},{"path":"https://easystats.github.io/bayestestR/reference/dot-select_nums.html","id":null,"dir":"Reference","previous_headings":"","what":"select numerics columns — .select_nums","title":"select numerics columns — .select_nums","text":"select numerics columns","code":""},{"path":"https://easystats.github.io/bayestestR/reference/dot-select_nums.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"select numerics columns — .select_nums","text":"","code":".select_nums(x)"},{"path":"https://easystats.github.io/bayestestR/reference/effective_sample.html","id":null,"dir":"Reference","previous_headings":"","what":"Effective Sample Size (ESS) — effective_sample","title":"Effective Sample Size (ESS) — effective_sample","text":"function returns effective sample size (ESS).","code":""},{"path":"https://easystats.github.io/bayestestR/reference/effective_sample.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Effective Sample Size (ESS) — effective_sample","text":"","code":"effective_sample(model, ...)  # S3 method for brmsfit effective_sample(   model,   effects = c(\"fixed\", \"random\", \"all\"),   component = c(\"conditional\", \"zi\", \"zero_inflated\", \"all\"),   parameters = NULL,   ... )  # S3 method for stanreg effective_sample(   model,   effects = c(\"fixed\", \"random\", \"all\"),   component = c(\"location\", \"all\", \"conditional\", \"smooth_terms\", \"sigma\",     \"distributional\", \"auxiliary\"),   parameters = NULL,   ... )"},{"path":"https://easystats.github.io/bayestestR/reference/effective_sample.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Effective Sample Size (ESS) — effective_sample","text":"model stanreg, stanfit, brmsfit, blavaan, MCMCglmm object. ... Currently used. effects results fixed effects, random effects returned? applies mixed models. May abbreviated. component results parameters, parameters conditional model zero-inflated part model returned? May abbreviated. applies brms-models. parameters Regular expression pattern describes parameters returned. Meta-parameters (like lp__ prior_) filtered default, parameters typically appear summary() returned. Use parameters select specific parameters output.","code":""},{"path":"https://easystats.github.io/bayestestR/reference/effective_sample.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Effective Sample Size (ESS) — effective_sample","text":"data frame two columns: Parameter name effective sample size (ESS).","code":""},{"path":"https://easystats.github.io/bayestestR/reference/effective_sample.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Effective Sample Size (ESS) — effective_sample","text":"Effective Sample (ESS) large possible, altough applications, effective sample size greater 1,000 sufficient stable estimates (Bürkner, 2017). ESS corresponds number independent samples estimation power N autocorrelated samples. measure “much independent information autocorrelated chains” (Kruschke 2015, p182-3).","code":""},{"path":"https://easystats.github.io/bayestestR/reference/effective_sample.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Effective Sample Size (ESS) — effective_sample","text":"Kruschke, J. (2014). Bayesian data analysis: tutorial R, JAGS, Stan. Academic Press. Bürkner, P. C. (2017). brms: R package Bayesian multilevel models using Stan. Journal Statistical Software, 80(1), 1-28","code":""},{"path":"https://easystats.github.io/bayestestR/reference/effective_sample.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Effective Sample Size (ESS) — effective_sample","text":"","code":"# \\dontrun{ library(rstanarm) model <- stan_glm(mpg ~ wt + gear, data = mtcars, chains = 2, iter = 200, refresh = 0) #> Warning: Bulk Effective Samples Size (ESS) is too low, indicating posterior means and medians may be unreliable. #> Running the chains for more iterations may help. See #> https://mc-stan.org/misc/warnings.html#bulk-ess #> Warning: Tail Effective Samples Size (ESS) is too low, indicating posterior variances and tail quantiles may be unreliable. #> Running the chains for more iterations may help. See #> https://mc-stan.org/misc/warnings.html#tail-ess effective_sample(model) #>     Parameter ESS #> 1 (Intercept) 172 #> 2          wt 181 #> 3        gear 175 # }"},{"path":"https://easystats.github.io/bayestestR/reference/equivalence_test.html","id":null,"dir":"Reference","previous_headings":"","what":"Test for Practical Equivalence — equivalence_test","title":"Test for Practical Equivalence — equivalence_test","text":"Perform Test Practical Equivalence Bayesian frequentist models.","code":""},{"path":"https://easystats.github.io/bayestestR/reference/equivalence_test.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test for Practical Equivalence — equivalence_test","text":"","code":"equivalence_test(x, ...)  # S3 method for default equivalence_test(x, ...)  # S3 method for data.frame equivalence_test(x, range = \"default\", ci = 0.95, verbose = TRUE, ...)  # S3 method for stanreg equivalence_test(   x,   range = \"default\",   ci = 0.95,   effects = c(\"fixed\", \"random\", \"all\"),   component = c(\"location\", \"all\", \"conditional\", \"smooth_terms\", \"sigma\",     \"distributional\", \"auxiliary\"),   parameters = NULL,   verbose = TRUE,   ... )  # S3 method for brmsfit equivalence_test(   x,   range = \"default\",   ci = 0.95,   effects = c(\"fixed\", \"random\", \"all\"),   component = c(\"conditional\", \"zi\", \"zero_inflated\", \"all\"),   parameters = NULL,   verbose = TRUE,   ... )"},{"path":"https://easystats.github.io/bayestestR/reference/equivalence_test.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test for Practical Equivalence — equivalence_test","text":"x Vector representing posterior distribution. Can also stanreg brmsfit model. ... Currently used. range ROPE's lower higher bounds. \"default\" depending number outcome variables vector list. models one response, range vector length two (e.g., c(-0.1, 0.1)). multivariate models, range list numeric vectors response variable. Vector names correspond name response variables. \"default\" input vector, range set c(-0.1, 0.1). \"default\" input Bayesian model, rope_range() used. ci Credible Interval (CI) probability, corresponding proportion HDI, use percentage ROPE. verbose Toggle warnings. effects results fixed effects, random effects returned? applies mixed models. May abbreviated. component results parameters, parameters conditional model zero-inflated part model returned? May abbreviated. applies brms-models. parameters Regular expression pattern describes parameters returned. Meta-parameters (like lp__ prior_) filtered default, parameters typically appear summary() returned. Use parameters select specific parameters output.","code":""},{"path":"https://easystats.github.io/bayestestR/reference/equivalence_test.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Test for Practical Equivalence — equivalence_test","text":"data frame following columns: Parameter model parameter(s), x model-object. x vector, column missing. CI probability HDI. ROPE_low, ROPE_high limits ROPE. values identical parameters. ROPE_Percentage proportion HDI lies inside ROPE. ROPE_Equivalence \"test result\", character. Either \"rejected\", \"accepted\" \"undecided\". HDI_low , HDI_high lower upper HDI limits parameters.","code":""},{"path":"https://easystats.github.io/bayestestR/reference/equivalence_test.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Test for Practical Equivalence — equivalence_test","text":"Documentation accessible : Bayesian models Frequentist models Bayesian models, Test Practical Equivalence based \"HDI+ROPE decision rule\" (Kruschke, 2014, 2018) check whether parameter values accepted rejected explicitly formulated \"null hypothesis\" (.e., ROPE). words, checks percentage 89% HDI null region (ROPE). percentage sufficiently low, null hypothesis rejected. percentage sufficiently high, null hypothesis accepted. Using ROPE HDI, Kruschke (2018) suggests using percentage 95% (89%, considered stable) HDI falls within ROPE decision rule. HDI completely outside ROPE, \"null hypothesis\" parameter \"rejected\". ROPE completely covers HDI, .e., credible values parameter inside region practical equivalence, null hypothesis accepted. Else, ’s undecided whether accept reject null hypothesis. full ROPE used (.e., 100% HDI), null hypothesis rejected accepted percentage posterior within ROPE smaller 2.5% greater 97.5%. Desirable results low proportions inside ROPE  (closer zero better).  attention required finding suitable values ROPE limits (argument range). See 'Details' rope_range() information. Multicollinearity: Non-independent covariates  parameters show strong correlations, .e. covariates independent, joint parameter distributions may shift towards away ROPE. cases, test practical equivalence may inappropriate results. Collinearity invalidates ROPE hypothesis testing based univariate marginals, probabilities conditional independence. problematic results \"undecided\" parameters, may either move towards \"rejection\" away (Kruschke 2014, 340f). equivalence_test() performs simple check pairwise correlations parameters, can collinearity two variables, first step check assumptions hypothesis testing look different pair plots. even sophisticated check projection predictive variable selection (Piironen Vehtari 2017).","code":""},{"path":"https://easystats.github.io/bayestestR/reference/equivalence_test.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Test for Practical Equivalence — equivalence_test","text":"print()-method digits-argument control amount digits output, plot()-method visualize results equivalence-test (models ).","code":""},{"path":"https://easystats.github.io/bayestestR/reference/equivalence_test.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Test for Practical Equivalence — equivalence_test","text":"Kruschke, J. K. (2018). Rejecting accepting parameter values Bayesian estimation. Advances Methods Practices Psychological Science, 1(2), 270-280. doi:10.1177/2515245918771304 Kruschke, J. K. (2014). Bayesian data analysis: tutorial R, JAGS, Stan. Academic Press Piironen, J., & Vehtari, . (2017). Comparison Bayesian predictive methods model selection. Statistics Computing, 27(3), 711–735. doi:10.1007/s11222-016-9649-y","code":""},{"path":"https://easystats.github.io/bayestestR/reference/equivalence_test.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Test for Practical Equivalence — equivalence_test","text":"","code":"library(bayestestR)  equivalence_test(x = rnorm(1000, 0, 0.01), range = c(-0.1, 0.1)) #> # Test for Practical Equivalence #>  #>   ROPE: [-0.10 0.10] #>  #> H0       | inside ROPE |      95% HDI #> ------------------------------------- #> Accepted |    100.00 % | [-0.02 0.02] #>  #>  equivalence_test(x = rnorm(1000, 0, 1), range = c(-0.1, 0.1)) #> # Test for Practical Equivalence #>  #>   ROPE: [-0.10 0.10] #>  #> H0        | inside ROPE |      95% HDI #> -------------------------------------- #> Undecided |      8.11 % | [-2.00 1.97] #>  #>  equivalence_test(x = rnorm(1000, 1, 0.01), range = c(-0.1, 0.1)) #> # Test for Practical Equivalence #>  #>   ROPE: [-0.10 0.10] #>  #> H0       | inside ROPE |     95% HDI #> ------------------------------------ #> Rejected |      0.00 % | [0.98 1.02] #>  #>  equivalence_test(x = rnorm(1000, 1, 1), ci = c(.50, .99)) #> # Test for Practical Equivalence #>  #>   ROPE: [-0.10 0.10] #>  #> H0       | inside ROPE |      50% HDI #> ------------------------------------- #> Rejected |      0.00 % | [ 0.31 1.64] #>  #>  #> H0        | inside ROPE |      99% HDI #> -------------------------------------- #> Undecided |      5.05 % | [-1.58 3.65] #>  #>   # print more digits test <- equivalence_test(x = rnorm(1000, 1, 1), ci = c(.50, .99)) print(test, digits = 4) #> # Test for Practical Equivalence #>  #>   ROPE: [-0.1000 0.1000] #>  #> H0       | inside ROPE |          50% HDI #> ----------------------------------------- #> Rejected |    0.0000 % | [ 0.3115 1.7148] #>  #>  #> H0        | inside ROPE |          99% HDI #> ------------------------------------------ #> Undecided |    4.9495 % | [-1.7070 3.7015] #>  #>  # \\dontrun{ library(rstanarm) model <- rstanarm::stan_glm(mpg ~ wt + cyl, data = mtcars) #>  #> SAMPLING FOR MODEL 'continuous' NOW (CHAIN 1). #> Chain 1:  #> Chain 1: Gradient evaluation took 1.9e-05 seconds #> Chain 1: 1000 transitions using 10 leapfrog steps per transition would take 0.19 seconds. #> Chain 1: Adjust your expectations accordingly! #> Chain 1:  #> Chain 1:  #> Chain 1: Iteration:    1 / 2000 [  0%]  (Warmup) #> Chain 1: Iteration:  200 / 2000 [ 10%]  (Warmup) #> Chain 1: Iteration:  400 / 2000 [ 20%]  (Warmup) #> Chain 1: Iteration:  600 / 2000 [ 30%]  (Warmup) #> Chain 1: Iteration:  800 / 2000 [ 40%]  (Warmup) #> Chain 1: Iteration: 1000 / 2000 [ 50%]  (Warmup) #> Chain 1: Iteration: 1001 / 2000 [ 50%]  (Sampling) #> Chain 1: Iteration: 1200 / 2000 [ 60%]  (Sampling) #> Chain 1: Iteration: 1400 / 2000 [ 70%]  (Sampling) #> Chain 1: Iteration: 1600 / 2000 [ 80%]  (Sampling) #> Chain 1: Iteration: 1800 / 2000 [ 90%]  (Sampling) #> Chain 1: Iteration: 2000 / 2000 [100%]  (Sampling) #> Chain 1:  #> Chain 1:  Elapsed Time: 0.059 seconds (Warm-up) #> Chain 1:                0.06 seconds (Sampling) #> Chain 1:                0.119 seconds (Total) #> Chain 1:  #>  #> SAMPLING FOR MODEL 'continuous' NOW (CHAIN 2). #> Chain 2:  #> Chain 2: Gradient evaluation took 1.3e-05 seconds #> Chain 2: 1000 transitions using 10 leapfrog steps per transition would take 0.13 seconds. #> Chain 2: Adjust your expectations accordingly! #> Chain 2:  #> Chain 2:  #> Chain 2: Iteration:    1 / 2000 [  0%]  (Warmup) #> Chain 2: Iteration:  200 / 2000 [ 10%]  (Warmup) #> Chain 2: Iteration:  400 / 2000 [ 20%]  (Warmup) #> Chain 2: Iteration:  600 / 2000 [ 30%]  (Warmup) #> Chain 2: Iteration:  800 / 2000 [ 40%]  (Warmup) #> Chain 2: Iteration: 1000 / 2000 [ 50%]  (Warmup) #> Chain 2: Iteration: 1001 / 2000 [ 50%]  (Sampling) #> Chain 2: Iteration: 1200 / 2000 [ 60%]  (Sampling) #> Chain 2: Iteration: 1400 / 2000 [ 70%]  (Sampling) #> Chain 2: Iteration: 1600 / 2000 [ 80%]  (Sampling) #> Chain 2: Iteration: 1800 / 2000 [ 90%]  (Sampling) #> Chain 2: Iteration: 2000 / 2000 [100%]  (Sampling) #> Chain 2:  #> Chain 2:  Elapsed Time: 0.06 seconds (Warm-up) #> Chain 2:                0.054 seconds (Sampling) #> Chain 2:                0.114 seconds (Total) #> Chain 2:  #>  #> SAMPLING FOR MODEL 'continuous' NOW (CHAIN 3). #> Chain 3:  #> Chain 3: Gradient evaluation took 1e-05 seconds #> Chain 3: 1000 transitions using 10 leapfrog steps per transition would take 0.1 seconds. #> Chain 3: Adjust your expectations accordingly! #> Chain 3:  #> Chain 3:  #> Chain 3: Iteration:    1 / 2000 [  0%]  (Warmup) #> Chain 3: Iteration:  200 / 2000 [ 10%]  (Warmup) #> Chain 3: Iteration:  400 / 2000 [ 20%]  (Warmup) #> Chain 3: Iteration:  600 / 2000 [ 30%]  (Warmup) #> Chain 3: Iteration:  800 / 2000 [ 40%]  (Warmup) #> Chain 3: Iteration: 1000 / 2000 [ 50%]  (Warmup) #> Chain 3: Iteration: 1001 / 2000 [ 50%]  (Sampling) #> Chain 3: Iteration: 1200 / 2000 [ 60%]  (Sampling) #> Chain 3: Iteration: 1400 / 2000 [ 70%]  (Sampling) #> Chain 3: Iteration: 1600 / 2000 [ 80%]  (Sampling) #> Chain 3: Iteration: 1800 / 2000 [ 90%]  (Sampling) #> Chain 3: Iteration: 2000 / 2000 [100%]  (Sampling) #> Chain 3:  #> Chain 3:  Elapsed Time: 0.058 seconds (Warm-up) #> Chain 3:                0.058 seconds (Sampling) #> Chain 3:                0.116 seconds (Total) #> Chain 3:  #>  #> SAMPLING FOR MODEL 'continuous' NOW (CHAIN 4). #> Chain 4:  #> Chain 4: Gradient evaluation took 1.1e-05 seconds #> Chain 4: 1000 transitions using 10 leapfrog steps per transition would take 0.11 seconds. #> Chain 4: Adjust your expectations accordingly! #> Chain 4:  #> Chain 4:  #> Chain 4: Iteration:    1 / 2000 [  0%]  (Warmup) #> Chain 4: Iteration:  200 / 2000 [ 10%]  (Warmup) #> Chain 4: Iteration:  400 / 2000 [ 20%]  (Warmup) #> Chain 4: Iteration:  600 / 2000 [ 30%]  (Warmup) #> Chain 4: Iteration:  800 / 2000 [ 40%]  (Warmup) #> Chain 4: Iteration: 1000 / 2000 [ 50%]  (Warmup) #> Chain 4: Iteration: 1001 / 2000 [ 50%]  (Sampling) #> Chain 4: Iteration: 1200 / 2000 [ 60%]  (Sampling) #> Chain 4: Iteration: 1400 / 2000 [ 70%]  (Sampling) #> Chain 4: Iteration: 1600 / 2000 [ 80%]  (Sampling) #> Chain 4: Iteration: 1800 / 2000 [ 90%]  (Sampling) #> Chain 4: Iteration: 2000 / 2000 [100%]  (Sampling) #> Chain 4:  #> Chain 4:  Elapsed Time: 0.061 seconds (Warm-up) #> Chain 4:                0.054 seconds (Sampling) #> Chain 4:                0.115 seconds (Total) #> Chain 4:  equivalence_test(model) #> Possible multicollinearity between cyl and wt (r = 0.78). This might lead to inappropriate results. See 'Details' in '?equivalence_test'. #> # Test for Practical Equivalence #>  #>   ROPE: [-0.60 0.60] #>  #> Parameter   |       H0 | inside ROPE |       95% HDI #> ---------------------------------------------------- #> (Intercept) | Rejected |      0.00 % | [36.21 43.06] #> wt          | Rejected |      0.00 % | [-4.74 -1.62] #> cyl         | Rejected |      0.00 % | [-2.36 -0.70] #>  #>   # plot result test <- equivalence_test(model) #> Possible multicollinearity between cyl and wt (r = 0.78). This might lead to inappropriate results. See 'Details' in '?equivalence_test'. plot(test) #> Picking joint bandwidth of 0.0895   library(emmeans) equivalence_test(emtrends(model, ~1, \"wt\")) #> Warning: Model has 0 prior weights, but we recovered 32 rows of data. #> So prior weights were ignored. #> # Test for Practical Equivalence #>  #>   ROPE: [-0.10 0.10] #>  #> Parameter |       H0 | inside ROPE |       95% HDI #> -------------------------------------------------- #> overall   | Rejected |      0.00 % | [-4.74 -1.62] #>  #>   library(brms) model <- brms::brm(mpg ~ wt + cyl, data = mtcars) #> Compiling Stan program... #> Start sampling #>  #> SAMPLING FOR MODEL '2d19b3a372313df641edf05db5e9f303' NOW (CHAIN 1). #> Chain 1:  #> Chain 1: Gradient evaluation took 1e-05 seconds #> Chain 1: 1000 transitions using 10 leapfrog steps per transition would take 0.1 seconds. #> Chain 1: Adjust your expectations accordingly! #> Chain 1:  #> Chain 1:  #> Chain 1: Iteration:    1 / 2000 [  0%]  (Warmup) #> Chain 1: Iteration:  200 / 2000 [ 10%]  (Warmup) #> Chain 1: Iteration:  400 / 2000 [ 20%]  (Warmup) #> Chain 1: Iteration:  600 / 2000 [ 30%]  (Warmup) #> Chain 1: Iteration:  800 / 2000 [ 40%]  (Warmup) #> Chain 1: Iteration: 1000 / 2000 [ 50%]  (Warmup) #> Chain 1: Iteration: 1001 / 2000 [ 50%]  (Sampling) #> Chain 1: Iteration: 1200 / 2000 [ 60%]  (Sampling) #> Chain 1: Iteration: 1400 / 2000 [ 70%]  (Sampling) #> Chain 1: Iteration: 1600 / 2000 [ 80%]  (Sampling) #> Chain 1: Iteration: 1800 / 2000 [ 90%]  (Sampling) #> Chain 1: Iteration: 2000 / 2000 [100%]  (Sampling) #> Chain 1:  #> Chain 1:  Elapsed Time: 0.028239 seconds (Warm-up) #> Chain 1:                0.029269 seconds (Sampling) #> Chain 1:                0.057508 seconds (Total) #> Chain 1:  #>  #> SAMPLING FOR MODEL '2d19b3a372313df641edf05db5e9f303' NOW (CHAIN 2). #> Chain 2:  #> Chain 2: Gradient evaluation took 7e-06 seconds #> Chain 2: 1000 transitions using 10 leapfrog steps per transition would take 0.07 seconds. #> Chain 2: Adjust your expectations accordingly! #> Chain 2:  #> Chain 2:  #> Chain 2: Iteration:    1 / 2000 [  0%]  (Warmup) #> Chain 2: Iteration:  200 / 2000 [ 10%]  (Warmup) #> Chain 2: Iteration:  400 / 2000 [ 20%]  (Warmup) #> Chain 2: Iteration:  600 / 2000 [ 30%]  (Warmup) #> Chain 2: Iteration:  800 / 2000 [ 40%]  (Warmup) #> Chain 2: Iteration: 1000 / 2000 [ 50%]  (Warmup) #> Chain 2: Iteration: 1001 / 2000 [ 50%]  (Sampling) #> Chain 2: Iteration: 1200 / 2000 [ 60%]  (Sampling) #> Chain 2: Iteration: 1400 / 2000 [ 70%]  (Sampling) #> Chain 2: Iteration: 1600 / 2000 [ 80%]  (Sampling) #> Chain 2: Iteration: 1800 / 2000 [ 90%]  (Sampling) #> Chain 2: Iteration: 2000 / 2000 [100%]  (Sampling) #> Chain 2:  #> Chain 2:  Elapsed Time: 0.027801 seconds (Warm-up) #> Chain 2:                0.020842 seconds (Sampling) #> Chain 2:                0.048643 seconds (Total) #> Chain 2:  #>  #> SAMPLING FOR MODEL '2d19b3a372313df641edf05db5e9f303' NOW (CHAIN 3). #> Chain 3:  #> Chain 3: Gradient evaluation took 8e-06 seconds #> Chain 3: 1000 transitions using 10 leapfrog steps per transition would take 0.08 seconds. #> Chain 3: Adjust your expectations accordingly! #> Chain 3:  #> Chain 3:  #> Chain 3: Iteration:    1 / 2000 [  0%]  (Warmup) #> Chain 3: Iteration:  200 / 2000 [ 10%]  (Warmup) #> Chain 3: Iteration:  400 / 2000 [ 20%]  (Warmup) #> Chain 3: Iteration:  600 / 2000 [ 30%]  (Warmup) #> Chain 3: Iteration:  800 / 2000 [ 40%]  (Warmup) #> Chain 3: Iteration: 1000 / 2000 [ 50%]  (Warmup) #> Chain 3: Iteration: 1001 / 2000 [ 50%]  (Sampling) #> Chain 3: Iteration: 1200 / 2000 [ 60%]  (Sampling) #> Chain 3: Iteration: 1400 / 2000 [ 70%]  (Sampling) #> Chain 3: Iteration: 1600 / 2000 [ 80%]  (Sampling) #> Chain 3: Iteration: 1800 / 2000 [ 90%]  (Sampling) #> Chain 3: Iteration: 2000 / 2000 [100%]  (Sampling) #> Chain 3:  #> Chain 3:  Elapsed Time: 0.026516 seconds (Warm-up) #> Chain 3:                0.025439 seconds (Sampling) #> Chain 3:                0.051955 seconds (Total) #> Chain 3:  #>  #> SAMPLING FOR MODEL '2d19b3a372313df641edf05db5e9f303' NOW (CHAIN 4). #> Chain 4:  #> Chain 4: Gradient evaluation took 6e-06 seconds #> Chain 4: 1000 transitions using 10 leapfrog steps per transition would take 0.06 seconds. #> Chain 4: Adjust your expectations accordingly! #> Chain 4:  #> Chain 4:  #> Chain 4: Iteration:    1 / 2000 [  0%]  (Warmup) #> Chain 4: Iteration:  200 / 2000 [ 10%]  (Warmup) #> Chain 4: Iteration:  400 / 2000 [ 20%]  (Warmup) #> Chain 4: Iteration:  600 / 2000 [ 30%]  (Warmup) #> Chain 4: Iteration:  800 / 2000 [ 40%]  (Warmup) #> Chain 4: Iteration: 1000 / 2000 [ 50%]  (Warmup) #> Chain 4: Iteration: 1001 / 2000 [ 50%]  (Sampling) #> Chain 4: Iteration: 1200 / 2000 [ 60%]  (Sampling) #> Chain 4: Iteration: 1400 / 2000 [ 70%]  (Sampling) #> Chain 4: Iteration: 1600 / 2000 [ 80%]  (Sampling) #> Chain 4: Iteration: 1800 / 2000 [ 90%]  (Sampling) #> Chain 4: Iteration: 2000 / 2000 [100%]  (Sampling) #> Chain 4:  #> Chain 4:  Elapsed Time: 0.028126 seconds (Warm-up) #> Chain 4:                0.028901 seconds (Sampling) #> Chain 4:                0.057027 seconds (Total) #> Chain 4:  equivalence_test(model) #> Possible multicollinearity between b_cyl and b_wt (r = 0.78). This might lead to inappropriate results. See 'Details' in '?equivalence_test'. #> # Test for Practical Equivalence #>  #>   ROPE: [-0.60 0.60] #>  #> Parameter |       H0 | inside ROPE |       95% HDI #> -------------------------------------------------- #> Intercept | Rejected |      0.00 % | [36.09 43.30] #> wt        | Rejected |      0.00 % | [-4.78 -1.52] #> cyl       | Rejected |      0.00 % | [-2.40 -0.61] #>  #>   library(BayesFactor) bf <- ttestBF(x = rnorm(100, 1, 1)) # equivalence_test(bf) # }"},{"path":"https://easystats.github.io/bayestestR/reference/estimate_density.html","id":null,"dir":"Reference","previous_headings":"","what":"Density Estimation — estimate_density","title":"Density Estimation — estimate_density","text":"function wrapper different methods density estimation. default, uses base R density default uses different smoothing bandwidth (\"SJ\") legacy default implemented base R density function (\"nrd0\"). However, Deng Wickham suggest method = \"KernSmooth\" fastest accurate.","code":""},{"path":"https://easystats.github.io/bayestestR/reference/estimate_density.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Density Estimation — estimate_density","text":"","code":"estimate_density(x, ...)  # S3 method for data.frame estimate_density(   x,   method = \"kernel\",   precision = 2^10,   extend = FALSE,   extend_scale = 0.1,   bw = \"SJ\",   ci = NULL,   select = NULL,   at = NULL,   group_by = NULL,   ... )"},{"path":"https://easystats.github.io/bayestestR/reference/estimate_density.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Density Estimation — estimate_density","text":"x Vector representing posterior distribution, data frame vectors. Can also Bayesian model. bayestestR supports wide range models (see, example, methods(\"hdi\")) documented 'Usage' section, methods classes mostly resemble arguments .numeric .data.framemethods. ... Currently used. method Density estimation method. Can \"kernel\" (default), \"logspline\" \"KernSmooth\". precision Number points density data. See n parameter density. extend Extend range x axis factor extend_scale. extend_scale Ratio range extend x axis. value 0.1 means x axis extended 1/10 range data. bw See eponymous argument density. , default changed \"SJ\", recommended. ci confidence interval threshold. used method = \"kernel\". feature experimental, use caution. select Character vector column names. NULL (default), numeric variables selected. arguments datawizard::find_columns() (exclude) can also used. Optional character vector. NULL input data frame, density estimation performed group (subsets) indicated . See examples. group_by Deprecated favour .","code":""},{"path":"https://easystats.github.io/bayestestR/reference/estimate_density.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Density Estimation — estimate_density","text":"also plot()-method implemented see-package.","code":""},{"path":"https://easystats.github.io/bayestestR/reference/estimate_density.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Density Estimation — estimate_density","text":"Deng, H., & Wickham, H. (2011). Density estimation R. Electronic publication.","code":""},{"path":"https://easystats.github.io/bayestestR/reference/estimate_density.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Density Estimation — estimate_density","text":"","code":"library(bayestestR)  set.seed(1) x <- rnorm(250, mean = 1)  # Basic usage density_kernel <- estimate_density(x) # default method is \"kernel\"  hist(x, prob = TRUE) lines(density_kernel$x, density_kernel$y, col = \"black\", lwd = 2) lines(density_kernel$x, density_kernel$CI_low, col = \"gray\", lty = 2) lines(density_kernel$x, density_kernel$CI_high, col = \"gray\", lty = 2) legend(\"topright\",   legend = c(\"Estimate\", \"95% CI\"),   col = c(\"black\", \"gray\"), lwd = 2, lty = c(1, 2) )   # Other Methods density_logspline <- estimate_density(x, method = \"logspline\") density_KernSmooth <- estimate_density(x, method = \"KernSmooth\") density_mixture <- estimate_density(x, method = \"mixture\")   hist(x, prob = TRUE) lines(density_kernel$x, density_kernel$y, col = \"black\", lwd = 2) lines(density_logspline$x, density_logspline$y, col = \"red\", lwd = 2) lines(density_KernSmooth$x, density_KernSmooth$y, col = \"blue\", lwd = 2) lines(density_mixture$x, density_mixture$y, col = \"green\", lwd = 2)   # Extension density_extended <- estimate_density(x, extend = TRUE) density_default <- estimate_density(x, extend = FALSE)  hist(x, prob = TRUE) lines(density_extended$x, density_extended$y, col = \"red\", lwd = 3) lines(density_default$x, density_default$y, col = \"black\", lwd = 3)   # Multiple columns head(estimate_density(iris)) #>      Parameter        x          y #> 1 Sepal.Length 4.300000 0.09650527 #> 2 Sepal.Length 4.303519 0.09766644 #> 3 Sepal.Length 4.307038 0.09883222 #> 4 Sepal.Length 4.310557 0.10001063 #> 5 Sepal.Length 4.314076 0.10119336 #> 6 Sepal.Length 4.317595 0.10238484 head(estimate_density(iris, select = \"Sepal.Width\")) #>     Parameter        x          y #> 1 Sepal.Width 2.000000 0.04651972 #> 2 Sepal.Width 2.002346 0.04733324 #> 3 Sepal.Width 2.004692 0.04816144 #> 4 Sepal.Width 2.007038 0.04899919 #> 5 Sepal.Width 2.009384 0.04984690 #> 6 Sepal.Width 2.011730 0.05071174  # Grouped data head(estimate_density(iris, at = \"Species\")) #>      Parameter        x         y Species #> 1 Sepal.Length 4.300000 0.2355986  setosa #> 2 Sepal.Length 4.301466 0.2375879  setosa #> 3 Sepal.Length 4.302933 0.2395766  setosa #> 4 Sepal.Length 4.304399 0.2415640  setosa #> 5 Sepal.Length 4.305865 0.2435508  setosa #> 6 Sepal.Length 4.307331 0.2455353  setosa head(estimate_density(iris$Petal.Width, at = iris$Species)) #>           x        y  Group #> 1 0.1000000 9.011872 setosa #> 2 0.1004888 8.955399 setosa #> 3 0.1009775 8.792239 setosa #> 4 0.1014663 8.528268 setosa #> 5 0.1019550 8.172719 setosa #> 6 0.1024438 7.737660 setosa # \\dontrun{ # rstanarm models # ----------------------------------------------- library(rstanarm) model <- stan_glm(mpg ~ wt + gear, data = mtcars, chains = 2, iter = 200, refresh = 0) #> Warning: The largest R-hat is 1.07, indicating chains have not mixed. #> Running the chains for more iterations may help. See #> https://mc-stan.org/misc/warnings.html#r-hat #> Warning: Bulk Effective Samples Size (ESS) is too low, indicating posterior means and medians may be unreliable. #> Running the chains for more iterations may help. See #> https://mc-stan.org/misc/warnings.html#bulk-ess #> Warning: Tail Effective Samples Size (ESS) is too low, indicating posterior variances and tail quantiles may be unreliable. #> Running the chains for more iterations may help. See #> https://mc-stan.org/misc/warnings.html#tail-ess head(estimate_density(model)) #>     Parameter        x           y #> 1 (Intercept) 24.19242 0.002029767 #> 2 (Intercept) 24.22067 0.002052337 #> 3 (Intercept) 24.24892 0.002074994 #> 4 (Intercept) 24.27717 0.002097736 #> 5 (Intercept) 24.30542 0.002120651 #> 6 (Intercept) 24.33367 0.002143652  library(emmeans) head(estimate_density(emtrends(model, ~1, \"wt\"))) #> Warning: Model has 0 prior weights, but we recovered 32 rows of data. #> So prior weights were ignored. #>   Parameter         x          y #> 1   overall -7.810281 0.01754139 #> 2   overall -7.806283 0.01763125 #> 3   overall -7.802285 0.01771950 #> 4   overall -7.798287 0.01780524 #> 5   overall -7.794289 0.01788964 #> 6   overall -7.790292 0.01797242  # brms models # ----------------------------------------------- library(brms) model <- brms::brm(mpg ~ wt + cyl, data = mtcars) #> Compiling Stan program... #> Start sampling #>  #> SAMPLING FOR MODEL '2d19b3a372313df641edf05db5e9f303' NOW (CHAIN 1). #> Chain 1:  #> Chain 1: Gradient evaluation took 1e-05 seconds #> Chain 1: 1000 transitions using 10 leapfrog steps per transition would take 0.1 seconds. #> Chain 1: Adjust your expectations accordingly! #> Chain 1:  #> Chain 1:  #> Chain 1: Iteration:    1 / 2000 [  0%]  (Warmup) #> Chain 1: Iteration:  200 / 2000 [ 10%]  (Warmup) #> Chain 1: Iteration:  400 / 2000 [ 20%]  (Warmup) #> Chain 1: Iteration:  600 / 2000 [ 30%]  (Warmup) #> Chain 1: Iteration:  800 / 2000 [ 40%]  (Warmup) #> Chain 1: Iteration: 1000 / 2000 [ 50%]  (Warmup) #> Chain 1: Iteration: 1001 / 2000 [ 50%]  (Sampling) #> Chain 1: Iteration: 1200 / 2000 [ 60%]  (Sampling) #> Chain 1: Iteration: 1400 / 2000 [ 70%]  (Sampling) #> Chain 1: Iteration: 1600 / 2000 [ 80%]  (Sampling) #> Chain 1: Iteration: 1800 / 2000 [ 90%]  (Sampling) #> Chain 1: Iteration: 2000 / 2000 [100%]  (Sampling) #> Chain 1:  #> Chain 1:  Elapsed Time: 0.02745 seconds (Warm-up) #> Chain 1:                0.026043 seconds (Sampling) #> Chain 1:                0.053493 seconds (Total) #> Chain 1:  #>  #> SAMPLING FOR MODEL '2d19b3a372313df641edf05db5e9f303' NOW (CHAIN 2). #> Chain 2:  #> Chain 2: Gradient evaluation took 7e-06 seconds #> Chain 2: 1000 transitions using 10 leapfrog steps per transition would take 0.07 seconds. #> Chain 2: Adjust your expectations accordingly! #> Chain 2:  #> Chain 2:  #> Chain 2: Iteration:    1 / 2000 [  0%]  (Warmup) #> Chain 2: Iteration:  200 / 2000 [ 10%]  (Warmup) #> Chain 2: Iteration:  400 / 2000 [ 20%]  (Warmup) #> Chain 2: Iteration:  600 / 2000 [ 30%]  (Warmup) #> Chain 2: Iteration:  800 / 2000 [ 40%]  (Warmup) #> Chain 2: Iteration: 1000 / 2000 [ 50%]  (Warmup) #> Chain 2: Iteration: 1001 / 2000 [ 50%]  (Sampling) #> Chain 2: Iteration: 1200 / 2000 [ 60%]  (Sampling) #> Chain 2: Iteration: 1400 / 2000 [ 70%]  (Sampling) #> Chain 2: Iteration: 1600 / 2000 [ 80%]  (Sampling) #> Chain 2: Iteration: 1800 / 2000 [ 90%]  (Sampling) #> Chain 2: Iteration: 2000 / 2000 [100%]  (Sampling) #> Chain 2:  #> Chain 2:  Elapsed Time: 0.028151 seconds (Warm-up) #> Chain 2:                0.027608 seconds (Sampling) #> Chain 2:                0.055759 seconds (Total) #> Chain 2:  #>  #> SAMPLING FOR MODEL '2d19b3a372313df641edf05db5e9f303' NOW (CHAIN 3). #> Chain 3:  #> Chain 3: Gradient evaluation took 6e-06 seconds #> Chain 3: 1000 transitions using 10 leapfrog steps per transition would take 0.06 seconds. #> Chain 3: Adjust your expectations accordingly! #> Chain 3:  #> Chain 3:  #> Chain 3: Iteration:    1 / 2000 [  0%]  (Warmup) #> Chain 3: Iteration:  200 / 2000 [ 10%]  (Warmup) #> Chain 3: Iteration:  400 / 2000 [ 20%]  (Warmup) #> Chain 3: Iteration:  600 / 2000 [ 30%]  (Warmup) #> Chain 3: Iteration:  800 / 2000 [ 40%]  (Warmup) #> Chain 3: Iteration: 1000 / 2000 [ 50%]  (Warmup) #> Chain 3: Iteration: 1001 / 2000 [ 50%]  (Sampling) #> Chain 3: Iteration: 1200 / 2000 [ 60%]  (Sampling) #> Chain 3: Iteration: 1400 / 2000 [ 70%]  (Sampling) #> Chain 3: Iteration: 1600 / 2000 [ 80%]  (Sampling) #> Chain 3: Iteration: 1800 / 2000 [ 90%]  (Sampling) #> Chain 3: Iteration: 2000 / 2000 [100%]  (Sampling) #> Chain 3:  #> Chain 3:  Elapsed Time: 0.026486 seconds (Warm-up) #> Chain 3:                0.026575 seconds (Sampling) #> Chain 3:                0.053061 seconds (Total) #> Chain 3:  #>  #> SAMPLING FOR MODEL '2d19b3a372313df641edf05db5e9f303' NOW (CHAIN 4). #> Chain 4:  #> Chain 4: Gradient evaluation took 5e-06 seconds #> Chain 4: 1000 transitions using 10 leapfrog steps per transition would take 0.05 seconds. #> Chain 4: Adjust your expectations accordingly! #> Chain 4:  #> Chain 4:  #> Chain 4: Iteration:    1 / 2000 [  0%]  (Warmup) #> Chain 4: Iteration:  200 / 2000 [ 10%]  (Warmup) #> Chain 4: Iteration:  400 / 2000 [ 20%]  (Warmup) #> Chain 4: Iteration:  600 / 2000 [ 30%]  (Warmup) #> Chain 4: Iteration:  800 / 2000 [ 40%]  (Warmup) #> Chain 4: Iteration: 1000 / 2000 [ 50%]  (Warmup) #> Chain 4: Iteration: 1001 / 2000 [ 50%]  (Sampling) #> Chain 4: Iteration: 1200 / 2000 [ 60%]  (Sampling) #> Chain 4: Iteration: 1400 / 2000 [ 70%]  (Sampling) #> Chain 4: Iteration: 1600 / 2000 [ 80%]  (Sampling) #> Chain 4: Iteration: 1800 / 2000 [ 90%]  (Sampling) #> Chain 4: Iteration: 2000 / 2000 [100%]  (Sampling) #> Chain 4:  #> Chain 4:  Elapsed Time: 0.02808 seconds (Warm-up) #> Chain 4:                0.025907 seconds (Sampling) #> Chain 4:                0.053987 seconds (Total) #> Chain 4:  estimate_density(model) #>        Parameter            x            y #> 1    b_Intercept 33.421207397 1.145473e-03 #> 2    b_Intercept 33.434634095 1.189259e-03 #> 3    b_Intercept 33.448060793 1.233774e-03 #> 4    b_Intercept 33.461487492 1.278984e-03 #> 5    b_Intercept 33.474914190 1.324977e-03 #> 6    b_Intercept 33.488340888 1.371600e-03 #> 7    b_Intercept 33.501767587 1.418773e-03 #> 8    b_Intercept 33.515194285 1.466451e-03 #> 9    b_Intercept 33.528620984 1.514587e-03 #> 10   b_Intercept 33.542047682 1.563133e-03 #> 11   b_Intercept 33.555474380 1.612109e-03 #> 12   b_Intercept 33.568901079 1.661353e-03 #> 13   b_Intercept 33.582327777 1.710808e-03 #> 14   b_Intercept 33.595754475 1.760417e-03 #> 15   b_Intercept 33.609181174 1.810124e-03 #> 16   b_Intercept 33.622607872 1.859864e-03 #> 17   b_Intercept 33.636034571 1.909544e-03 #> 18   b_Intercept 33.649461269 1.959096e-03 #> 19   b_Intercept 33.662887967 2.008457e-03 #> 20   b_Intercept 33.676314666 2.057568e-03 #> 21   b_Intercept 33.689741364 2.106365e-03 #> 22   b_Intercept 33.703168062 2.154733e-03 #> 23   b_Intercept 33.716594761 2.202569e-03 #> 24   b_Intercept 33.730021459 2.249869e-03 #> 25   b_Intercept 33.743448158 2.296579e-03 #> 26   b_Intercept 33.756874856 2.342642e-03 #> 27   b_Intercept 33.770301554 2.388007e-03 #> 28   b_Intercept 33.783728253 2.432474e-03 #> 29   b_Intercept 33.797154951 2.476045e-03 #> 30   b_Intercept 33.810581649 2.518745e-03 #> 31   b_Intercept 33.824008348 2.560533e-03 #> 32   b_Intercept 33.837435046 2.601376e-03 #> 33   b_Intercept 33.850861745 2.641240e-03 #> 34   b_Intercept 33.864288443 2.679849e-03 #> 35   b_Intercept 33.877715141 2.717389e-03 #> 36   b_Intercept 33.891141840 2.753872e-03 #> 37   b_Intercept 33.904568538 2.789288e-03 #> 38   b_Intercept 33.917995236 2.823634e-03 #> 39   b_Intercept 33.931421935 2.856873e-03 #> 40   b_Intercept 33.944848633 2.888803e-03 #> 41   b_Intercept 33.958275331 2.919691e-03 #> 42   b_Intercept 33.971702030 2.949558e-03 #> 43   b_Intercept 33.985128728 2.978431e-03 #> 44   b_Intercept 33.998555427 3.006342e-03 #> 45   b_Intercept 34.011982125 3.033250e-03 #> 46   b_Intercept 34.025408823 3.059153e-03 #> 47   b_Intercept 34.038835522 3.084265e-03 #> 48   b_Intercept 34.052262220 3.108648e-03 #> 49   b_Intercept 34.065688918 3.132365e-03 #> 50   b_Intercept 34.079115617 3.155487e-03 #> 51   b_Intercept 34.092542315 3.178030e-03 #> 52   b_Intercept 34.105969014 3.200137e-03 #> 53   b_Intercept 34.119395712 3.221957e-03 #> 54   b_Intercept 34.132822410 3.243584e-03 #> 55   b_Intercept 34.146249109 3.265115e-03 #> 56   b_Intercept 34.159675807 3.286653e-03 #> 57   b_Intercept 34.173102505 3.308365e-03 #> 58   b_Intercept 34.186529204 3.330389e-03 #> 59   b_Intercept 34.199955902 3.352831e-03 #> 60   b_Intercept 34.213382601 3.375811e-03 #> 61   b_Intercept 34.226809299 3.399447e-03 #> 62   b_Intercept 34.240235997 3.423866e-03 #> 63   b_Intercept 34.253662696 3.449480e-03 #> 64   b_Intercept 34.267089394 3.476211e-03 #> 65   b_Intercept 34.280516092 3.504186e-03 #> 66   b_Intercept 34.293942791 3.533531e-03 #> 67   b_Intercept 34.307369489 3.564372e-03 #> 68   b_Intercept 34.320796188 3.596951e-03 #> 69   b_Intercept 34.334222886 3.631691e-03 #> 70   b_Intercept 34.347649584 3.668388e-03 #> 71   b_Intercept 34.361076283 3.707160e-03 #> 72   b_Intercept 34.374502981 3.748124e-03 #> 73   b_Intercept 34.387929679 3.791395e-03 #> 74   b_Intercept 34.401356378 3.837404e-03 #> 75   b_Intercept 34.414783076 3.886356e-03 #> 76   b_Intercept 34.428209775 3.938007e-03 #> 77   b_Intercept 34.441636473 3.992453e-03 #> 78   b_Intercept 34.455063171 4.049783e-03 #> 79   b_Intercept 34.468489870 4.110083e-03 #> 80   b_Intercept 34.481916568 4.174015e-03 #> 81   b_Intercept 34.495343266 4.241372e-03 #> 82   b_Intercept 34.508769965 4.311965e-03 #> 83   b_Intercept 34.522196663 4.385851e-03 #> 84   b_Intercept 34.535623361 4.463079e-03 #> 85   b_Intercept 34.549050060 4.543695e-03 #> 86   b_Intercept 34.562476758 4.628578e-03 #> 87   b_Intercept 34.575903457 4.717009e-03 #> 88   b_Intercept 34.589330155 4.808926e-03 #> 89   b_Intercept 34.602756853 4.904340e-03 #> 90   b_Intercept 34.616183552 5.003254e-03 #> 91   b_Intercept 34.629610250 5.105793e-03 #> 92   b_Intercept 34.643036948 5.212603e-03 #> 93   b_Intercept 34.656463647 5.322864e-03 #> 94   b_Intercept 34.669890345 5.436543e-03 #> 95   b_Intercept 34.683317044 5.553604e-03 #> 96   b_Intercept 34.696743742 5.674005e-03 #> 97   b_Intercept 34.710170440 5.798007e-03 #> 98   b_Intercept 34.723597139 5.925759e-03 #> 99   b_Intercept 34.737023837 6.056640e-03 #> 100  b_Intercept 34.750450535 6.190581e-03 #> 101  b_Intercept 34.763877234 6.327509e-03 #> 102  b_Intercept 34.777303932 6.467346e-03 #> 103  b_Intercept 34.790730631 6.610429e-03 #> 104  b_Intercept 34.804157329 6.756499e-03 #> 105  b_Intercept 34.817584027 6.905158e-03 #> 106  b_Intercept 34.831010726 7.056312e-03 #> 107  b_Intercept 34.844437424 7.209869e-03 #> 108  b_Intercept 34.857864122 7.365732e-03 #> 109  b_Intercept 34.871290821 7.524248e-03 #> 110  b_Intercept 34.884717519 7.684917e-03 #> 111  b_Intercept 34.898144218 7.847536e-03 #> 112  b_Intercept 34.911570916 8.012009e-03 #> 113  b_Intercept 34.924997614 8.178244e-03 #> 114  b_Intercept 34.938424313 8.346164e-03 #> 115  b_Intercept 34.951851011 8.516029e-03 #> 116  b_Intercept 34.965277709 8.687329e-03 #> 117  b_Intercept 34.978704408 8.859986e-03 #> 118  b_Intercept 34.992131106 9.033925e-03 #> 119  b_Intercept 35.005557805 9.209074e-03 #> 120  b_Intercept 35.018984503 9.385439e-03 #> 121  b_Intercept 35.032411201 9.563066e-03 #> 122  b_Intercept 35.045837900 9.741684e-03 #> 123  b_Intercept 35.059264598 9.921249e-03 #> 124  b_Intercept 35.072691296 1.010172e-02 #> 125  b_Intercept 35.086117995 1.028307e-02 #> 126  b_Intercept 35.099544693 1.046537e-02 #> 127  b_Intercept 35.112971391 1.064860e-02 #> 128  b_Intercept 35.126398090 1.083265e-02 #> 129  b_Intercept 35.139824788 1.101751e-02 #> 130  b_Intercept 35.153251487 1.120320e-02 #> 131  b_Intercept 35.166678185 1.138972e-02 #> 132  b_Intercept 35.180104883 1.157728e-02 #> 133  b_Intercept 35.193531582 1.176581e-02 #> 134  b_Intercept 35.206958280 1.195529e-02 #> 135  b_Intercept 35.220384978 1.214578e-02 #> 136  b_Intercept 35.233811677 1.233733e-02 #> 137  b_Intercept 35.247238375 1.252999e-02 #> 138  b_Intercept 35.260665074 1.272416e-02 #> 139  b_Intercept 35.274091772 1.291966e-02 #> 140  b_Intercept 35.287518470 1.311655e-02 #> 141  b_Intercept 35.300945169 1.331493e-02 #> 142  b_Intercept 35.314371867 1.351487e-02 #> 143  b_Intercept 35.327798565 1.371655e-02 #> 144  b_Intercept 35.341225264 1.392044e-02 #> 145  b_Intercept 35.354651962 1.412627e-02 #> 146  b_Intercept 35.368078661 1.433415e-02 #> 147  b_Intercept 35.381505359 1.454418e-02 #> 148  b_Intercept 35.394932057 1.475647e-02 #> 149  b_Intercept 35.408358756 1.497139e-02 #> 150  b_Intercept 35.421785454 1.518926e-02 #> 151  b_Intercept 35.435212152 1.540980e-02 #> 152  b_Intercept 35.448638851 1.563313e-02 #> 153  b_Intercept 35.462065549 1.585934e-02 #> 154  b_Intercept 35.475492248 1.608855e-02 #> 155  b_Intercept 35.488918946 1.632138e-02 #> 156  b_Intercept 35.502345644 1.655781e-02 #> 157  b_Intercept 35.515772343 1.679760e-02 #> 158  b_Intercept 35.529199041 1.704085e-02 #> 159  b_Intercept 35.542625739 1.728765e-02 #> 160  b_Intercept 35.556052438 1.753808e-02 #> 161  b_Intercept 35.569479136 1.779307e-02 #> 162  b_Intercept 35.582905835 1.805206e-02 #> 163  b_Intercept 35.596332533 1.831496e-02 #> 164  b_Intercept 35.609759231 1.858182e-02 #> 165  b_Intercept 35.623185930 1.885270e-02 #> 166  b_Intercept 35.636612628 1.912772e-02 #> 167  b_Intercept 35.650039326 1.940791e-02 #> 168  b_Intercept 35.663466025 1.969228e-02 #> 169  b_Intercept 35.676892723 1.998088e-02 #> 170  b_Intercept 35.690319422 2.027373e-02 #> 171  b_Intercept 35.703746120 2.057086e-02 #> 172  b_Intercept 35.717172818 2.087259e-02 #> 173  b_Intercept 35.730599517 2.117947e-02 #> 174  b_Intercept 35.744026215 2.149068e-02 #> 175  b_Intercept 35.757452913 2.180622e-02 #> 176  b_Intercept 35.770879612 2.212609e-02 #> 177  b_Intercept 35.784306310 2.245030e-02 #> 178  b_Intercept 35.797733008 2.277942e-02 #> 179  b_Intercept 35.811159707 2.311344e-02 #> 180  b_Intercept 35.824586405 2.345177e-02 #> 181  b_Intercept 35.838013104 2.379442e-02 #> 182  b_Intercept 35.851439802 2.414137e-02 #> 183  b_Intercept 35.864866500 2.449260e-02 #> 184  b_Intercept 35.878293199 2.484895e-02 #> 185  b_Intercept 35.891719897 2.520986e-02 #> 186  b_Intercept 35.905146595 2.557503e-02 #> 187  b_Intercept 35.918573294 2.594445e-02 #> 188  b_Intercept 35.931999992 2.631811e-02 #> 189  b_Intercept 35.945426691 2.669599e-02 #> 190  b_Intercept 35.958853389 2.707917e-02 #> 191  b_Intercept 35.972280087 2.746661e-02 #> 192  b_Intercept 35.985706786 2.785826e-02 #> 193  b_Intercept 35.999133484 2.825412e-02 #> 194  b_Intercept 36.012560182 2.865419e-02 #> 195  b_Intercept 36.025986881 2.905866e-02 #> 196  b_Intercept 36.039413579 2.946826e-02 #> 197  b_Intercept 36.052840278 2.988207e-02 #> 198  b_Intercept 36.066266976 3.030009e-02 #> 199  b_Intercept 36.079693674 3.072232e-02 #> 200  b_Intercept 36.093120373 3.114877e-02 #> 201  b_Intercept 36.106547071 3.157987e-02 #> 202  b_Intercept 36.119973769 3.201588e-02 #> 203  b_Intercept 36.133400468 3.245610e-02 #> 204  b_Intercept 36.146827166 3.290055e-02 #> 205  b_Intercept 36.160253865 3.334921e-02 #> 206  b_Intercept 36.173680563 3.380210e-02 #> 207  b_Intercept 36.187107261 3.425990e-02 #> 208  b_Intercept 36.200533960 3.472232e-02 #> 209  b_Intercept 36.213960658 3.518895e-02 #> 210  b_Intercept 36.227387356 3.565977e-02 #> 211  b_Intercept 36.240814055 3.613476e-02 #> 212  b_Intercept 36.254240753 3.661393e-02 #> 213  b_Intercept 36.267667452 3.709817e-02 #> 214  b_Intercept 36.281094150 3.758670e-02 #> 215  b_Intercept 36.294520848 3.807934e-02 #> 216  b_Intercept 36.307947547 3.857606e-02 #> 217  b_Intercept 36.321374245 3.907683e-02 #> 218  b_Intercept 36.334800943 3.958172e-02 #> 219  b_Intercept 36.348227642 4.009159e-02 #> 220  b_Intercept 36.361654340 4.060542e-02 #> 221  b_Intercept 36.375081038 4.112318e-02 #> 222  b_Intercept 36.388507737 4.164485e-02 #> 223  b_Intercept 36.401934435 4.217040e-02 #> 224  b_Intercept 36.415361134 4.270010e-02 #> 225  b_Intercept 36.428787832 4.323432e-02 #> 226  b_Intercept 36.442214530 4.377232e-02 #> 227  b_Intercept 36.455641229 4.431408e-02 #> 228  b_Intercept 36.469067927 4.485956e-02 #> 229  b_Intercept 36.482494625 4.540876e-02 #> 230  b_Intercept 36.495921324 4.596215e-02 #> 231  b_Intercept 36.509348022 4.651968e-02 #> 232  b_Intercept 36.522774721 4.708086e-02 #> 233  b_Intercept 36.536201419 4.764569e-02 #> 234  b_Intercept 36.549628117 4.821417e-02 #> 235  b_Intercept 36.563054816 4.878628e-02 #> 236  b_Intercept 36.576481514 4.936276e-02 #> 237  b_Intercept 36.589908212 4.994315e-02 #> 238  b_Intercept 36.603334911 5.052721e-02 #> 239  b_Intercept 36.616761609 5.111496e-02 #> 240  b_Intercept 36.630188308 5.170643e-02 #> 241  b_Intercept 36.643615006 5.230164e-02 #> 242  b_Intercept 36.657041704 5.290159e-02 #> 243  b_Intercept 36.670468403 5.350542e-02 #> 244  b_Intercept 36.683895101 5.411312e-02 #> 245  b_Intercept 36.697321799 5.472474e-02 #> 246  b_Intercept 36.710748498 5.534034e-02 #> 247  b_Intercept 36.724175196 5.596017e-02 #> 248  b_Intercept 36.737601895 5.658498e-02 #> 249  b_Intercept 36.751028593 5.721399e-02 #> 250  b_Intercept 36.764455291 5.784725e-02 #> 251  b_Intercept 36.777881990 5.848484e-02 #> 252  b_Intercept 36.791308688 5.912683e-02 #> 253  b_Intercept 36.804735386 5.977380e-02 #> 254  b_Intercept 36.818162085 6.042606e-02 #> 255  b_Intercept 36.831588783 6.108302e-02 #> 256  b_Intercept 36.845015482 6.174474e-02 #> 257  b_Intercept 36.858442180 6.241132e-02 #> 258  b_Intercept 36.871868878 6.308284e-02 #> 259  b_Intercept 36.885295577 6.376027e-02 #> 260  b_Intercept 36.898722275 6.444336e-02 #> 261  b_Intercept 36.912148973 6.513171e-02 #> 262  b_Intercept 36.925575672 6.582543e-02 #> 263  b_Intercept 36.939002370 6.652460e-02 #> 264  b_Intercept 36.952429068 6.722932e-02 #> 265  b_Intercept 36.965855767 6.794098e-02 #> 266  b_Intercept 36.979282465 6.865863e-02 #> 267  b_Intercept 36.992709164 6.938216e-02 #> 268  b_Intercept 37.006135862 7.011164e-02 #> 269  b_Intercept 37.019562560 7.084718e-02 #> 270  b_Intercept 37.032989259 7.158898e-02 #> 271  b_Intercept 37.046415957 7.233853e-02 #> 272  b_Intercept 37.059842655 7.309443e-02 #> 273  b_Intercept 37.073269354 7.385674e-02 #> 274  b_Intercept 37.086696052 7.462554e-02 #> 275  b_Intercept 37.100122751 7.540088e-02 #> 276  b_Intercept 37.113549449 7.618339e-02 #> 277  b_Intercept 37.126976147 7.697382e-02 #> 278  b_Intercept 37.140402846 7.777099e-02 #> 279  b_Intercept 37.153829544 7.857495e-02 #> 280  b_Intercept 37.167256242 7.938572e-02 #> 281  b_Intercept 37.180682941 8.020334e-02 #> 282  b_Intercept 37.194109639 8.102878e-02 #> 283  b_Intercept 37.207536338 8.186192e-02 #> 284  b_Intercept 37.220963036 8.270191e-02 #> 285  b_Intercept 37.234389734 8.354872e-02 #> 286  b_Intercept 37.247816433 8.440231e-02 #> 287  b_Intercept 37.261243131 8.526264e-02 #> 288  b_Intercept 37.274669829 8.613096e-02 #> 289  b_Intercept 37.288096528 8.700625e-02 #> 290  b_Intercept 37.301523226 8.788797e-02 #> 291  b_Intercept 37.314949925 8.877602e-02 #> 292  b_Intercept 37.328376623 8.967027e-02 #> 293  b_Intercept 37.341803321 9.057057e-02 #> 294  b_Intercept 37.355230020 9.147822e-02 #> 295  b_Intercept 37.368656718 9.239147e-02 #> 296  b_Intercept 37.382083416 9.331009e-02 #> 297  b_Intercept 37.395510115 9.423386e-02 #> 298  b_Intercept 37.408936813 9.516255e-02 #> 299  b_Intercept 37.422363512 9.609614e-02 #> 300  b_Intercept 37.435790210 9.703489e-02 #> 301  b_Intercept 37.449216908 9.797755e-02 #> 302  b_Intercept 37.462643607 9.892380e-02 #> 303  b_Intercept 37.476070305 9.987332e-02 #> 304  b_Intercept 37.489497003 1.008258e-01 #> 305  b_Intercept 37.502923702 1.017811e-01 #> 306  b_Intercept 37.516350400 1.027388e-01 #> 307  b_Intercept 37.529777098 1.036981e-01 #> 308  b_Intercept 37.543203797 1.046586e-01 #> 309  b_Intercept 37.556630495 1.056200e-01 #> 310  b_Intercept 37.570057194 1.065819e-01 #> 311  b_Intercept 37.583483892 1.075439e-01 #> 312  b_Intercept 37.596910590 1.085052e-01 #> 313  b_Intercept 37.610337289 1.094657e-01 #> 314  b_Intercept 37.623763987 1.104249e-01 #> 315  b_Intercept 37.637190685 1.113824e-01 #> 316  b_Intercept 37.650617384 1.123379e-01 #> 317  b_Intercept 37.664044082 1.132903e-01 #> 318  b_Intercept 37.677470781 1.142398e-01 #> 319  b_Intercept 37.690897479 1.151860e-01 #> 320  b_Intercept 37.704324177 1.161288e-01 #> 321  b_Intercept 37.717750876 1.170677e-01 #> 322  b_Intercept 37.731177574 1.180026e-01 #> 323  b_Intercept 37.744604272 1.189320e-01 #> 324  b_Intercept 37.758030971 1.198569e-01 #> 325  b_Intercept 37.771457669 1.207770e-01 #> 326  b_Intercept 37.784884368 1.216923e-01 #> 327  b_Intercept 37.798311066 1.226026e-01 #> 328  b_Intercept 37.811737764 1.235075e-01 #> 329  b_Intercept 37.825164463 1.244063e-01 #> 330  b_Intercept 37.838591161 1.253001e-01 #> 331  b_Intercept 37.852017859 1.261889e-01 #> 332  b_Intercept 37.865444558 1.270726e-01 #> 333  b_Intercept 37.878871256 1.279515e-01 #> 334  b_Intercept 37.892297955 1.288250e-01 #> 335  b_Intercept 37.905724653 1.296934e-01 #> 336  b_Intercept 37.919151351 1.305576e-01 #> 337  b_Intercept 37.932578050 1.314177e-01 #> 338  b_Intercept 37.946004748 1.322740e-01 #> 339  b_Intercept 37.959431446 1.331268e-01 #> 340  b_Intercept 37.972858145 1.339757e-01 #> 341  b_Intercept 37.986284843 1.348218e-01 #> 342  b_Intercept 37.999711542 1.356655e-01 #> 343  b_Intercept 38.013138240 1.365072e-01 #> 344  b_Intercept 38.026564938 1.373472e-01 #> 345  b_Intercept 38.039991637 1.381860e-01 #> 346  b_Intercept 38.053418335 1.390237e-01 #> 347  b_Intercept 38.066845033 1.398611e-01 #> 348  b_Intercept 38.080271732 1.406985e-01 #> 349  b_Intercept 38.093698430 1.415364e-01 #> 350  b_Intercept 38.107125129 1.423751e-01 #> 351  b_Intercept 38.120551827 1.432150e-01 #> 352  b_Intercept 38.133978525 1.440568e-01 #> 353  b_Intercept 38.147405224 1.449006e-01 #> 354  b_Intercept 38.160831922 1.457467e-01 #> 355  b_Intercept 38.174258620 1.465954e-01 #> 356  b_Intercept 38.187685319 1.474468e-01 #> 357  b_Intercept 38.201112017 1.483016e-01 #> 358  b_Intercept 38.214538715 1.491602e-01 #> 359  b_Intercept 38.227965414 1.500223e-01 #> 360  b_Intercept 38.241392112 1.508878e-01 #> 361  b_Intercept 38.254818811 1.517571e-01 #> 362  b_Intercept 38.268245509 1.526300e-01 #> 363  b_Intercept 38.281672207 1.535073e-01 #> 364  b_Intercept 38.295098906 1.543885e-01 #> 365  b_Intercept 38.308525604 1.552734e-01 #> 366  b_Intercept 38.321952302 1.561617e-01 #> 367  b_Intercept 38.335379001 1.570533e-01 #> 368  b_Intercept 38.348805699 1.579481e-01 #> 369  b_Intercept 38.362232398 1.588465e-01 #> 370  b_Intercept 38.375659096 1.597475e-01 #> 371  b_Intercept 38.389085794 1.606509e-01 #> 372  b_Intercept 38.402512493 1.615562e-01 #> 373  b_Intercept 38.415939191 1.624631e-01 #> 374  b_Intercept 38.429365889 1.633714e-01 #> 375  b_Intercept 38.442792588 1.642808e-01 #> 376  b_Intercept 38.456219286 1.651904e-01 #> 377  b_Intercept 38.469645985 1.661000e-01 #> 378  b_Intercept 38.483072683 1.670091e-01 #> 379  b_Intercept 38.496499381 1.679173e-01 #> 380  b_Intercept 38.509926080 1.688239e-01 #> 381  b_Intercept 38.523352778 1.697283e-01 #> 382  b_Intercept 38.536779476 1.706302e-01 #> 383  b_Intercept 38.550206175 1.715293e-01 #> 384  b_Intercept 38.563632873 1.724250e-01 #> 385  b_Intercept 38.577059572 1.733171e-01 #> 386  b_Intercept 38.590486270 1.742044e-01 #> 387  b_Intercept 38.603912968 1.750865e-01 #> 388  b_Intercept 38.617339667 1.759635e-01 #> 389  b_Intercept 38.630766365 1.768352e-01 #> 390  b_Intercept 38.644193063 1.777012e-01 #> 391  b_Intercept 38.657619762 1.785612e-01 #> 392  b_Intercept 38.671046460 1.794136e-01 #> 393  b_Intercept 38.684473159 1.802590e-01 #> 394  b_Intercept 38.697899857 1.810975e-01 #> 395  b_Intercept 38.711326555 1.819291e-01 #> 396  b_Intercept 38.724753254 1.827535e-01 #> 397  b_Intercept 38.738179952 1.835707e-01 #> 398  b_Intercept 38.751606650 1.843784e-01 #> 399  b_Intercept 38.765033349 1.851788e-01 #> 400  b_Intercept 38.778460047 1.859716e-01 #> 401  b_Intercept 38.791886745 1.867569e-01 #> 402  b_Intercept 38.805313444 1.875347e-01 #> 403  b_Intercept 38.818740142 1.883045e-01 #> 404  b_Intercept 38.832166841 1.890656e-01 #> 405  b_Intercept 38.845593539 1.898193e-01 #> 406  b_Intercept 38.859020237 1.905659e-01 #> 407  b_Intercept 38.872446936 1.913054e-01 #> 408  b_Intercept 38.885873634 1.920381e-01 #> 409  b_Intercept 38.899300332 1.927631e-01 #> 410  b_Intercept 38.912727031 1.934807e-01 #> 411  b_Intercept 38.926153729 1.941919e-01 #> 412  b_Intercept 38.939580428 1.948969e-01 #> 413  b_Intercept 38.953007126 1.955958e-01 #> 414  b_Intercept 38.966433824 1.962889e-01 #> 415  b_Intercept 38.979860523 1.969752e-01 #> 416  b_Intercept 38.993287221 1.976556e-01 #> 417  b_Intercept 39.006713919 1.983307e-01 #> 418  b_Intercept 39.020140618 1.990006e-01 #> 419  b_Intercept 39.033567316 1.996654e-01 #> 420  b_Intercept 39.046994015 2.003252e-01 #> 421  b_Intercept 39.060420713 2.009790e-01 #> 422  b_Intercept 39.073847411 2.016279e-01 #> 423  b_Intercept 39.087274110 2.022722e-01 #> 424  b_Intercept 39.100700808 2.029117e-01 #> 425  b_Intercept 39.114127506 2.035466e-01 #> 426  b_Intercept 39.127554205 2.041766e-01 #> 427  b_Intercept 39.140980903 2.048009e-01 #> 428  b_Intercept 39.154407602 2.054203e-01 #> 429  b_Intercept 39.167834300 2.060349e-01 #> 430  b_Intercept 39.181260998 2.066444e-01 #> 431  b_Intercept 39.194687697 2.072488e-01 #> 432  b_Intercept 39.208114395 2.078475e-01 #> 433  b_Intercept 39.221541093 2.084397e-01 #> 434  b_Intercept 39.234967792 2.090261e-01 #> 435  b_Intercept 39.248394490 2.096065e-01 #> 436  b_Intercept 39.261821189 2.101806e-01 #> 437  b_Intercept 39.275247887 2.107483e-01 #> 438  b_Intercept 39.288674585 2.113082e-01 #> 439  b_Intercept 39.302101284 2.118600e-01 #> 440  b_Intercept 39.315527982 2.124042e-01 #> 441  b_Intercept 39.328954680 2.129406e-01 #> 442  b_Intercept 39.342381379 2.134687e-01 #> 443  b_Intercept 39.355808077 2.139883e-01 #> 444  b_Intercept 39.369234775 2.144970e-01 #> 445  b_Intercept 39.382661474 2.149957e-01 #> 446  b_Intercept 39.396088172 2.154846e-01 #> 447  b_Intercept 39.409514871 2.159633e-01 #> 448  b_Intercept 39.422941569 2.164314e-01 #> 449  b_Intercept 39.436368267 2.168885e-01 #> 450  b_Intercept 39.449794966 2.173312e-01 #> 451  b_Intercept 39.463221664 2.177622e-01 #> 452  b_Intercept 39.476648362 2.181809e-01 #> 453  b_Intercept 39.490075061 2.185871e-01 #> 454  b_Intercept 39.503501759 2.189806e-01 #> 455  b_Intercept 39.516928458 2.193599e-01 #> 456  b_Intercept 39.530355156 2.197231e-01 #> 457  b_Intercept 39.543781854 2.200724e-01 #> 458  b_Intercept 39.557208553 2.204076e-01 #> 459  b_Intercept 39.570635251 2.207285e-01 #> 460  b_Intercept 39.584061949 2.210348e-01 #> 461  b_Intercept 39.597488648 2.213244e-01 #> 462  b_Intercept 39.610915346 2.215970e-01 #> 463  b_Intercept 39.624342045 2.218544e-01 #> 464  b_Intercept 39.637768743 2.220966e-01 #> 465  b_Intercept 39.651195441 2.223233e-01 #> 466  b_Intercept 39.664622140 2.225346e-01 #> 467  b_Intercept 39.678048838 2.227275e-01 #> 468  b_Intercept 39.691475536 2.229036e-01 #> 469  b_Intercept 39.704902235 2.230641e-01 #> 470  b_Intercept 39.718328933 2.232091e-01 #> 471  b_Intercept 39.731755632 2.233385e-01 #> 472  b_Intercept 39.745182330 2.234525e-01 #> 473  b_Intercept 39.758609028 2.235473e-01 #> 474  b_Intercept 39.772035727 2.236266e-01 #> 475  b_Intercept 39.785462425 2.236908e-01 #> 476  b_Intercept 39.798889123 2.237400e-01 #> 477  b_Intercept 39.812315822 2.237743e-01 #> 478  b_Intercept 39.825742520 2.237933e-01 #> 479  b_Intercept 39.839169219 2.237946e-01 #> 480  b_Intercept 39.852595917 2.237816e-01 #> 481  b_Intercept 39.866022615 2.237545e-01 #> 482  b_Intercept 39.879449314 2.237136e-01 #> 483  b_Intercept 39.892876012 2.236589e-01 #> 484  b_Intercept 39.906302710 2.235893e-01 #> 485  b_Intercept 39.919729409 2.235043e-01 #> 486  b_Intercept 39.933156107 2.234062e-01 #> 487  b_Intercept 39.946582805 2.232953e-01 #> 488  b_Intercept 39.960009504 2.231717e-01 #> 489  b_Intercept 39.973436202 2.230355e-01 #> 490  b_Intercept 39.986862901 2.228851e-01 #> 491  b_Intercept 40.000289599 2.227213e-01 #> 492  b_Intercept 40.013716297 2.225455e-01 #> 493  b_Intercept 40.027142996 2.223579e-01 #> 494  b_Intercept 40.040569694 2.221586e-01 #> 495  b_Intercept 40.053996392 2.219476e-01 #> 496  b_Intercept 40.067423091 2.217226e-01 #> 497  b_Intercept 40.080849789 2.214857e-01 #> 498  b_Intercept 40.094276488 2.212374e-01 #> 499  b_Intercept 40.107703186 2.209778e-01 #> 500  b_Intercept 40.121129884 2.207070e-01 #> 501  b_Intercept 40.134556583 2.204247e-01 #> 502  b_Intercept 40.147983281 2.201283e-01 #> 503  b_Intercept 40.161409979 2.198207e-01 #> 504  b_Intercept 40.174836678 2.195017e-01 #> 505  b_Intercept 40.188263376 2.191715e-01 #> 506  b_Intercept 40.201690075 2.188298e-01 #> 507  b_Intercept 40.215116773 2.184759e-01 #> 508  b_Intercept 40.228543471 2.181082e-01 #> 509  b_Intercept 40.241970170 2.177290e-01 #> 510  b_Intercept 40.255396868 2.173381e-01 #> 511  b_Intercept 40.268823566 2.169354e-01 #> 512  b_Intercept 40.282250265 2.165209e-01 #> 513  b_Intercept 40.295676963 2.160929e-01 #> 514  b_Intercept 40.309103662 2.156512e-01 #> 515  b_Intercept 40.322530360 2.151975e-01 #> 516  b_Intercept 40.335957058 2.147315e-01 #> 517  b_Intercept 40.349383757 2.142533e-01 #> 518  b_Intercept 40.362810455 2.137629e-01 #> 519  b_Intercept 40.376237153 2.132576e-01 #> 520  b_Intercept 40.389663852 2.127390e-01 #> 521  b_Intercept 40.403090550 2.122080e-01 #> 522  b_Intercept 40.416517249 2.116645e-01 #> 523  b_Intercept 40.429943947 2.111085e-01 #> 524  b_Intercept 40.443370645 2.105400e-01 #> 525  b_Intercept 40.456797344 2.099560e-01 #> 526  b_Intercept 40.470224042 2.093593e-01 #> 527  b_Intercept 40.483650740 2.087504e-01 #> 528  b_Intercept 40.497077439 2.081291e-01 #> 529  b_Intercept 40.510504137 2.074957e-01 #> 530  b_Intercept 40.523930836 2.068496e-01 #> 531  b_Intercept 40.537357534 2.061889e-01 #> 532  b_Intercept 40.550784232 2.055164e-01 #> 533  b_Intercept 40.564210931 2.048322e-01 #> 534  b_Intercept 40.577637629 2.041365e-01 #> 535  b_Intercept 40.591064327 2.034295e-01 #> 536  b_Intercept 40.604491026 2.027101e-01 #> 537  b_Intercept 40.617917724 2.019781e-01 #> 538  b_Intercept 40.631344422 2.012353e-01 #> 539  b_Intercept 40.644771121 2.004821e-01 #> 540  b_Intercept 40.658197819 1.997185e-01 #> 541  b_Intercept 40.671624518 1.989449e-01 #> 542  b_Intercept 40.685051216 1.981598e-01 #> 543  b_Intercept 40.698477914 1.973642e-01 #> 544  b_Intercept 40.711904613 1.965593e-01 #> 545  b_Intercept 40.725331311 1.957453e-01 #> 546  b_Intercept 40.738758009 1.949224e-01 #> 547  b_Intercept 40.752184708 1.940909e-01 #> 548  b_Intercept 40.765611406 1.932492e-01 #> 549  b_Intercept 40.779038105 1.923990e-01 #> 550  b_Intercept 40.792464803 1.915409e-01 #> 551  b_Intercept 40.805891501 1.906752e-01 #> 552  b_Intercept 40.819318200 1.898020e-01 #> 553  b_Intercept 40.832744898 1.889213e-01 #> 554  b_Intercept 40.846171596 1.880319e-01 #> 555  b_Intercept 40.859598295 1.871357e-01 #> 556  b_Intercept 40.873024993 1.862328e-01 #> 557  b_Intercept 40.886451692 1.853234e-01 #> 558  b_Intercept 40.899878390 1.844076e-01 #> 559  b_Intercept 40.913305088 1.834852e-01 #> 560  b_Intercept 40.926731787 1.825557e-01 #> 561  b_Intercept 40.940158485 1.816203e-01 #> 562  b_Intercept 40.953585183 1.806793e-01 #> 563  b_Intercept 40.967011882 1.797326e-01 #> 564  b_Intercept 40.980438580 1.787804e-01 #> 565  b_Intercept 40.993865279 1.778222e-01 #> 566  b_Intercept 41.007291977 1.768580e-01 #> 567  b_Intercept 41.020718675 1.758887e-01 #> 568  b_Intercept 41.034145374 1.749144e-01 #> 569  b_Intercept 41.047572072 1.739352e-01 #> 570  b_Intercept 41.060998770 1.729511e-01 #> 571  b_Intercept 41.074425469 1.719614e-01 #> 572  b_Intercept 41.087852167 1.709667e-01 #> 573  b_Intercept 41.101278866 1.699674e-01 #> 574  b_Intercept 41.114705564 1.689637e-01 #> 575  b_Intercept 41.128132262 1.679556e-01 #> 576  b_Intercept 41.141558961 1.669432e-01 #> 577  b_Intercept 41.154985659 1.659256e-01 #> 578  b_Intercept 41.168412357 1.649038e-01 #> 579  b_Intercept 41.181839056 1.638780e-01 #> 580  b_Intercept 41.195265754 1.628483e-01 #> 581  b_Intercept 41.208692452 1.618148e-01 #> 582  b_Intercept 41.222119151 1.607773e-01 #> 583  b_Intercept 41.235545849 1.597355e-01 #> 584  b_Intercept 41.248972548 1.586901e-01 #> 585  b_Intercept 41.262399246 1.576413e-01 #> 586  b_Intercept 41.275825944 1.565892e-01 #> 587  b_Intercept 41.289252643 1.555338e-01 #> 588  b_Intercept 41.302679341 1.544749e-01 #> 589  b_Intercept 41.316106039 1.534126e-01 #> 590  b_Intercept 41.329532738 1.523473e-01 #> 591  b_Intercept 41.342959436 1.512792e-01 #> 592  b_Intercept 41.356386135 1.502083e-01 #> 593  b_Intercept 41.369812833 1.491348e-01 #> 594  b_Intercept 41.383239531 1.480582e-01 #> 595  b_Intercept 41.396666230 1.469789e-01 #> 596  b_Intercept 41.410092928 1.458972e-01 #> 597  b_Intercept 41.423519626 1.448132e-01 #> 598  b_Intercept 41.436946325 1.437269e-01 #> 599  b_Intercept 41.450373023 1.426384e-01 #> 600  b_Intercept 41.463799722 1.415473e-01 #> 601  b_Intercept 41.477226420 1.404540e-01 #> 602  b_Intercept 41.490653118 1.393586e-01 #> 603  b_Intercept 41.504079817 1.382613e-01 #> 604  b_Intercept 41.517506515 1.371620e-01 #> 605  b_Intercept 41.530933213 1.360607e-01 #> 606  b_Intercept 41.544359912 1.349571e-01 #> 607  b_Intercept 41.557786610 1.338516e-01 #> 608  b_Intercept 41.571213309 1.327442e-01 #> 609  b_Intercept 41.584640007 1.316350e-01 #> 610  b_Intercept 41.598066705 1.305240e-01 #> 611  b_Intercept 41.611493404 1.294110e-01 #> 612  b_Intercept 41.624920102 1.282959e-01 #> 613  b_Intercept 41.638346800 1.271790e-01 #> 614  b_Intercept 41.651773499 1.260604e-01 #> 615  b_Intercept 41.665200197 1.249400e-01 #> 616  b_Intercept 41.678626896 1.238180e-01 #> 617  b_Intercept 41.692053594 1.226940e-01 #> 618  b_Intercept 41.705480292 1.215682e-01 #> 619  b_Intercept 41.718906991 1.204408e-01 #> 620  b_Intercept 41.732333689 1.193119e-01 #> 621  b_Intercept 41.745760387 1.181816e-01 #> 622  b_Intercept 41.759187086 1.170498e-01 #> 623  b_Intercept 41.772613784 1.159166e-01 #> 624  b_Intercept 41.786040482 1.147822e-01 #> 625  b_Intercept 41.799467181 1.136467e-01 #> 626  b_Intercept 41.812893879 1.125104e-01 #> 627  b_Intercept 41.826320578 1.113734e-01 #> 628  b_Intercept 41.839747276 1.102359e-01 #> 629  b_Intercept 41.853173974 1.090980e-01 #> 630  b_Intercept 41.866600673 1.079601e-01 #> 631  b_Intercept 41.880027371 1.068224e-01 #> 632  b_Intercept 41.893454069 1.056852e-01 #> 633  b_Intercept 41.906880768 1.045487e-01 #> 634  b_Intercept 41.920307466 1.034133e-01 #> 635  b_Intercept 41.933734165 1.022797e-01 #> 636  b_Intercept 41.947160863 1.011480e-01 #> 637  b_Intercept 41.960587561 1.000184e-01 #> 638  b_Intercept 41.974014260 9.889150e-02 #> 639  b_Intercept 41.987440958 9.776752e-02 #> 640  b_Intercept 42.000867656 9.664733e-02 #> 641  b_Intercept 42.014294355 9.553169e-02 #> 642  b_Intercept 42.027721053 9.442053e-02 #> 643  b_Intercept 42.041147752 9.331428e-02 #> 644  b_Intercept 42.054574450 9.221338e-02 #> 645  b_Intercept 42.068001148 9.111827e-02 #> 646  b_Intercept 42.081427847 9.003063e-02 #> 647  b_Intercept 42.094854545 8.895062e-02 #> 648  b_Intercept 42.108281243 8.787813e-02 #> 649  b_Intercept 42.121707942 8.681361e-02 #> 650  b_Intercept 42.135134640 8.575753e-02 #> 651  b_Intercept 42.148561339 8.471034e-02 #> 652  b_Intercept 42.161988037 8.367485e-02 #> 653  b_Intercept 42.175414735 8.264978e-02 #> 654  b_Intercept 42.188841434 8.163523e-02 #> 655  b_Intercept 42.202268132 8.063163e-02 #> 656  b_Intercept 42.215694830 7.963938e-02 #> 657  b_Intercept 42.229121529 7.865919e-02 #> 658  b_Intercept 42.242548227 7.769415e-02 #> 659  b_Intercept 42.255974926 7.674180e-02 #> 660  b_Intercept 42.269401624 7.580244e-02 #> 661  b_Intercept 42.282828322 7.487637e-02 #> 662  b_Intercept 42.296255021 7.396384e-02 #> 663  b_Intercept 42.309681719 7.306632e-02 #> 664  b_Intercept 42.323108417 7.218541e-02 #> 665  b_Intercept 42.336535116 7.131881e-02 #> 666  b_Intercept 42.349961814 7.046663e-02 #> 667  b_Intercept 42.363388512 6.962900e-02 #> 668  b_Intercept 42.376815211 6.880600e-02 #> 669  b_Intercept 42.390241909 6.799982e-02 #> 670  b_Intercept 42.403668608 6.721007e-02 #> 671  b_Intercept 42.417095306 6.643499e-02 #> 672  b_Intercept 42.430522004 6.567448e-02 #> 673  b_Intercept 42.443948703 6.492848e-02 #> 674  b_Intercept 42.457375401 6.419686e-02 #> 675  b_Intercept 42.470802099 6.348234e-02 #> 676  b_Intercept 42.484228798 6.278259e-02 #> 677  b_Intercept 42.497655496 6.209653e-02 #> 678  b_Intercept 42.511082195 6.142391e-02 #> 679  b_Intercept 42.524508893 6.076448e-02 #> 680  b_Intercept 42.537935591 6.011795e-02 #> 681  b_Intercept 42.551362290 5.948718e-02 #> 682  b_Intercept 42.564788988 5.886842e-02 #> 683  b_Intercept 42.578215686 5.826130e-02 #> 684  b_Intercept 42.591642385 5.766545e-02 #> 685  b_Intercept 42.605069083 5.708047e-02 #> 686  b_Intercept 42.618495782 5.650655e-02 #> 687  b_Intercept 42.631922480 5.594454e-02 #> 688  b_Intercept 42.645349178 5.539186e-02 #> 689  b_Intercept 42.658775877 5.484809e-02 #> 690  b_Intercept 42.672202575 5.431277e-02 #> 691  b_Intercept 42.685629273 5.378548e-02 #> 692  b_Intercept 42.699055972 5.326659e-02 #> 693  b_Intercept 42.712482670 5.275562e-02 #> 694  b_Intercept 42.725909369 5.225103e-02 #> 695  b_Intercept 42.739336067 5.175241e-02 #> 696  b_Intercept 42.752762765 5.125932e-02 #> 697  b_Intercept 42.766189464 5.077133e-02 #> 698  b_Intercept 42.779616162 5.028877e-02 #> 699  b_Intercept 42.793042860 4.981063e-02 #> 700  b_Intercept 42.806469559 4.933613e-02 #> 701  b_Intercept 42.819896257 4.886489e-02 #> 702  b_Intercept 42.833322956 4.839657e-02 #> 703  b_Intercept 42.846749654 4.793082e-02 #> 704  b_Intercept 42.860176352 4.746772e-02 #> 705  b_Intercept 42.873603051 4.700640e-02 #> 706  b_Intercept 42.887029749 4.654651e-02 #> 707  b_Intercept 42.900456447 4.608780e-02 #> 708  b_Intercept 42.913883146 4.563000e-02 #> 709  b_Intercept 42.927309844 4.517291e-02 #> 710  b_Intercept 42.940736543 4.471629e-02 #> 711  b_Intercept 42.954163241 4.425983e-02 #> 712  b_Intercept 42.967589939 4.380334e-02 #> 713  b_Intercept 42.981016638 4.334668e-02 #> 714  b_Intercept 42.994443336 4.288973e-02 #> 715  b_Intercept 43.007870034 4.243231e-02 #> 716  b_Intercept 43.021296733 4.197423e-02 #> 717  b_Intercept 43.034723431 4.151550e-02 #> 718  b_Intercept 43.048150129 4.105608e-02 #> 719  b_Intercept 43.061576828 4.059592e-02 #> 720  b_Intercept 43.075003526 4.013500e-02 #> 721  b_Intercept 43.088430225 3.967318e-02 #> 722  b_Intercept 43.101856923 3.921051e-02 #> 723  b_Intercept 43.115283621 3.874711e-02 #> 724  b_Intercept 43.128710320 3.828301e-02 #> 725  b_Intercept 43.142137018 3.781826e-02 #> 726  b_Intercept 43.155563716 3.735291e-02 #> 727  b_Intercept 43.168990415 3.688695e-02 #> 728  b_Intercept 43.182417113 3.642057e-02 #> 729  b_Intercept 43.195843812 3.595390e-02 #> 730  b_Intercept 43.209270510 3.548703e-02 #> 731  b_Intercept 43.222697208 3.502007e-02 #> 732  b_Intercept 43.236123907 3.455312e-02 #> 733  b_Intercept 43.249550605 3.408639e-02 #> 734  b_Intercept 43.262977303 3.362001e-02 #> 735  b_Intercept 43.276404002 3.315410e-02 #> 736  b_Intercept 43.289830700 3.268879e-02 #> 737  b_Intercept 43.303257399 3.222420e-02 #> 738  b_Intercept 43.316684097 3.176056e-02 #> 739  b_Intercept 43.330110795 3.129818e-02 #> 740  b_Intercept 43.343537494 3.083705e-02 #> 741  b_Intercept 43.356964192 3.037729e-02 #> 742  b_Intercept 43.370390890 2.991903e-02 #> 743  b_Intercept 43.383817589 2.946242e-02 #> 744  b_Intercept 43.397244287 2.900784e-02 #> 745  b_Intercept 43.410670986 2.855552e-02 #> 746  b_Intercept 43.424097684 2.810534e-02 #> 747  b_Intercept 43.437524382 2.765742e-02 #> 748  b_Intercept 43.450951081 2.721190e-02 #> 749  b_Intercept 43.464377779 2.676890e-02 #> 750  b_Intercept 43.477804477 2.632904e-02 #> 751  b_Intercept 43.491231176 2.589225e-02 #> 752  b_Intercept 43.504657874 2.545841e-02 #> 753  b_Intercept 43.518084573 2.502762e-02 #> 754  b_Intercept 43.531511271 2.460001e-02 #> 755  b_Intercept 43.544937969 2.417568e-02 #> 756  b_Intercept 43.558364668 2.375557e-02 #> 757  b_Intercept 43.571791366 2.333909e-02 #> 758  b_Intercept 43.585218064 2.292624e-02 #> 759  b_Intercept 43.598644763 2.251712e-02 #> 760  b_Intercept 43.612071461 2.211181e-02 #> 761  b_Intercept 43.625498159 2.171055e-02 #> 762  b_Intercept 43.638924858 2.131422e-02 #> 763  b_Intercept 43.652351556 2.092201e-02 #> 764  b_Intercept 43.665778255 2.053399e-02 #> 765  b_Intercept 43.679204953 2.015024e-02 #> 766  b_Intercept 43.692631651 1.977083e-02 #> 767  b_Intercept 43.706058350 1.939626e-02 #> 768  b_Intercept 43.719485048 1.902696e-02 #> 769  b_Intercept 43.732911746 1.866224e-02 #> 770  b_Intercept 43.746338445 1.830218e-02 #> 771  b_Intercept 43.759765143 1.794682e-02 #> 772  b_Intercept 43.773191842 1.759623e-02 #> 773  b_Intercept 43.786618540 1.725122e-02 #> 774  b_Intercept 43.800045238 1.691167e-02 #> 775  b_Intercept 43.813471937 1.657707e-02 #> 776  b_Intercept 43.826898635 1.624750e-02 #> 777  b_Intercept 43.840325333 1.592298e-02 #> 778  b_Intercept 43.853752032 1.560358e-02 #> 779  b_Intercept 43.867178730 1.529045e-02 #> 780  b_Intercept 43.880605429 1.498280e-02 #> 781  b_Intercept 43.894032127 1.468041e-02 #> 782  b_Intercept 43.907458825 1.438331e-02 #> 783  b_Intercept 43.920885524 1.409153e-02 #> 784  b_Intercept 43.934312222 1.380515e-02 #> 785  b_Intercept 43.947738920 1.352554e-02 #> 786  b_Intercept 43.961165619 1.325133e-02 #> 787  b_Intercept 43.974592317 1.298256e-02 #> 788  b_Intercept 43.988019016 1.271923e-02 #> 789  b_Intercept 44.001445714 1.246134e-02 #> 790  b_Intercept 44.014872412 1.220928e-02 #> 791  b_Intercept 44.028299111 1.196374e-02 #> 792  b_Intercept 44.041725809 1.172364e-02 #> 793  b_Intercept 44.055152507 1.148897e-02 #> 794  b_Intercept 44.068579206 1.125971e-02 #> 795  b_Intercept 44.082005904 1.103583e-02 #> 796  b_Intercept 44.095432603 1.081799e-02 #> 797  b_Intercept 44.108859301 1.060617e-02 #> 798  b_Intercept 44.122285999 1.039961e-02 #> 799  b_Intercept 44.135712698 1.019825e-02 #> 800  b_Intercept 44.149139396 1.000204e-02 #> 801  b_Intercept 44.162566094 9.810914e-03 #> 802  b_Intercept 44.175992793 9.625728e-03 #> 803  b_Intercept 44.189419491 9.445828e-03 #> 804  b_Intercept 44.202846189 9.270740e-03 #> 805  b_Intercept 44.216272888 9.100379e-03 #> 806  b_Intercept 44.229699586 8.934651e-03 #> 807  b_Intercept 44.243126285 8.773462e-03 #> 808  b_Intercept 44.256552983 8.617757e-03 #> 809  b_Intercept 44.269979681 8.466383e-03 #> 810  b_Intercept 44.283406380 8.319142e-03 #> 811  b_Intercept 44.296833078 8.175918e-03 #> 812  b_Intercept 44.310259776 8.036586e-03 #> 813  b_Intercept 44.323686475 7.901168e-03 #> 814  b_Intercept 44.337113173 7.770138e-03 #> 815  b_Intercept 44.350539872 7.642517e-03 #> 816  b_Intercept 44.363966570 7.518171e-03 #> 817  b_Intercept 44.377393268 7.396962e-03 #> 818  b_Intercept 44.390819967 7.278751e-03 #> 819  b_Intercept 44.404246665 7.163663e-03 #> 820  b_Intercept 44.417673363 7.051660e-03 #> 821  b_Intercept 44.431100062 6.942134e-03 #> 822  b_Intercept 44.444526760 6.834946e-03 #> 823  b_Intercept 44.457953459 6.729957e-03 #> 824  b_Intercept 44.471380157 6.627032e-03 #> 825  b_Intercept 44.484806855 6.526309e-03 #> 826  b_Intercept 44.498233554 6.427488e-03 #> 827  b_Intercept 44.511660252 6.330244e-03 #> 828  b_Intercept 44.525086950 6.234454e-03 #> 829  b_Intercept 44.538513649 6.139997e-03 #> 830  b_Intercept 44.551940347 6.046760e-03 #> 831  b_Intercept 44.565367046 5.954833e-03 #> 832  b_Intercept 44.578793744 5.863887e-03 #> 833  b_Intercept 44.592220442 5.773775e-03 #> 834  b_Intercept 44.605647141 5.684408e-03 #> 835  b_Intercept 44.619073839 5.595701e-03 #> 836  b_Intercept 44.632500537 5.507583e-03 #> 837  b_Intercept 44.645927236 5.420070e-03 #> 838  b_Intercept 44.659353934 5.332960e-03 #> 839  b_Intercept 44.672780633 5.246198e-03 #> 840  b_Intercept 44.686207331 5.159738e-03 #> 841  b_Intercept 44.699634029 5.073540e-03 #> 842  b_Intercept 44.713060728 4.987583e-03 #> 843  b_Intercept 44.726487426 4.901851e-03 #> 844  b_Intercept 44.739914124 4.816290e-03 #> 845  b_Intercept 44.753340823 4.730890e-03 #> 846  b_Intercept 44.766767521 4.645649e-03 #> 847  b_Intercept 44.780194220 4.560569e-03 #> 848  b_Intercept 44.793620918 4.475685e-03 #> 849  b_Intercept 44.807047616 4.391021e-03 #> 850  b_Intercept 44.820474315 4.306579e-03 #> 851  b_Intercept 44.833901013 4.222390e-03 #> 852  b_Intercept 44.847327711 4.138486e-03 #> 853  b_Intercept 44.860754410 4.054904e-03 #> 854  b_Intercept 44.874181108 3.971767e-03 #> 855  b_Intercept 44.887607806 3.889099e-03 #> 856  b_Intercept 44.901034505 3.806922e-03 #> 857  b_Intercept 44.914461203 3.725288e-03 #> 858  b_Intercept 44.927887902 3.644251e-03 #> 859  b_Intercept 44.941314600 3.563866e-03 #> 860  b_Intercept 44.954741298 3.484392e-03 #> 861  b_Intercept 44.968167997 3.405736e-03 #> 862  b_Intercept 44.981594695 3.327945e-03 #> 863  b_Intercept 44.995021393 3.251077e-03 #> 864  b_Intercept 45.008448092 3.175189e-03 #> 865  b_Intercept 45.021874790 3.100387e-03 #> 866  b_Intercept 45.035301489 3.026940e-03 #> 867  b_Intercept 45.048728187 2.954673e-03 #> 868  b_Intercept 45.062154885 2.883632e-03 #> 869  b_Intercept 45.075581584 2.813866e-03 #> 870  b_Intercept 45.089008282 2.745416e-03 #> 871  b_Intercept 45.102434980 2.678474e-03 #> 872  b_Intercept 45.115861679 2.613171e-03 #> 873  b_Intercept 45.129288377 2.549319e-03 #> 874  b_Intercept 45.142715076 2.486946e-03 #> 875  b_Intercept 45.156141774 2.426076e-03 #> 876  b_Intercept 45.169568472 2.366730e-03 #> 877  b_Intercept 45.182995171 2.309179e-03 #> 878  b_Intercept 45.196421869 2.253343e-03 #> 879  b_Intercept 45.209848567 2.199071e-03 #> 880  b_Intercept 45.223275266 2.146363e-03 #> 881  b_Intercept 45.236701964 2.095218e-03 #> 882  b_Intercept 45.250128663 2.045629e-03 #> 883  b_Intercept 45.263555361 1.997928e-03 #> 884  b_Intercept 45.276982059 1.951813e-03 #> 885  b_Intercept 45.290408758 1.907200e-03 #> 886  b_Intercept 45.303835456 1.864067e-03 #> 887  b_Intercept 45.317262154 1.822388e-03 #> 888  b_Intercept 45.330688853 1.782160e-03 #> 889  b_Intercept 45.344115551 1.743656e-03 #> 890  b_Intercept 45.357542250 1.706490e-03 #> 891  b_Intercept 45.370968948 1.670624e-03 #> 892  b_Intercept 45.384395646 1.636019e-03 #> 893  b_Intercept 45.397822345 1.602636e-03 #> 894  b_Intercept 45.411249043 1.570520e-03 #> 895  b_Intercept 45.424675741 1.539733e-03 #> 896  b_Intercept 45.438102440 1.510009e-03 #> 897  b_Intercept 45.451529138 1.481304e-03 #> 898  b_Intercept 45.464955836 1.453576e-03 #> 899  b_Intercept 45.478382535 1.426780e-03 #> 900  b_Intercept 45.491809233 1.400984e-03 #> 901  b_Intercept 45.505235932 1.376115e-03 #> 902  b_Intercept 45.518662630 1.352019e-03 #> 903  b_Intercept 45.532089328 1.328655e-03 #> 904  b_Intercept 45.545516027 1.305984e-03 #> 905  b_Intercept 45.558942725 1.283967e-03 #> 906  b_Intercept 45.572369423 1.262678e-03 #> 907  b_Intercept 45.585796122 1.241989e-03 #> 908  b_Intercept 45.599222820 1.221828e-03 #> 909  b_Intercept 45.612649519 1.202165e-03 #> 910  b_Intercept 45.626076217 1.182972e-03 #> 911  b_Intercept 45.639502915 1.164224e-03 #> 912  b_Intercept 45.652929614 1.145995e-03 #> 913  b_Intercept 45.666356312 1.128157e-03 #> 914  b_Intercept 45.679783010 1.110690e-03 #> 915  b_Intercept 45.693209709 1.093579e-03 #> 916  b_Intercept 45.706636407 1.076811e-03 #> 917  b_Intercept 45.720063106 1.060393e-03 #> 918  b_Intercept 45.733489804 1.044369e-03 #> 919  b_Intercept 45.746916502 1.028662e-03 #> 920  b_Intercept 45.760343201 1.013273e-03 #> 921  b_Intercept 45.773769899 9.982015e-04 #> 922  b_Intercept 45.787196597 9.834503e-04 #> 923  b_Intercept 45.800623296 9.690598e-04 #> 924  b_Intercept 45.814049994 9.550558e-04 #> 925  b_Intercept 45.827476693 9.413974e-04 #> 926  b_Intercept 45.840903391 9.280951e-04 #> 927  b_Intercept 45.854330089 9.151608e-04 #> 928  b_Intercept 45.867756788 9.026074e-04 #> 929  b_Intercept 45.881183486 8.905193e-04 #> 930  b_Intercept 45.894610184 8.788905e-04 #> 931  b_Intercept 45.908036883 8.676990e-04 #> 932  b_Intercept 45.921463581 8.569611e-04 #> 933  b_Intercept 45.934890280 8.466936e-04 #> 934  b_Intercept 45.948316978 8.369132e-04 #> 935  b_Intercept 45.961743676 8.277579e-04 #> 936  b_Intercept 45.975170375 8.191534e-04 #> 937  b_Intercept 45.988597073 8.110964e-04 #> 938  b_Intercept 46.002023771 8.036017e-04 #> 939  b_Intercept 46.015450470 7.966833e-04 #> 940  b_Intercept 46.028877168 7.903679e-04 #> 941  b_Intercept 46.042303866 7.848047e-04 #> 942  b_Intercept 46.055730565 7.798597e-04 #> 943  b_Intercept 46.069157263 7.755404e-04 #> 944  b_Intercept 46.082583962 7.718527e-04 #> 945  b_Intercept 46.096010660 7.688011e-04 #> 946  b_Intercept 46.109437358 7.664406e-04 #> 947  b_Intercept 46.122864057 7.648354e-04 #> 948  b_Intercept 46.136290755 7.638649e-04 #> 949  b_Intercept 46.149717453 7.635231e-04 #> 950  b_Intercept 46.163144152 7.638023e-04 #> 951  b_Intercept 46.176570850 7.646929e-04 #> 952  b_Intercept 46.189997549 7.662643e-04 #> 953  b_Intercept 46.203424247 7.684826e-04 #> 954  b_Intercept 46.216850945 7.712550e-04 #> 955  b_Intercept 46.230277644 7.745606e-04 #> 956  b_Intercept 46.243704342 7.783765e-04 #> 957  b_Intercept 46.257131040 7.826782e-04 #> 958  b_Intercept 46.270557739 7.875214e-04 #> 959  b_Intercept 46.283984437 7.928019e-04 #> 960  b_Intercept 46.297411136 7.984580e-04 #> 961  b_Intercept 46.310837834 8.044563e-04 #> 962  b_Intercept 46.324264532 8.107616e-04 #> 963  b_Intercept 46.337691231 8.173377e-04 #> 964  b_Intercept 46.351117929 8.241908e-04 #> 965  b_Intercept 46.364544627 8.312112e-04 #> 966  b_Intercept 46.377971326 8.383579e-04 #> 967  b_Intercept 46.391398024 8.455903e-04 #> 968  b_Intercept 46.404824723 8.528677e-04 #> 969  b_Intercept 46.418251421 8.601459e-04 #> 970  b_Intercept 46.431678119 8.673576e-04 #> 971  b_Intercept 46.445104818 8.744620e-04 #> 972  b_Intercept 46.458531516 8.814192e-04 #> 973  b_Intercept 46.471958214 8.881897e-04 #> 974  b_Intercept 46.485384913 8.947350e-04 #> 975  b_Intercept 46.498811611 9.009811e-04 #> 976  b_Intercept 46.512238310 9.068616e-04 #> 977  b_Intercept 46.525665008 9.123835e-04 #> 978  b_Intercept 46.539091706 9.175145e-04 #> 979  b_Intercept 46.552518405 9.222241e-04 #> 980  b_Intercept 46.565945103 9.264829e-04 #> 981  b_Intercept 46.579371801 9.301741e-04 #> 982  b_Intercept 46.592798500 9.333010e-04 #> 983  b_Intercept 46.606225198 9.358871e-04 #> 984  b_Intercept 46.619651896 9.379134e-04 #> 985  b_Intercept 46.633078595 9.393628e-04 #> 986  b_Intercept 46.646505293 9.402201e-04 #> 987  b_Intercept 46.659931992 9.403279e-04 #> 988  b_Intercept 46.673358690 9.397949e-04 #> 989  b_Intercept 46.686785388 9.386348e-04 #> 990  b_Intercept 46.700212087 9.368436e-04 #> 991  b_Intercept 46.713638785 9.344189e-04 #> 992  b_Intercept 46.727065483 9.313433e-04 #> 993  b_Intercept 46.740492182 9.274873e-04 #> 994  b_Intercept 46.753918880 9.230075e-04 #> 995  b_Intercept 46.767345579 9.179112e-04 #> 996  b_Intercept 46.780772277 9.122075e-04 #> 997  b_Intercept 46.794198975 9.059064e-04 #> 998  b_Intercept 46.807625674 8.989710e-04 #> 999  b_Intercept 46.821052372 8.913692e-04 #> 1000 b_Intercept 46.834479070 8.832212e-04 #> 1001 b_Intercept 46.847905769 8.745435e-04 #> 1002 b_Intercept 46.861332467 8.653539e-04 #> 1003 b_Intercept 46.874759166 8.556704e-04 #> 1004 b_Intercept 46.888185864 8.454475e-04 #> 1005 b_Intercept 46.901612562 8.347279e-04 #> 1006 b_Intercept 46.915039261 8.235886e-04 #> 1007 b_Intercept 46.928465959 8.120505e-04 #> 1008 b_Intercept 46.941892657 8.001347e-04 #> 1009 b_Intercept 46.955319356 7.878627e-04 #> 1010 b_Intercept 46.968746054 7.751944e-04 #> 1011 b_Intercept 46.982172753 7.622084e-04 #> 1012 b_Intercept 46.995599451 7.489457e-04 #> 1013 b_Intercept 47.009026149 7.354274e-04 #> 1014 b_Intercept 47.022452848 7.216743e-04 #> 1015 b_Intercept 47.035879546 7.077070e-04 #> 1016 b_Intercept 47.049306244 6.935037e-04 #> 1017 b_Intercept 47.062732943 6.791402e-04 #> 1018 b_Intercept 47.076159641 6.646359e-04 #> 1019 b_Intercept 47.089586340 6.500093e-04 #> 1020 b_Intercept 47.103013038 6.352789e-04 #> 1021 b_Intercept 47.116439736 6.204588e-04 #> 1022 b_Intercept 47.129866435 6.055648e-04 #> 1023 b_Intercept 47.143293133 5.906308e-04 #> 1024 b_Intercept 47.156719831 5.756727e-04 #> 1025        b_wt -6.350193401 6.761038e-04 #> 1026        b_wt -6.343636688 6.820643e-04 #> 1027        b_wt -6.337079975 6.876098e-04 #> 1028        b_wt -6.330523261 6.928117e-04 #> 1029        b_wt -6.323966548 6.977795e-04 #> 1030        b_wt -6.317409835 7.025808e-04 #> 1031        b_wt -6.310853122 7.072886e-04 #> 1032        b_wt -6.304296409 7.119813e-04 #> 1033        b_wt -6.297739695 7.167537e-04 #> 1034        b_wt -6.291182982 7.217557e-04 #> 1035        b_wt -6.284626269 7.270730e-04 #> 1036        b_wt -6.278069556 7.328086e-04 #> 1037        b_wt -6.271512843 7.390695e-04 #> 1038        b_wt -6.264956129 7.459659e-04 #> 1039        b_wt -6.258399416 7.536172e-04 #> 1040        b_wt -6.251842703 7.623805e-04 #> 1041        b_wt -6.245285990 7.722040e-04 #> 1042        b_wt -6.238729277 7.832098e-04 #> 1043        b_wt -6.232172564 7.955208e-04 #> 1044        b_wt -6.225615850 8.092604e-04 #> 1045        b_wt -6.219059137 8.245517e-04 #> 1046        b_wt -6.212502424 8.418747e-04 #> 1047        b_wt -6.205945711 8.611449e-04 #> 1048        b_wt -6.199388998 8.824024e-04 #> 1049        b_wt -6.192832284 9.057615e-04 #> 1050        b_wt -6.186275571 9.313335e-04 #> 1051        b_wt -6.179718858 9.592259e-04 #> 1052        b_wt -6.173162145 9.899008e-04 #> 1053        b_wt -6.166605432 1.023392e-03 #> 1054        b_wt -6.160048718 1.059548e-03 #> 1055        b_wt -6.153492005 1.098450e-03 #> 1056        b_wt -6.146935292 1.140171e-03 #> 1057        b_wt -6.140378579 1.184778e-03 #> 1058        b_wt -6.133821866 1.232597e-03 #> 1059        b_wt -6.127265152 1.283879e-03 #> 1060        b_wt -6.120708439 1.338220e-03 #> 1061        b_wt -6.114151726 1.395645e-03 #> 1062        b_wt -6.107595013 1.456170e-03 #> 1063        b_wt -6.101038300 1.519806e-03 #> 1064        b_wt -6.094481586 1.586662e-03 #> 1065        b_wt -6.087924873 1.657231e-03 #> 1066        b_wt -6.081368160 1.730859e-03 #> 1067        b_wt -6.074811447 1.807508e-03 #> 1068        b_wt -6.068254734 1.887130e-03 #> 1069        b_wt -6.061698020 1.969671e-03 #> 1070        b_wt -6.055141307 2.055066e-03 #> 1071        b_wt -6.048584594 2.143829e-03 #> 1072        b_wt -6.042027881 2.235279e-03 #> 1073        b_wt -6.035471168 2.329276e-03 #> 1074        b_wt -6.028914454 2.425715e-03 #> 1075        b_wt -6.022357741 2.524487e-03 #> 1076        b_wt -6.015801028 2.625476e-03 #> 1077        b_wt -6.009244315 2.728882e-03 #> 1078        b_wt -6.002687602 2.834314e-03 #> 1079        b_wt -5.996130888 2.941496e-03 #> 1080        b_wt -5.989574175 3.050288e-03 #> 1081        b_wt -5.983017462 3.160551e-03 #> 1082        b_wt -5.976460749 3.272140e-03 #> 1083        b_wt -5.969904036 3.385024e-03 #> 1084        b_wt -5.963347322 3.498993e-03 #> 1085        b_wt -5.956790609 3.613763e-03 #> 1086        b_wt -5.950233896 3.729189e-03 #> 1087        b_wt -5.943677183 3.845130e-03 #> 1088        b_wt -5.937120470 3.961446e-03 #> 1089        b_wt -5.930563756 4.078005e-03 #> 1090        b_wt -5.924007043 4.194629e-03 #> 1091        b_wt -5.917450330 4.311155e-03 #> 1092        b_wt -5.910893617 4.427465e-03 #> 1093        b_wt -5.904336904 4.543446e-03 #> 1094        b_wt -5.897780191 4.658990e-03 #> 1095        b_wt -5.891223477 4.773987e-03 #> 1096        b_wt -5.884666764 4.888176e-03 #> 1097        b_wt -5.878110051 5.001597e-03 #> 1098        b_wt -5.871553338 5.114177e-03 #> 1099        b_wt -5.864996625 5.225851e-03 #> 1100        b_wt -5.858439911 5.336560e-03 #> 1101        b_wt -5.851883198 5.446251e-03 #> 1102        b_wt -5.845326485 5.554659e-03 #> 1103        b_wt -5.838769772 5.661910e-03 #> 1104        b_wt -5.832213059 5.768023e-03 #> 1105        b_wt -5.825656345 5.872981e-03 #> 1106        b_wt -5.819099632 5.976774e-03 #> 1107        b_wt -5.812542919 6.079398e-03 #> 1108        b_wt -5.805986206 6.180683e-03 #> 1109        b_wt -5.799429493 6.280710e-03 #> 1110        b_wt -5.792872779 6.379601e-03 #> 1111        b_wt -5.786316066 6.477377e-03 #> 1112        b_wt -5.779759353 6.574061e-03 #> 1113        b_wt -5.773202640 6.669683e-03 #> 1114        b_wt -5.766645927 6.764179e-03 #> 1115        b_wt -5.760089213 6.857551e-03 #> 1116        b_wt -5.753532500 6.949985e-03 #> 1117        b_wt -5.746975787 7.041519e-03 #> 1118        b_wt -5.740419074 7.132194e-03 #> 1119        b_wt -5.733862361 7.222049e-03 #> 1120        b_wt -5.727305647 7.311097e-03 #> 1121        b_wt -5.720748934 7.399286e-03 #> 1122        b_wt -5.714192221 7.486807e-03 #> 1123        b_wt -5.707635508 7.573704e-03 #> 1124        b_wt -5.701078795 7.660017e-03 #> 1125        b_wt -5.694522081 7.745790e-03 #> 1126        b_wt -5.687965368 7.831062e-03 #> 1127        b_wt -5.681408655 7.915785e-03 #> 1128        b_wt -5.674851942 8.000111e-03 #> 1129        b_wt -5.668295229 8.084087e-03 #> 1130        b_wt -5.661738515 8.167752e-03 #> 1131        b_wt -5.655181802 8.251150e-03 #> 1132        b_wt -5.648625089 8.334325e-03 #> 1133        b_wt -5.642068376 8.417300e-03 #> 1134        b_wt -5.635511663 8.500162e-03 #> 1135        b_wt -5.628954949 8.582972e-03 #> 1136        b_wt -5.622398236 8.665781e-03 #> 1137        b_wt -5.615841523 8.748648e-03 #> 1138        b_wt -5.609284810 8.831630e-03 #> 1139        b_wt -5.602728097 8.914827e-03 #> 1140        b_wt -5.596171384 8.998338e-03 #> 1141        b_wt -5.589614670 9.082221e-03 #> 1142        b_wt -5.583057957 9.166559e-03 #> 1143        b_wt -5.576501244 9.251442e-03 #> 1144        b_wt -5.569944531 9.336965e-03 #> 1145        b_wt -5.563387818 9.423294e-03 #> 1146        b_wt -5.556831104 9.510670e-03 #> 1147        b_wt -5.550274391 9.599093e-03 #> 1148        b_wt -5.543717678 9.688695e-03 #> 1149        b_wt -5.537160965 9.779614e-03 #> 1150        b_wt -5.530604252 9.871997e-03 #> 1151        b_wt -5.524047538 9.966033e-03 #> 1152        b_wt -5.517490825 1.006230e-02 #> 1153        b_wt -5.510934112 1.016064e-02 #> 1154        b_wt -5.504377399 1.026122e-02 #> 1155        b_wt -5.497820686 1.036424e-02 #> 1156        b_wt -5.491263972 1.046990e-02 #> 1157        b_wt -5.484707259 1.057840e-02 #> 1158        b_wt -5.478150546 1.069065e-02 #> 1159        b_wt -5.471593833 1.080641e-02 #> 1160        b_wt -5.465037120 1.092582e-02 #> 1161        b_wt -5.458480406 1.104910e-02 #> 1162        b_wt -5.451923693 1.117650e-02 #> 1163        b_wt -5.445366980 1.130824e-02 #> 1164        b_wt -5.438810267 1.144534e-02 #> 1165        b_wt -5.432253554 1.158782e-02 #> 1166        b_wt -5.425696840 1.173553e-02 #> 1167        b_wt -5.419140127 1.188873e-02 #> 1168        b_wt -5.412583414 1.204765e-02 #> 1169        b_wt -5.406026701 1.221254e-02 #> 1170        b_wt -5.399469988 1.238430e-02 #> 1171        b_wt -5.392913274 1.256349e-02 #> 1172        b_wt -5.386356561 1.274951e-02 #> 1173        b_wt -5.379799848 1.294256e-02 #> 1174        b_wt -5.373243135 1.314286e-02 #> 1175        b_wt -5.366686422 1.335063e-02 #> 1176        b_wt -5.360129708 1.356645e-02 #> 1177        b_wt -5.353572995 1.379168e-02 #> 1178        b_wt -5.347016282 1.402506e-02 #> 1179        b_wt -5.340459569 1.426675e-02 #> 1180        b_wt -5.333902856 1.451691e-02 #> 1181        b_wt -5.327346142 1.477568e-02 #> 1182        b_wt -5.320789429 1.504320e-02 #> 1183        b_wt -5.314232716 1.532172e-02 #> 1184        b_wt -5.307676003 1.560930e-02 #> 1185        b_wt -5.301119290 1.590603e-02 #> 1186        b_wt -5.294562576 1.621198e-02 #> 1187        b_wt -5.288005863 1.652722e-02 #> 1188        b_wt -5.281449150 1.685182e-02 #> 1189        b_wt -5.274892437 1.718755e-02 #> 1190        b_wt -5.268335724 1.753327e-02 #> 1191        b_wt -5.261779011 1.788848e-02 #> 1192        b_wt -5.255222297 1.825320e-02 #> 1193        b_wt -5.248665584 1.862744e-02 #> 1194        b_wt -5.242108871 1.901120e-02 #> 1195        b_wt -5.235552158 1.940573e-02 #> 1196        b_wt -5.228995445 1.981078e-02 #> 1197        b_wt -5.222438731 2.022532e-02 #> 1198        b_wt -5.215882018 2.064933e-02 #> 1199        b_wt -5.209325305 2.108279e-02 #> 1200        b_wt -5.202768592 2.152568e-02 #> 1201        b_wt -5.196211879 2.197872e-02 #> 1202        b_wt -5.189655165 2.244261e-02 #> 1203        b_wt -5.183098452 2.291586e-02 #> 1204        b_wt -5.176541739 2.339843e-02 #> 1205        b_wt -5.169985026 2.389032e-02 #> 1206        b_wt -5.163428313 2.439152e-02 #> 1207        b_wt -5.156871599 2.490225e-02 #> 1208        b_wt -5.150314886 2.542422e-02 #> 1209        b_wt -5.143758173 2.595549e-02 #> 1210        b_wt -5.137201460 2.649605e-02 #> 1211        b_wt -5.130644747 2.704592e-02 #> 1212        b_wt -5.124088033 2.760512e-02 #> 1213        b_wt -5.117531320 2.817367e-02 #> 1214        b_wt -5.110974607 2.875360e-02 #> 1215        b_wt -5.104417894 2.934321e-02 #> 1216        b_wt -5.097861181 2.994229e-02 #> 1217        b_wt -5.091304467 3.055090e-02 #> 1218        b_wt -5.084747754 3.116909e-02 #> 1219        b_wt -5.078191041 3.179692e-02 #> 1220        b_wt -5.071634328 3.243599e-02 #> 1221        b_wt -5.065077615 3.308560e-02 #> 1222        b_wt -5.058520901 3.374506e-02 #> 1223        b_wt -5.051964188 3.441445e-02 #> 1224        b_wt -5.045407475 3.509382e-02 #> 1225        b_wt -5.038850762 3.578325e-02 #> 1226        b_wt -5.032294049 3.648391e-02 #> 1227        b_wt -5.025737335 3.719611e-02 #> 1228        b_wt -5.019180622 3.791862e-02 #> 1229        b_wt -5.012623909 3.865149e-02 #> 1230        b_wt -5.006067196 3.939479e-02 #> 1231        b_wt -4.999510483 4.014859e-02 #> 1232        b_wt -4.992953769 4.091354e-02 #> 1233        b_wt -4.986397056 4.169105e-02 #> 1234        b_wt -4.979840343 4.247926e-02 #> 1235        b_wt -4.973283630 4.327821e-02 #> 1236        b_wt -4.966726917 4.408796e-02 #> 1237        b_wt -4.960170203 4.490855e-02 #> 1238        b_wt -4.953613490 4.574006e-02 #> 1239        b_wt -4.947056777 4.658504e-02 #> 1240        b_wt -4.940500064 4.744100e-02 #> 1241        b_wt -4.933943351 4.830795e-02 #> 1242        b_wt -4.927386638 4.918593e-02 #> 1243        b_wt -4.920829924 5.007496e-02 #> 1244        b_wt -4.914273211 5.097505e-02 #> 1245        b_wt -4.907716498 5.188834e-02 #> 1246        b_wt -4.901159785 5.281326e-02 #> 1247        b_wt -4.894603072 5.374931e-02 #> 1248        b_wt -4.888046358 5.469649e-02 #> 1249        b_wt -4.881489645 5.565481e-02 #> 1250        b_wt -4.874932932 5.662427e-02 #> 1251        b_wt -4.868376219 5.760640e-02 #> 1252        b_wt -4.861819506 5.860078e-02 #> 1253        b_wt -4.855262792 5.960630e-02 #> 1254        b_wt -4.848706079 6.062295e-02 #> 1255        b_wt -4.842149366 6.165071e-02 #> 1256        b_wt -4.835592653 6.268957e-02 #> 1257        b_wt -4.829035940 6.374046e-02 #> 1258        b_wt -4.822479226 6.480408e-02 #> 1259        b_wt -4.815922513 6.587872e-02 #> 1260        b_wt -4.809365800 6.696434e-02 #> 1261        b_wt -4.802809087 6.806092e-02 #> 1262        b_wt -4.796252374 6.916840e-02 #> 1263        b_wt -4.789695660 7.028711e-02 #> 1264        b_wt -4.783138947 7.141882e-02 #> 1265        b_wt -4.776582234 7.256124e-02 #> 1266        b_wt -4.770025521 7.371432e-02 #> 1267        b_wt -4.763468808 7.487799e-02 #> 1268        b_wt -4.756912094 7.605216e-02 #> 1269        b_wt -4.750355381 7.723677e-02 #> 1270        b_wt -4.743798668 7.843396e-02 #> 1271        b_wt -4.737241955 7.964154e-02 #> 1272        b_wt -4.730685242 8.085924e-02 #> 1273        b_wt -4.724128528 8.208696e-02 #> 1274        b_wt -4.717571815 8.332459e-02 #> 1275        b_wt -4.711015102 8.457205e-02 #> 1276        b_wt -4.704458389 8.583082e-02 #> 1277        b_wt -4.697901676 8.709985e-02 #> 1278        b_wt -4.691344962 8.837835e-02 #> 1279        b_wt -4.684788249 8.966626e-02 #> 1280        b_wt -4.678231536 9.096348e-02 #> 1281        b_wt -4.671674823 9.226994e-02 #> 1282        b_wt -4.665118110 9.358664e-02 #> 1283        b_wt -4.658561396 9.491357e-02 #> 1284        b_wt -4.652004683 9.624960e-02 #> 1285        b_wt -4.645447970 9.759471e-02 #> 1286        b_wt -4.638891257 9.894893e-02 #> 1287        b_wt -4.632334544 1.003123e-01 #> 1288        b_wt -4.625777830 1.016854e-01 #> 1289        b_wt -4.619221117 1.030694e-01 #> 1290        b_wt -4.612664404 1.044630e-01 #> 1291        b_wt -4.606107691 1.058661e-01 #> 1292        b_wt -4.599550978 1.072790e-01 #> 1293        b_wt -4.592994265 1.087020e-01 #> 1294        b_wt -4.586437551 1.101353e-01 #> 1295        b_wt -4.579880838 1.115817e-01 #> 1296        b_wt -4.573324125 1.130392e-01 #> 1297        b_wt -4.566767412 1.145081e-01 #> 1298        b_wt -4.560210699 1.159890e-01 #> 1299        b_wt -4.553653985 1.174822e-01 #> 1300        b_wt -4.547097272 1.189881e-01 #> 1301        b_wt -4.540540559 1.205102e-01 #> 1302        b_wt -4.533983846 1.220470e-01 #> 1303        b_wt -4.527427133 1.235987e-01 #> 1304        b_wt -4.520870419 1.251657e-01 #> 1305        b_wt -4.514313706 1.267488e-01 #> 1306        b_wt -4.507756993 1.283486e-01 #> 1307        b_wt -4.501200280 1.299685e-01 #> 1308        b_wt -4.494643567 1.316085e-01 #> 1309        b_wt -4.488086853 1.332676e-01 #> 1310        b_wt -4.481530140 1.349466e-01 #> 1311        b_wt -4.474973427 1.366462e-01 #> 1312        b_wt -4.468416714 1.383670e-01 #> 1313        b_wt -4.461860001 1.401117e-01 #> 1314        b_wt -4.455303287 1.418825e-01 #> 1315        b_wt -4.448746574 1.436768e-01 #> 1316        b_wt -4.442189861 1.454951e-01 #> 1317        b_wt -4.435633148 1.473378e-01 #> 1318        b_wt -4.429076435 1.492055e-01 #> 1319        b_wt -4.422519721 1.510996e-01 #> 1320        b_wt -4.415963008 1.530244e-01 #> 1321        b_wt -4.409406295 1.549753e-01 #> 1322        b_wt -4.402849582 1.569524e-01 #> 1323        b_wt -4.396292869 1.589556e-01 #> 1324        b_wt -4.389736155 1.609850e-01 #> 1325        b_wt -4.383179442 1.630404e-01 #> 1326        b_wt -4.376622729 1.651274e-01 #> 1327        b_wt -4.370066016 1.672401e-01 #> 1328        b_wt -4.363509303 1.693775e-01 #> 1329        b_wt -4.356952589 1.715393e-01 #> 1330        b_wt -4.350395876 1.737246e-01 #> 1331        b_wt -4.343839163 1.759328e-01 #> 1332        b_wt -4.337282450 1.781667e-01 #> 1333        b_wt -4.330725737 1.804225e-01 #> 1334        b_wt -4.324169023 1.826977e-01 #> 1335        b_wt -4.317612310 1.849911e-01 #> 1336        b_wt -4.311055597 1.873016e-01 #> 1337        b_wt -4.304498884 1.896279e-01 #> 1338        b_wt -4.297942171 1.919701e-01 #> 1339        b_wt -4.291385457 1.943262e-01 #> 1340        b_wt -4.284828744 1.966928e-01 #> 1341        b_wt -4.278272031 1.990687e-01 #> 1342        b_wt -4.271715318 2.014522e-01 #> 1343        b_wt -4.265158605 2.038419e-01 #> 1344        b_wt -4.258601892 2.062364e-01 #> 1345        b_wt -4.252045178 2.086338e-01 #> 1346        b_wt -4.245488465 2.110320e-01 #> 1347        b_wt -4.238931752 2.134295e-01 #> 1348        b_wt -4.232375039 2.158249e-01 #> 1349        b_wt -4.225818326 2.182170e-01 #> 1350        b_wt -4.219261612 2.206043e-01 #> 1351        b_wt -4.212704899 2.229842e-01 #> 1352        b_wt -4.206148186 2.253565e-01 #> 1353        b_wt -4.199591473 2.277205e-01 #> 1354        b_wt -4.193034760 2.300754e-01 #> 1355        b_wt -4.186478046 2.324204e-01 #> 1356        b_wt -4.179921333 2.347550e-01 #> 1357        b_wt -4.173364620 2.370763e-01 #> 1358        b_wt -4.166807907 2.393860e-01 #> 1359        b_wt -4.160251194 2.416842e-01 #> 1360        b_wt -4.153694480 2.439710e-01 #> 1361        b_wt -4.147137767 2.462466e-01 #> 1362        b_wt -4.140581054 2.485111e-01 #> 1363        b_wt -4.134024341 2.507636e-01 #> 1364        b_wt -4.127467628 2.530054e-01 #> 1365        b_wt -4.120910914 2.552382e-01 #> 1366        b_wt -4.114354201 2.574628e-01 #> 1367        b_wt -4.107797488 2.596800e-01 #> 1368        b_wt -4.101240775 2.618908e-01 #> 1369        b_wt -4.094684062 2.640959e-01 #> 1370        b_wt -4.088127348 2.662967e-01 #> 1371        b_wt -4.081570635 2.684951e-01 #> 1372        b_wt -4.075013922 2.706924e-01 #> 1373        b_wt -4.068457209 2.728897e-01 #> 1374        b_wt -4.061900496 2.750883e-01 #> 1375        b_wt -4.055343782 2.772895e-01 #> 1376        b_wt -4.048787069 2.794958e-01 #> 1377        b_wt -4.042230356 2.817076e-01 #> 1378        b_wt -4.035673643 2.839261e-01 #> 1379        b_wt -4.029116930 2.861524e-01 #> 1380        b_wt -4.022560216 2.883874e-01 #> 1381        b_wt -4.016003503 2.906320e-01 #> 1382        b_wt -4.009446790 2.928898e-01 #> 1383        b_wt -4.002890077 2.951591e-01 #> 1384        b_wt -3.996333364 2.974404e-01 #> 1385        b_wt -3.989776650 2.997343e-01 #> 1386        b_wt -3.983219937 3.020409e-01 #> 1387        b_wt -3.976663224 3.043605e-01 #> 1388        b_wt -3.970106511 3.066955e-01 #> 1389        b_wt -3.963549798 3.090441e-01 #> 1390        b_wt -3.956993084 3.114054e-01 #> 1391        b_wt -3.950436371 3.137790e-01 #> 1392        b_wt -3.943879658 3.161644e-01 #> 1393        b_wt -3.937322945 3.185610e-01 #> 1394        b_wt -3.930766232 3.209694e-01 #> 1395        b_wt -3.924209519 3.233881e-01 #> 1396        b_wt -3.917652805 3.258152e-01 #> 1397        b_wt -3.911096092 3.282495e-01 #> 1398        b_wt -3.904539379 3.306902e-01 #> 1399        b_wt -3.897982666 3.331359e-01 #> 1400        b_wt -3.891425953 3.355858e-01 #> 1401        b_wt -3.884869239 3.380384e-01 #> 1402        b_wt -3.878312526 3.404918e-01 #> 1403        b_wt -3.871755813 3.429447e-01 #> 1404        b_wt -3.865199100 3.453960e-01 #> 1405        b_wt -3.858642387 3.478445e-01 #> 1406        b_wt -3.852085673 3.502887e-01 #> 1407        b_wt -3.845528960 3.527262e-01 #> 1408        b_wt -3.838972247 3.551566e-01 #> 1409        b_wt -3.832415534 3.575790e-01 #> 1410        b_wt -3.825858821 3.599924e-01 #> 1411        b_wt -3.819302107 3.623959e-01 #> 1412        b_wt -3.812745394 3.647886e-01 #> 1413        b_wt -3.806188681 3.671671e-01 #> 1414        b_wt -3.799631968 3.695327e-01 #> 1415        b_wt -3.793075255 3.718851e-01 #> 1416        b_wt -3.786518541 3.742239e-01 #> 1417        b_wt -3.779961828 3.765487e-01 #> 1418        b_wt -3.773405115 3.788591e-01 #> 1419        b_wt -3.766848402 3.811527e-01 #> 1420        b_wt -3.760291689 3.834302e-01 #> 1421        b_wt -3.753734975 3.856929e-01 #> 1422        b_wt -3.747178262 3.879407e-01 #> 1423        b_wt -3.740621549 3.901737e-01 #> 1424        b_wt -3.734064836 3.923921e-01 #> 1425        b_wt -3.727508123 3.945944e-01 #> 1426        b_wt -3.720951409 3.967807e-01 #> 1427        b_wt -3.714394696 3.989531e-01 #> 1428        b_wt -3.707837983 4.011119e-01 #> 1429        b_wt -3.701281270 4.032573e-01 #> 1430        b_wt -3.694724557 4.053896e-01 #> 1431        b_wt -3.688167843 4.075085e-01 #> 1432        b_wt -3.681611130 4.096127e-01 #> 1433        b_wt -3.675054417 4.117049e-01 #> 1434        b_wt -3.668497704 4.137852e-01 #> 1435        b_wt -3.661940991 4.158538e-01 #> 1436        b_wt -3.655384277 4.179109e-01 #> 1437        b_wt -3.648827564 4.199567e-01 #> 1438        b_wt -3.642270851 4.219885e-01 #> 1439        b_wt -3.635714138 4.240091e-01 #> 1440        b_wt -3.629157425 4.260184e-01 #> 1441        b_wt -3.622600712 4.280163e-01 #> 1442        b_wt -3.616043998 4.300027e-01 #> 1443        b_wt -3.609487285 4.319773e-01 #> 1444        b_wt -3.602930572 4.339376e-01 #> 1445        b_wt -3.596373859 4.358848e-01 #> 1446        b_wt -3.589817146 4.378190e-01 #> 1447        b_wt -3.583260432 4.397398e-01 #> 1448        b_wt -3.576703719 4.416468e-01 #> 1449        b_wt -3.570147006 4.435393e-01 #> 1450        b_wt -3.563590293 4.454146e-01 #> 1451        b_wt -3.557033580 4.472723e-01 #> 1452        b_wt -3.550476866 4.491132e-01 #> 1453        b_wt -3.543920153 4.509366e-01 #> 1454        b_wt -3.537363440 4.527418e-01 #> 1455        b_wt -3.530806727 4.545279e-01 #> 1456        b_wt -3.524250014 4.562924e-01 #> 1457        b_wt -3.517693300 4.580326e-01 #> 1458        b_wt -3.511136587 4.597507e-01 #> 1459        b_wt -3.504579874 4.614459e-01 #> 1460        b_wt -3.498023161 4.631172e-01 #> 1461        b_wt -3.491466448 4.647639e-01 #> 1462        b_wt -3.484909734 4.663841e-01 #> 1463        b_wt -3.478353021 4.679720e-01 #> 1464        b_wt -3.471796308 4.695320e-01 #> 1465        b_wt -3.465239595 4.710632e-01 #> 1466        b_wt -3.458682882 4.725647e-01 #> 1467        b_wt -3.452126168 4.740357e-01 #> 1468        b_wt -3.445569455 4.754754e-01 #> 1469        b_wt -3.439012742 4.768756e-01 #> 1470        b_wt -3.432456029 4.782415e-01 #> 1471        b_wt -3.425899316 4.795732e-01 #> 1472        b_wt -3.419342602 4.808698e-01 #> 1473        b_wt -3.412785889 4.821306e-01 #> 1474        b_wt -3.406229176 4.833549e-01 #> 1475        b_wt -3.399672463 4.845357e-01 #> 1476        b_wt -3.393115750 4.856754e-01 #> 1477        b_wt -3.386559036 4.867763e-01 #> 1478        b_wt -3.380002323 4.878376e-01 #> 1479        b_wt -3.373445610 4.888589e-01 #> 1480        b_wt -3.366888897 4.898395e-01 #> 1481        b_wt -3.360332184 4.907745e-01 #> 1482        b_wt -3.353775470 4.916624e-01 #> 1483        b_wt -3.347218757 4.925083e-01 #> 1484        b_wt -3.340662044 4.933116e-01 #> 1485        b_wt -3.334105331 4.940721e-01 #> 1486        b_wt -3.327548618 4.947895e-01 #> 1487        b_wt -3.320991904 4.954611e-01 #> 1488        b_wt -3.314435191 4.960815e-01 #> 1489        b_wt -3.307878478 4.966583e-01 #> 1490        b_wt -3.301321765 4.971915e-01 #> 1491        b_wt -3.294765052 4.976811e-01 #> 1492        b_wt -3.288208339 4.981272e-01 #> 1493        b_wt -3.281651625 4.985296e-01 #> 1494        b_wt -3.275094912 4.988790e-01 #> 1495        b_wt -3.268538199 4.991856e-01 #> 1496        b_wt -3.261981486 4.994498e-01 #> 1497        b_wt -3.255424773 4.996720e-01 #> 1498        b_wt -3.248868059 4.998524e-01 #> 1499        b_wt -3.242311346 4.999917e-01 #> 1500        b_wt -3.235754633 5.000827e-01 #> 1501        b_wt -3.229197920 5.001322e-01 #> 1502        b_wt -3.222641207 5.001426e-01 #> 1503        b_wt -3.216084493 5.001146e-01 #> 1504        b_wt -3.209527780 5.000489e-01 #> 1505        b_wt -3.202971067 4.999463e-01 #> 1506        b_wt -3.196414354 4.998024e-01 #> 1507        b_wt -3.189857641 4.996201e-01 #> 1508        b_wt -3.183300927 4.994037e-01 #> 1509        b_wt -3.176744214 4.991539e-01 #> 1510        b_wt -3.170187501 4.988716e-01 #> 1511        b_wt -3.163630788 4.985574e-01 #> 1512        b_wt -3.157074075 4.982097e-01 #> 1513        b_wt -3.150517361 4.978277e-01 #> 1514        b_wt -3.143960648 4.974167e-01 #> 1515        b_wt -3.137403935 4.969774e-01 #> 1516        b_wt -3.130847222 4.965105e-01 #> 1517        b_wt -3.124290509 4.960166e-01 #> 1518        b_wt -3.117733795 4.954955e-01 #> 1519        b_wt -3.111177082 4.949436e-01 #> 1520        b_wt -3.104620369 4.943666e-01 #> 1521        b_wt -3.098063656 4.937650e-01 #> 1522        b_wt -3.091506943 4.931390e-01 #> 1523        b_wt -3.084950229 4.924890e-01 #> 1524        b_wt -3.078393516 4.918152e-01 #> 1525        b_wt -3.071836803 4.911125e-01 #> 1526        b_wt -3.065280090 4.903859e-01 #> 1527        b_wt -3.058723377 4.896356e-01 #> 1528        b_wt -3.052166663 4.888617e-01 #> 1529        b_wt -3.045609950 4.880638e-01 #> 1530        b_wt -3.039053237 4.872418e-01 #> 1531        b_wt -3.032496524 4.863912e-01 #> 1532        b_wt -3.025939811 4.855139e-01 #> 1533        b_wt -3.019383097 4.846112e-01 #> 1534        b_wt -3.012826384 4.836825e-01 #> 1535        b_wt -3.006269671 4.827274e-01 #> 1536        b_wt -2.999712958 4.817452e-01 #> 1537        b_wt -2.993156245 4.807319e-01 #> 1538        b_wt -2.986599531 4.796867e-01 #> 1539        b_wt -2.980042818 4.786120e-01 #> 1540        b_wt -2.973486105 4.775073e-01 #> 1541        b_wt -2.966929392 4.763717e-01 #> 1542        b_wt -2.960372679 4.752046e-01 #> 1543        b_wt -2.953815966 4.740031e-01 #> 1544        b_wt -2.947259252 4.727627e-01 #> 1545        b_wt -2.940702539 4.714883e-01 #> 1546        b_wt -2.934145826 4.701793e-01 #> 1547        b_wt -2.927589113 4.688349e-01 #> 1548        b_wt -2.921032400 4.674548e-01 #> 1549        b_wt -2.914475686 4.660377e-01 #> 1550        b_wt -2.907918973 4.645753e-01 #> 1551        b_wt -2.901362260 4.630753e-01 #> 1552        b_wt -2.894805547 4.615374e-01 #> 1553        b_wt -2.888248834 4.599613e-01 #> 1554        b_wt -2.881692120 4.583468e-01 #> 1555        b_wt -2.875135407 4.566937e-01 #> 1556        b_wt -2.868578694 4.549942e-01 #> 1557        b_wt -2.862021981 4.532546e-01 #> 1558        b_wt -2.855465268 4.514765e-01 #> 1559        b_wt -2.848908554 4.496601e-01 #> 1560        b_wt -2.842351841 4.478056e-01 #> 1561        b_wt -2.835795128 4.459135e-01 #> 1562        b_wt -2.829238415 4.439786e-01 #> 1563        b_wt -2.822681702 4.420040e-01 #> 1564        b_wt -2.816124988 4.399937e-01 #> 1565        b_wt -2.809568275 4.379483e-01 #> 1566        b_wt -2.803011562 4.358688e-01 #> 1567        b_wt -2.796454849 4.337558e-01 #> 1568        b_wt -2.789898136 4.316075e-01 #> 1569        b_wt -2.783341422 4.294239e-01 #> 1570        b_wt -2.776784709 4.272107e-01 #> 1571        b_wt -2.770227996 4.249691e-01 #> 1572        b_wt -2.763671283 4.227003e-01 #> 1573        b_wt -2.757114570 4.204057e-01 #> 1574        b_wt -2.750557856 4.180857e-01 #> 1575        b_wt -2.744001143 4.157389e-01 #> 1576        b_wt -2.737444430 4.133714e-01 #> 1577        b_wt -2.730887717 4.109848e-01 #> 1578        b_wt -2.724331004 4.085808e-01 #> 1579        b_wt -2.717774290 4.061608e-01 #> 1580        b_wt -2.711217577 4.037265e-01 #> 1581        b_wt -2.704660864 4.012774e-01 #> 1582        b_wt -2.698104151 3.988183e-01 #> 1583        b_wt -2.691547438 3.963510e-01 #> 1584        b_wt -2.684990724 3.938771e-01 #> 1585        b_wt -2.678434011 3.913985e-01 #> 1586        b_wt -2.671877298 3.889168e-01 #> 1587        b_wt -2.665320585 3.864338e-01 #> 1588        b_wt -2.658763872 3.839520e-01 #> 1589        b_wt -2.652207158 3.814730e-01 #> 1590        b_wt -2.645650445 3.789985e-01 #> 1591        b_wt -2.639093732 3.765301e-01 #> 1592        b_wt -2.632537019 3.740691e-01 #> 1593        b_wt -2.625980306 3.716185e-01 #> 1594        b_wt -2.619423593 3.691802e-01 #> 1595        b_wt -2.612866879 3.667544e-01 #> 1596        b_wt -2.606310166 3.643424e-01 #> 1597        b_wt -2.599753453 3.619455e-01 #> 1598        b_wt -2.593196740 3.595646e-01 #> 1599        b_wt -2.586640027 3.572022e-01 #> 1600        b_wt -2.580083313 3.548613e-01 #> 1601        b_wt -2.573526600 3.525399e-01 #> 1602        b_wt -2.566969887 3.502386e-01 #> 1603        b_wt -2.560413174 3.479581e-01 #> 1604        b_wt -2.553856461 3.456990e-01 #> 1605        b_wt -2.547299747 3.434622e-01 #> 1606        b_wt -2.540743034 3.412524e-01 #> 1607        b_wt -2.534186321 3.390651e-01 #> 1608        b_wt -2.527629608 3.369005e-01 #> 1609        b_wt -2.521072895 3.347584e-01 #> 1610        b_wt -2.514516181 3.326389e-01 #> 1611        b_wt -2.507959468 3.305417e-01 #> 1612        b_wt -2.501402755 3.284709e-01 #> 1613        b_wt -2.494846042 3.264222e-01 #> 1614        b_wt -2.488289329 3.243944e-01 #> 1615        b_wt -2.481732615 3.223868e-01 #> 1616        b_wt -2.475175902 3.203988e-01 #> 1617        b_wt -2.468619189 3.184295e-01 #> 1618        b_wt -2.462062476 3.164808e-01 #> 1619        b_wt -2.455505763 3.145499e-01 #> 1620        b_wt -2.448949049 3.126345e-01 #> 1621        b_wt -2.442392336 3.107334e-01 #> 1622        b_wt -2.435835623 3.088454e-01 #> 1623        b_wt -2.429278910 3.069695e-01 #> 1624        b_wt -2.422722197 3.051053e-01 #> 1625        b_wt -2.416165483 3.032512e-01 #> 1626        b_wt -2.409608770 3.014045e-01 #> 1627        b_wt -2.403052057 2.995639e-01 #> 1628        b_wt -2.396495344 2.977279e-01 #> 1629        b_wt -2.389938631 2.958953e-01 #> 1630        b_wt -2.383381917 2.940646e-01 #> 1631        b_wt -2.376825204 2.922339e-01 #> 1632        b_wt -2.370268491 2.904015e-01 #> 1633        b_wt -2.363711778 2.885660e-01 #> 1634        b_wt -2.357155065 2.867261e-01 #> 1635        b_wt -2.350598351 2.848805e-01 #> 1636        b_wt -2.344041638 2.830277e-01 #> 1637        b_wt -2.337484925 2.811642e-01 #> 1638        b_wt -2.330928212 2.792904e-01 #> 1639        b_wt -2.324371499 2.774050e-01 #> 1640        b_wt -2.317814785 2.755070e-01 #> 1641        b_wt -2.311258072 2.735953e-01 #> 1642        b_wt -2.304701359 2.716689e-01 #> 1643        b_wt -2.298144646 2.697237e-01 #> 1644        b_wt -2.291587933 2.677605e-01 #> 1645        b_wt -2.285031220 2.657794e-01 #> 1646        b_wt -2.278474506 2.637796e-01 #> 1647        b_wt -2.271917793 2.617607e-01 #> 1648        b_wt -2.265361080 2.597219e-01 #> 1649        b_wt -2.258804367 2.576600e-01 #> 1650        b_wt -2.252247654 2.555750e-01 #> 1651        b_wt -2.245690940 2.534688e-01 #> 1652        b_wt -2.239134227 2.513412e-01 #> 1653        b_wt -2.232577514 2.491920e-01 #> 1654        b_wt -2.226020801 2.470214e-01 #> 1655        b_wt -2.219464088 2.448275e-01 #> 1656        b_wt -2.212907374 2.426090e-01 #> 1657        b_wt -2.206350661 2.403697e-01 #> 1658        b_wt -2.199793948 2.381098e-01 #> 1659        b_wt -2.193237235 2.358299e-01 #> 1660        b_wt -2.186680522 2.335304e-01 #> 1661        b_wt -2.180123808 2.312116e-01 #> 1662        b_wt -2.173567095 2.288710e-01 #> 1663        b_wt -2.167010382 2.265135e-01 #> 1664        b_wt -2.160453669 2.241400e-01 #> 1665        b_wt -2.153896956 2.217515e-01 #> 1666        b_wt -2.147340242 2.193490e-01 #> 1667        b_wt -2.140783529 2.169335e-01 #> 1668        b_wt -2.134226816 2.145040e-01 #> 1669        b_wt -2.127670103 2.120645e-01 #> 1670        b_wt -2.121113390 2.096164e-01 #> 1671        b_wt -2.114556676 2.071610e-01 #> 1672        b_wt -2.107999963 2.046997e-01 #> 1673        b_wt -2.101443250 2.022339e-01 #> 1674        b_wt -2.094886537 1.997647e-01 #> 1675        b_wt -2.088329824 1.972944e-01 #> 1676        b_wt -2.081773110 1.948247e-01 #> 1677        b_wt -2.075216397 1.923570e-01 #> 1678        b_wt -2.068659684 1.898926e-01 #> 1679        b_wt -2.062102971 1.874331e-01 #> 1680        b_wt -2.055546258 1.849807e-01 #> 1681        b_wt -2.048989544 1.825376e-01 #> 1682        b_wt -2.042432831 1.801043e-01 #> 1683        b_wt -2.035876118 1.776821e-01 #> 1684        b_wt -2.029319405 1.752722e-01 #> 1685        b_wt -2.022762692 1.728759e-01 #> 1686        b_wt -2.016205978 1.704954e-01 #> 1687        b_wt -2.009649265 1.681340e-01 #> 1688        b_wt -2.003092552 1.657904e-01 #> 1689        b_wt -1.996535839 1.634653e-01 #> 1690        b_wt -1.989979126 1.611597e-01 #> 1691        b_wt -1.983422412 1.588745e-01 #> 1692        b_wt -1.976865699 1.566105e-01 #> 1693        b_wt -1.970308986 1.543739e-01 #> 1694        b_wt -1.963752273 1.521601e-01 #> 1695        b_wt -1.957195560 1.499699e-01 #> 1696        b_wt -1.950638847 1.478036e-01 #> 1697        b_wt -1.944082133 1.456616e-01 #> 1698        b_wt -1.937525420 1.435444e-01 #> 1699        b_wt -1.930968707 1.414571e-01 #> 1700        b_wt -1.924411994 1.393963e-01 #> 1701        b_wt -1.917855281 1.373610e-01 #> 1702        b_wt -1.911298567 1.353512e-01 #> 1703        b_wt -1.904741854 1.333670e-01 #> 1704        b_wt -1.898185141 1.314083e-01 #> 1705        b_wt -1.891628428 1.294786e-01 #> 1706        b_wt -1.885071715 1.275766e-01 #> 1707        b_wt -1.878515001 1.256998e-01 #> 1708        b_wt -1.871958288 1.238477e-01 #> 1709        b_wt -1.865401575 1.220203e-01 #> 1710        b_wt -1.858844862 1.202172e-01 #> 1711        b_wt -1.852288149 1.184403e-01 #> 1712        b_wt -1.845731435 1.166905e-01 #> 1713        b_wt -1.839174722 1.149641e-01 #> 1714        b_wt -1.832618009 1.132605e-01 #> 1715        b_wt -1.826061296 1.115797e-01 #> 1716        b_wt -1.819504583 1.099211e-01 #> 1717        b_wt -1.812947869 1.082853e-01 #> 1718        b_wt -1.806391156 1.066755e-01 #> 1719        b_wt -1.799834443 1.050869e-01 #> 1720        b_wt -1.793277730 1.035194e-01 #> 1721        b_wt -1.786721017 1.019726e-01 #> 1722        b_wt -1.780164303 1.004463e-01 #> 1723        b_wt -1.773607590 9.894035e-02 #> 1724        b_wt -1.767050877 9.745893e-02 #> 1725        b_wt -1.760494164 9.599777e-02 #> 1726        b_wt -1.753937451 9.455641e-02 #> 1727        b_wt -1.747380737 9.313476e-02 #> 1728        b_wt -1.740824024 9.173274e-02 #> 1729        b_wt -1.734267311 9.035030e-02 #> 1730        b_wt -1.727710598 8.899069e-02 #> 1731        b_wt -1.721153885 8.765199e-02 #> 1732        b_wt -1.714597171 8.633285e-02 #> 1733        b_wt -1.708040458 8.503331e-02 #> 1734        b_wt -1.701483745 8.375343e-02 #> 1735        b_wt -1.694927032 8.249324e-02 #> 1736        b_wt -1.688370319 8.125512e-02 #> 1737        b_wt -1.681813605 8.003926e-02 #> 1738        b_wt -1.675256892 7.884334e-02 #> 1739        b_wt -1.668700179 7.766742e-02 #> 1740        b_wt -1.662143466 7.651155e-02 #> 1741        b_wt -1.655586753 7.537579e-02 #> 1742        b_wt -1.649030040 7.426147e-02 #> 1743        b_wt -1.642473326 7.317080e-02 #> 1744        b_wt -1.635916613 7.210030e-02 #> 1745        b_wt -1.629359900 7.104994e-02 #> 1746        b_wt -1.622803187 7.001967e-02 #> 1747        b_wt -1.616246474 6.900940e-02 #> 1748        b_wt -1.609689760 6.801930e-02 #> 1749        b_wt -1.603133047 6.705337e-02 #> 1750        b_wt -1.596576334 6.610696e-02 #> 1751        b_wt -1.590019621 6.517986e-02 #> 1752        b_wt -1.583462908 6.427182e-02 #> 1753        b_wt -1.576906194 6.338257e-02 #> 1754        b_wt -1.570349481 6.251182e-02 #> 1755        b_wt -1.563792768 6.166270e-02 #> 1756        b_wt -1.557236055 6.083186e-02 #> 1757        b_wt -1.550679342 6.001816e-02 #> 1758        b_wt -1.544122628 5.922115e-02 #> 1759        b_wt -1.537565915 5.844035e-02 #> 1760        b_wt -1.531009202 5.767529e-02 #> 1761        b_wt -1.524452489 5.692752e-02 #> 1762        b_wt -1.517895776 5.619546e-02 #> 1763        b_wt -1.511339062 5.547714e-02 #> 1764        b_wt -1.504782349 5.477196e-02 #> 1765        b_wt -1.498225636 5.407934e-02 #> 1766        b_wt -1.491668923 5.339864e-02 #> 1767        b_wt -1.485112210 5.273023e-02 #> 1768        b_wt -1.478555496 5.207372e-02 #> 1769        b_wt -1.471998783 5.142688e-02 #> 1770        b_wt -1.465442070 5.078908e-02 #> 1771        b_wt -1.458885357 5.015969e-02 #> 1772        b_wt -1.452328644 4.953811e-02 #> 1773        b_wt -1.445771930 4.892400e-02 #> 1774        b_wt -1.439215217 4.831754e-02 #> 1775        b_wt -1.432658504 4.771679e-02 #> 1776        b_wt -1.426101791 4.712122e-02 #> 1777        b_wt -1.419545078 4.653030e-02 #> 1778        b_wt -1.412988364 4.594356e-02 #> 1779        b_wt -1.406431651 4.536054e-02 #> 1780        b_wt -1.399874938 4.478141e-02 #> 1781        b_wt -1.393318225 4.420498e-02 #> 1782        b_wt -1.386761512 4.363089e-02 #> 1783        b_wt -1.380204798 4.305883e-02 #> 1784        b_wt -1.373648085 4.248854e-02 #> 1785        b_wt -1.367091372 4.191979e-02 #> 1786        b_wt -1.360534659 4.135258e-02 #> 1787        b_wt -1.353977946 4.078656e-02 #> 1788        b_wt -1.347421232 4.022158e-02 #> 1789        b_wt -1.340864519 3.965759e-02 #> 1790        b_wt -1.334307806 3.909456e-02 #> 1791        b_wt -1.327751093 3.853252e-02 #> 1792        b_wt -1.321194380 3.797166e-02 #> 1793        b_wt -1.314637667 3.741210e-02 #> 1794        b_wt -1.308080953 3.685389e-02 #> 1795        b_wt -1.301524240 3.629718e-02 #> 1796        b_wt -1.294967527 3.574218e-02 #> 1797        b_wt -1.288410814 3.518909e-02 #> 1798        b_wt -1.281854101 3.463833e-02 #> 1799        b_wt -1.275297387 3.409050e-02 #> 1800        b_wt -1.268740674 3.354555e-02 #> 1801        b_wt -1.262183961 3.300375e-02 #> 1802        b_wt -1.255627248 3.246542e-02 #> 1803        b_wt -1.249070535 3.193086e-02 #> 1804        b_wt -1.242513821 3.140049e-02 #> 1805        b_wt -1.235957108 3.087561e-02 #> 1806        b_wt -1.229400395 3.035564e-02 #> 1807        b_wt -1.222843682 2.984090e-02 #> 1808        b_wt -1.216286969 2.933168e-02 #> 1809        b_wt -1.209730255 2.882825e-02 #> 1810        b_wt -1.203173542 2.833091e-02 #> 1811        b_wt -1.196616829 2.784128e-02 #> 1812        b_wt -1.190060116 2.735858e-02 #> 1813        b_wt -1.183503403 2.688282e-02 #> 1814        b_wt -1.176946689 2.641416e-02 #> 1815        b_wt -1.170389976 2.595280e-02 #> 1816        b_wt -1.163833263 2.549887e-02 #> 1817        b_wt -1.157276550 2.505367e-02 #> 1818        b_wt -1.150719837 2.461682e-02 #> 1819        b_wt -1.144163123 2.418772e-02 #> 1820        b_wt -1.137606410 2.376641e-02 #> 1821        b_wt -1.131049697 2.335291e-02 #> 1822        b_wt -1.124492984 2.294718e-02 #> 1823        b_wt -1.117936271 2.254998e-02 #> 1824        b_wt -1.111379557 2.216148e-02 #> 1825        b_wt -1.104822844 2.178053e-02 #> 1826        b_wt -1.098266131 2.140702e-02 #> 1827        b_wt -1.091709418 2.104081e-02 #> 1828        b_wt -1.085152705 2.068176e-02 #> 1829        b_wt -1.078595991 2.033004e-02 #> 1830        b_wt -1.072039278 1.998635e-02 #> 1831        b_wt -1.065482565 1.964917e-02 #> 1832        b_wt -1.058925852 1.931832e-02 #> 1833        b_wt -1.052369139 1.899357e-02 #> 1834        b_wt -1.045812425 1.867472e-02 #> 1835        b_wt -1.039255712 1.836156e-02 #> 1836        b_wt -1.032698999 1.805504e-02 #> 1837        b_wt -1.026142286 1.775366e-02 #> 1838        b_wt -1.019585573 1.745717e-02 #> 1839        b_wt -1.013028859 1.716537e-02 #> 1840        b_wt -1.006472146 1.687805e-02 #> 1841        b_wt -0.999915433 1.659500e-02 #> 1842        b_wt -0.993358720 1.631674e-02 #> 1843        b_wt -0.986802007 1.604250e-02 #> 1844        b_wt -0.980245294 1.577190e-02 #> 1845        b_wt -0.973688580 1.550478e-02 #> 1846        b_wt -0.967131867 1.524099e-02 #> 1847        b_wt -0.960575154 1.498041e-02 #> 1848        b_wt -0.954018441 1.472329e-02 #> 1849        b_wt -0.947461728 1.446942e-02 #> 1850        b_wt -0.940905014 1.421838e-02 #> 1851        b_wt -0.934348301 1.397010e-02 #> 1852        b_wt -0.927791588 1.372452e-02 #> 1853        b_wt -0.921234875 1.348160e-02 #> 1854        b_wt -0.914678162 1.324148e-02 #> 1855        b_wt -0.908121448 1.300435e-02 #> 1856        b_wt -0.901564735 1.276977e-02 #> 1857        b_wt -0.895008022 1.253777e-02 #> 1858        b_wt -0.888451309 1.230832e-02 #> 1859        b_wt -0.881894596 1.208146e-02 #> 1860        b_wt -0.875337882 1.185727e-02 #> 1861        b_wt -0.868781169 1.163627e-02 #> 1862        b_wt -0.862224456 1.141795e-02 #> 1863        b_wt -0.855667743 1.120235e-02 #> 1864        b_wt -0.849111030 1.098949e-02 #> 1865        b_wt -0.842554316 1.077943e-02 #> 1866        b_wt -0.835997603 1.057221e-02 #> 1867        b_wt -0.829440890 1.036846e-02 #> 1868        b_wt -0.822884177 1.016773e-02 #> 1869        b_wt -0.816327464 9.969955e-03 #> 1870        b_wt -0.809770750 9.775172e-03 #> 1871        b_wt -0.803214037 9.583404e-03 #> 1872        b_wt -0.796657324 9.394673e-03 #> 1873        b_wt -0.790100611 9.209480e-03 #> 1874        b_wt -0.783543898 9.027590e-03 #> 1875        b_wt -0.776987184 8.848762e-03 #> 1876        b_wt -0.770430471 8.672986e-03 #> 1877        b_wt -0.763873758 8.500250e-03 #> 1878        b_wt -0.757317045 8.330533e-03 #> 1879        b_wt -0.750760332 8.164121e-03 #> 1880        b_wt -0.744203618 8.001034e-03 #> 1881        b_wt -0.737646905 7.840836e-03 #> 1882        b_wt -0.731090192 7.683477e-03 #> 1883        b_wt -0.724533479 7.528902e-03 #> 1884        b_wt -0.717976766 7.377052e-03 #> 1885        b_wt -0.711420052 7.228002e-03 #> 1886        b_wt -0.704863339 7.081985e-03 #> 1887        b_wt -0.698306626 6.938444e-03 #> 1888        b_wt -0.691749913 6.797304e-03 #> 1889        b_wt -0.685193200 6.658487e-03 #> 1890        b_wt -0.678636486 6.521919e-03 #> 1891        b_wt -0.672079773 6.387528e-03 #> 1892        b_wt -0.665523060 6.255695e-03 #> 1893        b_wt -0.658966347 6.125839e-03 #> 1894        b_wt -0.652409634 5.997891e-03 #> 1895        b_wt -0.645852921 5.871786e-03 #> 1896        b_wt -0.639296207 5.747462e-03 #> 1897        b_wt -0.632739494 5.624861e-03 #> 1898        b_wt -0.626182781 5.504232e-03 #> 1899        b_wt -0.619626068 5.385286e-03 #> 1900        b_wt -0.613069355 5.267906e-03 #> 1901        b_wt -0.606512641 5.152065e-03 #> 1902        b_wt -0.599955928 5.037743e-03 #> 1903        b_wt -0.593399215 4.924924e-03 #> 1904        b_wt -0.586842502 4.813805e-03 #> 1905        b_wt -0.580285789 4.704340e-03 #> 1906        b_wt -0.573729075 4.596392e-03 #> 1907        b_wt -0.567172362 4.489982e-03 #> 1908        b_wt -0.560615649 4.385137e-03 #> 1909        b_wt -0.554058936 4.281892e-03 #> 1910        b_wt -0.547502223 4.180428e-03 #> 1911        b_wt -0.540945509 4.080930e-03 #> 1912        b_wt -0.534388796 3.983203e-03 #> 1913        b_wt -0.527832083 3.887303e-03 #> 1914        b_wt -0.521275370 3.793293e-03 #> 1915        b_wt -0.514718657 3.701238e-03 #> 1916        b_wt -0.508161943 3.611269e-03 #> 1917        b_wt -0.501605230 3.523845e-03 #> 1918        b_wt -0.495048517 3.438617e-03 #> 1919        b_wt -0.488491804 3.355652e-03 #> 1920        b_wt -0.481935091 3.275016e-03 #> 1921        b_wt -0.475378377 3.196770e-03 #> 1922        b_wt -0.468821664 3.120973e-03 #> 1923        b_wt -0.462264951 3.048242e-03 #> 1924        b_wt -0.455708238 2.978143e-03 #> 1925        b_wt -0.449151525 2.910667e-03 #> 1926        b_wt -0.442594811 2.845845e-03 #> 1927        b_wt -0.436038098 2.783704e-03 #> 1928        b_wt -0.429481385 2.724265e-03 #> 1929        b_wt -0.422924672 2.667988e-03 #> 1930        b_wt -0.416367959 2.614617e-03 #> 1931        b_wt -0.409811245 2.563944e-03 #> 1932        b_wt -0.403254532 2.515947e-03 #> 1933        b_wt -0.396697819 2.470594e-03 #> 1934        b_wt -0.390141106 2.427847e-03 #> 1935        b_wt -0.383584393 2.387937e-03 #> 1936        b_wt -0.377027679 2.350800e-03 #> 1937        b_wt -0.370470966 2.316047e-03 #> 1938        b_wt -0.363914253 2.283595e-03 #> 1939        b_wt -0.357357540 2.253354e-03 #> 1940        b_wt -0.350800827 2.225227e-03 #> 1941        b_wt -0.344244113 2.199226e-03 #> 1942        b_wt -0.337687400 2.175405e-03 #> 1943        b_wt -0.331130687 2.153291e-03 #> 1944        b_wt -0.324573974 2.132757e-03 #> 1945        b_wt -0.318017261 2.113674e-03 #> 1946        b_wt -0.311460548 2.095909e-03 #> 1947        b_wt -0.304903834 2.079335e-03 #> 1948        b_wt -0.298347121 2.063988e-03 #> 1949        b_wt -0.291790408 2.049458e-03 #> 1950        b_wt -0.285233695 2.035607e-03 #> 1951        b_wt -0.278676982 2.022295e-03 #> 1952        b_wt -0.272120268 2.009386e-03 #> 1953        b_wt -0.265563555 1.996745e-03 #> 1954        b_wt -0.259006842 1.984227e-03 #> 1955        b_wt -0.252450129 1.971644e-03 #> 1956        b_wt -0.245893416 1.958873e-03 #> 1957        b_wt -0.239336702 1.945798e-03 #> 1958        b_wt -0.232779989 1.932312e-03 #> 1959        b_wt -0.226223276 1.918311e-03 #> 1960        b_wt -0.219666563 1.903594e-03 #> 1961        b_wt -0.213109850 1.888068e-03 #> 1962        b_wt -0.206553136 1.871719e-03 #> 1963        b_wt -0.199996423 1.854481e-03 #> 1964        b_wt -0.193439710 1.836297e-03 #> 1965        b_wt -0.186882997 1.817116e-03 #> 1966        b_wt -0.180326284 1.796798e-03 #> 1967        b_wt -0.173769570 1.775240e-03 #> 1968        b_wt -0.167212857 1.752580e-03 #> 1969        b_wt -0.160656144 1.728809e-03 #> 1970        b_wt -0.154099431 1.703929e-03 #> 1971        b_wt -0.147542718 1.677945e-03 #> 1972        b_wt -0.140986004 1.650833e-03 #> 1973        b_wt -0.134429291 1.622460e-03 #> 1974        b_wt -0.127872578 1.593081e-03 #> 1975        b_wt -0.121315865 1.562739e-03 #> 1976        b_wt -0.114759152 1.531484e-03 #> 1977        b_wt -0.108202438 1.499375e-03 #> 1978        b_wt -0.101645725 1.466471e-03 #> 1979        b_wt -0.095089012 1.432703e-03 #> 1980        b_wt -0.088532299 1.398319e-03 #> 1981        b_wt -0.081975586 1.363409e-03 #> 1982        b_wt -0.075418872 1.328055e-03 #> 1983        b_wt -0.068862159 1.292342e-03 #> 1984        b_wt -0.062305446 1.256360e-03 #> 1985        b_wt -0.055748733 1.220190e-03 #> 1986        b_wt -0.049192020 1.183979e-03 #> 1987        b_wt -0.042635306 1.147829e-03 #> 1988        b_wt -0.036078593 1.111834e-03 #> 1989        b_wt -0.029521880 1.076087e-03 #> 1990        b_wt -0.022965167 1.040678e-03 #> 1991        b_wt -0.016408454 1.005765e-03 #> 1992        b_wt -0.009851740 9.714761e-04 #> 1993        b_wt -0.003295027 9.378434e-04 #> 1994        b_wt  0.003261686 9.049483e-04 #> 1995        b_wt  0.009818399 8.728695e-04 #> 1996        b_wt  0.016375112 8.416825e-04 #> 1997        b_wt  0.022931825 8.115313e-04 #> 1998        b_wt  0.029488539 7.826150e-04 #> 1999        b_wt  0.036045252 7.548287e-04 #> 2000        b_wt  0.042601965 7.282269e-04 #> 2001        b_wt  0.049158678 7.028597e-04 #> 2002        b_wt  0.055715391 6.787723e-04 #> 2003        b_wt  0.062272105 6.560273e-04 #> 2004        b_wt  0.068828818 6.349487e-04 #> 2005        b_wt  0.075385531 6.152684e-04 #> 2006        b_wt  0.081942244 5.970054e-04 #> 2007        b_wt  0.088498957 5.801733e-04 #> 2008        b_wt  0.095055671 5.647808e-04 #> 2009        b_wt  0.101612384 5.508313e-04 #> 2010        b_wt  0.108169097 5.386096e-04 #> 2011        b_wt  0.114725810 5.278634e-04 #> 2012        b_wt  0.121282523 5.185226e-04 #> 2013        b_wt  0.127839237 5.105643e-04 #> 2014        b_wt  0.134395950 5.039608e-04 #> 2015        b_wt  0.140952663 4.986797e-04 #> 2016        b_wt  0.147509376 4.948664e-04 #> 2017        b_wt  0.154066089 4.923796e-04 #> 2018        b_wt  0.160622803 4.910569e-04 #> 2019        b_wt  0.167179516 4.908443e-04 #> 2020        b_wt  0.173736229 4.916846e-04 #> 2021        b_wt  0.180292942 4.935171e-04 #> 2022        b_wt  0.186849655 4.963591e-04 #> 2023        b_wt  0.193406369 5.001480e-04 #> 2024        b_wt  0.199963082 5.046836e-04 #> 2025        b_wt  0.206519795 5.098921e-04 #> 2026        b_wt  0.213076508 5.156984e-04 #> 2027        b_wt  0.219633221 5.220260e-04 #> 2028        b_wt  0.226189935 5.288126e-04 #> 2029        b_wt  0.232746648 5.359997e-04 #> 2030        b_wt  0.239303361 5.434242e-04 #> 2031        b_wt  0.245860074 5.510077e-04 #> 2032        b_wt  0.252416787 5.586722e-04 #> 2033        b_wt  0.258973501 5.663408e-04 #> 2034        b_wt  0.265530214 5.739376e-04 #> 2035        b_wt  0.272086927 5.813279e-04 #> 2036        b_wt  0.278643640 5.884558e-04 #> 2037        b_wt  0.285200353 5.952548e-04 #> 2038        b_wt  0.291757067 6.016600e-04 #> 2039        b_wt  0.298313780 6.076095e-04 #> 2040        b_wt  0.304870493 6.130444e-04 #> 2041        b_wt  0.311427206 6.177935e-04 #> 2042        b_wt  0.317983919 6.218584e-04 #> 2043        b_wt  0.324540632 6.252298e-04 #> 2044        b_wt  0.331097346 6.278686e-04 #> 2045        b_wt  0.337654059 6.297396e-04 #> 2046        b_wt  0.344210772 6.308122e-04 #> 2047        b_wt  0.350767485 6.309517e-04 #> 2048        b_wt  0.357324198 6.301437e-04 #> 2049       b_cyl -3.734269161 1.112672e-03 #> 2050       b_cyl -3.730276446 1.111672e-03 #> 2051       b_cyl -3.726283731 1.108540e-03 #> 2052       b_cyl -3.722291016 1.102994e-03 #> 2053       b_cyl -3.718298302 1.095223e-03 #> 2054       b_cyl -3.714305587 1.085422e-03 #> 2055       b_cyl -3.710312872 1.073643e-03 #> 2056       b_cyl -3.706320157 1.059949e-03 #> 2057       b_cyl -3.702327442 1.044409e-03 #> 2058       b_cyl -3.698334727 1.027101e-03 #> 2059       b_cyl -3.694342012 1.007795e-03 #> 2060       b_cyl -3.690349297 9.869448e-04 #> 2061       b_cyl -3.686356582 9.646655e-04 #> 2062       b_cyl -3.682363867 9.410660e-04 #> 2063       b_cyl -3.678371152 9.162592e-04 #> 2064       b_cyl -3.674378438 8.903610e-04 #> 2065       b_cyl -3.670385723 8.634439e-04 #> 2066       b_cyl -3.666393008 8.355899e-04 #> 2067       b_cyl -3.662400293 8.070710e-04 #> 2068       b_cyl -3.658407578 7.780084e-04 #> 2069       b_cyl -3.654414863 7.485216e-04 #> 2070       b_cyl -3.650422148 7.187288e-04 #> 2071       b_cyl -3.646429433 6.887453e-04 #> 2072       b_cyl -3.642436718 6.586929e-04 #> 2073       b_cyl -3.638444003 6.287214e-04 #> 2074       b_cyl -3.634451288 5.989366e-04 #> 2075       b_cyl -3.630458574 5.694334e-04 #> 2076       b_cyl -3.626465859 5.403018e-04 #> 2077       b_cyl -3.622473144 5.116261e-04 #> 2078       b_cyl -3.618480429 4.834847e-04 #> 2079       b_cyl -3.614487714 4.560799e-04 #> 2080       b_cyl -3.610494999 4.293959e-04 #> 2081       b_cyl -3.606502284 4.034688e-04 #> 2082       b_cyl -3.602509569 3.783464e-04 #> 2083       b_cyl -3.598516854 3.540700e-04 #> 2084       b_cyl -3.594524139 3.306756e-04 #> 2085       b_cyl -3.590531424 3.082266e-04 #> 2086       b_cyl -3.586538710 2.868847e-04 #> 2087       b_cyl -3.582545995 2.665017e-04 #> 2088       b_cyl -3.578553280 2.470862e-04 #> 2089       b_cyl -3.574560565 2.286423e-04 #> 2090       b_cyl -3.570567850 2.111702e-04 #> 2091       b_cyl -3.566575135 1.946660e-04 #> 2092       b_cyl -3.562582420 1.792165e-04 #> 2093       b_cyl -3.558589705 1.648176e-04 #> 2094       b_cyl -3.554596990 1.513451e-04 #> 2095       b_cyl -3.550604275 1.387815e-04 #> 2096       b_cyl -3.546611560 1.271075e-04 #> 2097       b_cyl -3.542618846 1.163029e-04 #> 2098       b_cyl -3.538626131 1.063462e-04 #> 2099       b_cyl -3.534633416 9.734554e-05 #> 2100       b_cyl -3.530640701 8.917753e-05 #> 2101       b_cyl -3.526647986 8.178052e-05 #> 2102       b_cyl -3.522655271 7.513408e-05 #> 2103       b_cyl -3.518662556 6.921886e-05 #> 2104       b_cyl -3.514669841 6.401687e-05 #> 2105       b_cyl -3.510677126 5.952179e-05 #> 2106       b_cyl -3.506684411 5.584017e-05 #> 2107       b_cyl -3.502691696 5.282414e-05 #> 2108       b_cyl -3.498698982 5.046626e-05 #> 2109       b_cyl -3.494706267 4.876175e-05 #> 2110       b_cyl -3.490713552 4.770866e-05 #> 2111       b_cyl -3.486720837 4.730794e-05 #> 2112       b_cyl -3.482728122 4.761625e-05 #> 2113       b_cyl -3.478735407 4.868251e-05 #> 2114       b_cyl -3.474742692 5.043265e-05 #> 2115       b_cyl -3.470749977 5.288399e-05 #> 2116       b_cyl -3.466757262 5.605718e-05 #> 2117       b_cyl -3.462764547 5.997618e-05 #> 2118       b_cyl -3.458771832 6.466823e-05 #> 2119       b_cyl -3.454779118 7.028588e-05 #> 2120       b_cyl -3.450786403 7.681855e-05 #> 2121       b_cyl -3.446793688 8.424942e-05 #> 2122       b_cyl -3.442800973 9.262110e-05 #> 2123       b_cyl -3.438808258 1.019787e-04 #> 2124       b_cyl -3.434815543 1.123698e-04 #> 2125       b_cyl -3.430822828 1.238440e-04 #> 2126       b_cyl -3.426830113 1.367043e-04 #> 2127       b_cyl -3.422837398 1.507893e-04 #> 2128       b_cyl -3.418844683 1.661471e-04 #> 2129       b_cyl -3.414851968 1.828329e-04 #> 2130       b_cyl -3.410859254 2.009022e-04 #> 2131       b_cyl -3.406866539 2.204099e-04 #> 2132       b_cyl -3.402873824 2.415001e-04 #> 2133       b_cyl -3.398881109 2.643943e-04 #> 2134       b_cyl -3.394888394 2.889084e-04 #> 2135       b_cyl -3.390895679 3.150868e-04 #> 2136       b_cyl -3.386902964 3.429705e-04 #> 2137       b_cyl -3.382910249 3.725958e-04 #> 2138       b_cyl -3.378917534 4.039942e-04 #> 2139       b_cyl -3.374924819 4.374140e-04 #> 2140       b_cyl -3.370932104 4.728223e-04 #> 2141       b_cyl -3.366939390 5.100603e-04 #> 2142       b_cyl -3.362946675 5.491254e-04 #> 2143       b_cyl -3.358953960 5.900064e-04 #> 2144       b_cyl -3.354961245 6.326834e-04 #> 2145       b_cyl -3.350968530 6.771272e-04 #> 2146       b_cyl -3.346975815 7.236038e-04 #> 2147       b_cyl -3.342983100 7.717681e-04 #> 2148       b_cyl -3.338990385 8.215022e-04 #> 2149       b_cyl -3.334997670 8.727238e-04 #> 2150       b_cyl -3.331004955 9.253400e-04 #> 2151       b_cyl -3.327012240 9.792469e-04 #> 2152       b_cyl -3.323019526 1.034366e-03 #> 2153       b_cyl -3.319026811 1.090668e-03 #> 2154       b_cyl -3.315034096 1.147797e-03 #> 2155       b_cyl -3.311041381 1.205599e-03 #> 2156       b_cyl -3.307048666 1.263908e-03 #> 2157       b_cyl -3.303055951 1.322551e-03 #> 2158       b_cyl -3.299063236 1.381346e-03 #> 2159       b_cyl -3.295070521 1.440076e-03 #> 2160       b_cyl -3.291077806 1.498461e-03 #> 2161       b_cyl -3.287085091 1.556309e-03 #> 2162       b_cyl -3.283092376 1.613414e-03 #> 2163       b_cyl -3.279099662 1.669573e-03 #> 2164       b_cyl -3.275106947 1.724581e-03 #> 2165       b_cyl -3.271114232 1.778237e-03 #> 2166       b_cyl -3.267121517 1.830041e-03 #> 2167       b_cyl -3.263128802 1.879924e-03 #> 2168       b_cyl -3.259136087 1.927784e-03 #> 2169       b_cyl -3.255143372 1.973454e-03 #> 2170       b_cyl -3.251150657 2.016775e-03 #> 2171       b_cyl -3.247157942 2.057603e-03 #> 2172       b_cyl -3.243165227 2.095762e-03 #> 2173       b_cyl -3.239172512 2.130610e-03 #> 2174       b_cyl -3.235179798 2.162585e-03 #> 2175       b_cyl -3.231187083 2.191627e-03 #> 2176       b_cyl -3.227194368 2.217697e-03 #> 2177       b_cyl -3.223201653 2.240776e-03 #> 2178       b_cyl -3.219208938 2.260869e-03 #> 2179       b_cyl -3.215216223 2.277771e-03 #> 2180       b_cyl -3.211223508 2.291413e-03 #> 2181       b_cyl -3.207230793 2.302289e-03 #> 2182       b_cyl -3.203238078 2.310521e-03 #> 2183       b_cyl -3.199245363 2.316258e-03 #> 2184       b_cyl -3.195252648 2.319669e-03 #> 2185       b_cyl -3.191259934 2.320948e-03 #> 2186       b_cyl -3.187267219 2.320091e-03 #> 2187       b_cyl -3.183274504 2.317578e-03 #> 2188       b_cyl -3.179281789 2.313821e-03 #> 2189       b_cyl -3.175289074 2.309120e-03 #> 2190       b_cyl -3.171296359 2.303793e-03 #> 2191       b_cyl -3.167303644 2.298173e-03 #> 2192       b_cyl -3.163310929 2.292610e-03 #> 2193       b_cyl -3.159318214 2.287672e-03 #> 2194       b_cyl -3.155325499 2.283739e-03 #> 2195       b_cyl -3.151332784 2.281198e-03 #> 2196       b_cyl -3.147340070 2.280442e-03 #> 2197       b_cyl -3.143347355 2.281871e-03 #> 2198       b_cyl -3.139354640 2.285880e-03 #> 2199       b_cyl -3.135361925 2.293076e-03 #> 2200       b_cyl -3.131369210 2.304319e-03 #> 2201       b_cyl -3.127376495 2.319528e-03 #> 2202       b_cyl -3.123383780 2.339075e-03 #> 2203       b_cyl -3.119391065 2.363319e-03 #> 2204       b_cyl -3.115398350 2.392608e-03 #> 2205       b_cyl -3.111405635 2.427273e-03 #> 2206       b_cyl -3.107412920 2.468378e-03 #> 2207       b_cyl -3.103420206 2.516130e-03 #> 2208       b_cyl -3.099427491 2.570266e-03 #> 2209       b_cyl -3.095434776 2.631013e-03 #> 2210       b_cyl -3.091442061 2.698578e-03 #> 2211       b_cyl -3.087449346 2.773139e-03 #> 2212       b_cyl -3.083456631 2.854849e-03 #> 2213       b_cyl -3.079463916 2.945217e-03 #> 2214       b_cyl -3.075471201 3.043173e-03 #> 2215       b_cyl -3.071478486 3.148567e-03 #> 2216       b_cyl -3.067485771 3.261408e-03 #> 2217       b_cyl -3.063493056 3.381676e-03 #> 2218       b_cyl -3.059500342 3.509325e-03 #> 2219       b_cyl -3.055507627 3.644548e-03 #> 2220       b_cyl -3.051514912 3.788172e-03 #> 2221       b_cyl -3.047522197 3.938760e-03 #> 2222       b_cyl -3.043529482 4.096121e-03 #> 2223       b_cyl -3.039536767 4.260043e-03 #> 2224       b_cyl -3.035544052 4.430289e-03 #> 2225       b_cyl -3.031551337 4.606598e-03 #> 2226       b_cyl -3.027558622 4.789231e-03 #> 2227       b_cyl -3.023565907 4.977799e-03 #> 2228       b_cyl -3.019573192 5.171323e-03 #> 2229       b_cyl -3.015580478 5.369445e-03 #> 2230       b_cyl -3.011587763 5.571793e-03 #> 2231       b_cyl -3.007595048 5.777985e-03 #> 2232       b_cyl -3.003602333 5.987624e-03 #> 2233       b_cyl -2.999609618 6.200708e-03 #> 2234       b_cyl -2.995616903 6.416334e-03 #> 2235       b_cyl -2.991624188 6.633941e-03 #> 2236       b_cyl -2.987631473 6.853107e-03 #> 2237       b_cyl -2.983638758 7.073409e-03 #> 2238       b_cyl -2.979646043 7.294427e-03 #> 2239       b_cyl -2.975653328 7.515739e-03 #> 2240       b_cyl -2.971660614 7.736777e-03 #> 2241       b_cyl -2.967667899 7.957089e-03 #> 2242       b_cyl -2.963675184 8.176292e-03 #> 2243       b_cyl -2.959682469 8.394014e-03 #> 2244       b_cyl -2.955689754 8.609901e-03 #> 2245       b_cyl -2.951697039 8.823611e-03 #> 2246       b_cyl -2.947704324 9.034587e-03 #> 2247       b_cyl -2.943711609 9.242274e-03 #> 2248       b_cyl -2.939718894 9.446746e-03 #> 2249       b_cyl -2.935726179 9.647767e-03 #> 2250       b_cyl -2.931733464 9.845124e-03 #> 2251       b_cyl -2.927740750 1.003863e-02 #> 2252       b_cyl -2.923748035 1.022812e-02 #> 2253       b_cyl -2.919755320 1.041286e-02 #> 2254       b_cyl -2.915762605 1.059303e-02 #> 2255       b_cyl -2.911769890 1.076889e-02 #> 2256       b_cyl -2.907777175 1.094044e-02 #> 2257       b_cyl -2.903784460 1.110769e-02 #> 2258       b_cyl -2.899791745 1.127071e-02 #> 2259       b_cyl -2.895799030 1.142958e-02 #> 2260       b_cyl -2.891806315 1.158368e-02 #> 2261       b_cyl -2.887813600 1.173404e-02 #> 2262       b_cyl -2.883820886 1.188092e-02 #> 2263       b_cyl -2.879828171 1.202460e-02 #> 2264       b_cyl -2.875835456 1.216540e-02 #> 2265       b_cyl -2.871842741 1.230365e-02 #> 2266       b_cyl -2.867850026 1.243966e-02 #> 2267       b_cyl -2.863857311 1.257386e-02 #> 2268       b_cyl -2.859864596 1.270707e-02 #> 2269       b_cyl -2.855871881 1.283984e-02 #> 2270       b_cyl -2.851879166 1.297270e-02 #> 2271       b_cyl -2.847886451 1.310627e-02 #> 2272       b_cyl -2.843893736 1.324117e-02 #> 2273       b_cyl -2.839901022 1.337841e-02 #> 2274       b_cyl -2.835908307 1.351890e-02 #> 2275       b_cyl -2.831915592 1.366318e-02 #> 2276       b_cyl -2.827922877 1.381202e-02 #> 2277       b_cyl -2.823930162 1.396619e-02 #> 2278       b_cyl -2.819937447 1.412648e-02 #> 2279       b_cyl -2.815944732 1.429372e-02 #> 2280       b_cyl -2.811952017 1.447042e-02 #> 2281       b_cyl -2.807959302 1.465638e-02 #> 2282       b_cyl -2.803966587 1.485224e-02 #> 2283       b_cyl -2.799973873 1.505885e-02 #> 2284       b_cyl -2.795981158 1.527706e-02 #> 2285       b_cyl -2.791988443 1.550769e-02 #> 2286       b_cyl -2.787995728 1.575214e-02 #> 2287       b_cyl -2.784003013 1.601341e-02 #> 2288       b_cyl -2.780010298 1.628997e-02 #> 2289       b_cyl -2.776017583 1.658258e-02 #> 2290       b_cyl -2.772024868 1.689196e-02 #> 2291       b_cyl -2.768032153 1.721883e-02 #> 2292       b_cyl -2.764039438 1.756385e-02 #> 2293       b_cyl -2.760046723 1.792968e-02 #> 2294       b_cyl -2.756054009 1.831729e-02 #> 2295       b_cyl -2.752061294 1.872512e-02 #> 2296       b_cyl -2.748068579 1.915364e-02 #> 2297       b_cyl -2.744075864 1.960330e-02 #> 2298       b_cyl -2.740083149 2.007449e-02 #> 2299       b_cyl -2.736090434 2.056754e-02 #> 2300       b_cyl -2.732097719 2.108652e-02 #> 2301       b_cyl -2.728105004 2.162903e-02 #> 2302       b_cyl -2.724112289 2.219422e-02 #> 2303       b_cyl -2.720119574 2.278219e-02 #> 2304       b_cyl -2.716126859 2.339301e-02 #> 2305       b_cyl -2.712134145 2.402671e-02 #> 2306       b_cyl -2.708141430 2.468367e-02 #> 2307       b_cyl -2.704148715 2.536784e-02 #> 2308       b_cyl -2.700156000 2.607463e-02 #> 2309       b_cyl -2.696163285 2.680389e-02 #> 2310       b_cyl -2.692170570 2.755542e-02 #> 2311       b_cyl -2.688177855 2.832902e-02 #> 2312       b_cyl -2.684185140 2.912444e-02 #> 2313       b_cyl -2.680192425 2.994318e-02 #> 2314       b_cyl -2.676199710 3.078590e-02 #> 2315       b_cyl -2.672206995 3.164949e-02 #> 2316       b_cyl -2.668214281 3.253367e-02 #> 2317       b_cyl -2.664221566 3.343814e-02 #> 2318       b_cyl -2.660228851 3.436261e-02 #> 2319       b_cyl -2.656236136 3.530682e-02 #> 2320       b_cyl -2.652243421 3.627325e-02 #> 2321       b_cyl -2.648250706 3.726006e-02 #> 2322       b_cyl -2.644257991 3.826570e-02 #> 2323       b_cyl -2.640265276 3.928997e-02 #> 2324       b_cyl -2.636272561 4.033268e-02 #> 2325       b_cyl -2.632279846 4.139366e-02 #> 2326       b_cyl -2.628287131 4.247275e-02 #> 2327       b_cyl -2.624294417 4.357359e-02 #> 2328       b_cyl -2.620301702 4.469234e-02 #> 2329       b_cyl -2.616308987 4.582889e-02 #> 2330       b_cyl -2.612316272 4.698320e-02 #> 2331       b_cyl -2.608323557 4.815524e-02 #> 2332       b_cyl -2.604330842 4.934502e-02 #> 2333       b_cyl -2.600338127 5.055361e-02 #> 2334       b_cyl -2.596345412 5.178268e-02 #> 2335       b_cyl -2.592352697 5.302956e-02 #> 2336       b_cyl -2.588359982 5.429429e-02 #> 2337       b_cyl -2.584367267 5.557692e-02 #> 2338       b_cyl -2.580374553 5.687746e-02 #> 2339       b_cyl -2.576381838 5.819596e-02 #> 2340       b_cyl -2.572389123 5.953466e-02 #> 2341       b_cyl -2.568396408 6.089290e-02 #> 2342       b_cyl -2.564403693 6.226906e-02 #> 2343       b_cyl -2.560410978 6.366308e-02 #> 2344       b_cyl -2.556418263 6.507487e-02 #> 2345       b_cyl -2.552425548 6.650431e-02 #> 2346       b_cyl -2.548432833 6.795126e-02 #> 2347       b_cyl -2.544440118 6.941875e-02 #> 2348       b_cyl -2.540447403 7.090361e-02 #> 2349       b_cyl -2.536454689 7.240515e-02 #> 2350       b_cyl -2.532461974 7.392305e-02 #> 2351       b_cyl -2.528469259 7.545694e-02 #> 2352       b_cyl -2.524476544 7.700643e-02 #> 2353       b_cyl -2.520483829 7.857167e-02 #> 2354       b_cyl -2.516491114 8.015399e-02 #> 2355       b_cyl -2.512498399 8.175024e-02 #> 2356       b_cyl -2.508505684 8.335988e-02 #> 2357       b_cyl -2.504512969 8.498237e-02 #> 2358       b_cyl -2.500520254 8.661712e-02 #> 2359       b_cyl -2.496527539 8.826357e-02 #> 2360       b_cyl -2.492534825 8.992218e-02 #> 2361       b_cyl -2.488542110 9.159220e-02 #> 2362       b_cyl -2.484549395 9.327187e-02 #> 2363       b_cyl -2.480556680 9.496063e-02 #> 2364       b_cyl -2.476563965 9.665796e-02 #> 2365       b_cyl -2.472571250 9.836338e-02 #> 2366       b_cyl -2.468578535 1.000764e-01 #> 2367       b_cyl -2.464585820 1.017978e-01 #> 2368       b_cyl -2.460593105 1.035263e-01 #> 2369       b_cyl -2.456600390 1.052613e-01 #> 2370       b_cyl -2.452607675 1.070025e-01 #> 2371       b_cyl -2.448614961 1.087501e-01 #> 2372       b_cyl -2.444622246 1.105038e-01 #> 2373       b_cyl -2.440629531 1.122640e-01 #> 2374       b_cyl -2.436636816 1.140320e-01 #> 2375       b_cyl -2.432644101 1.158070e-01 #> 2376       b_cyl -2.428651386 1.175893e-01 #> 2377       b_cyl -2.424658671 1.193796e-01 #> 2378       b_cyl -2.420665956 1.211784e-01 #> 2379       b_cyl -2.416673241 1.229864e-01 #> 2380       b_cyl -2.412680526 1.248056e-01 #> 2381       b_cyl -2.408687811 1.266377e-01 #> 2382       b_cyl -2.404695097 1.284824e-01 #> 2383       b_cyl -2.400702382 1.303411e-01 #> 2384       b_cyl -2.396709667 1.322150e-01 #> 2385       b_cyl -2.392716952 1.341053e-01 #> 2386       b_cyl -2.388724237 1.360136e-01 #> 2387       b_cyl -2.384731522 1.379444e-01 #> 2388       b_cyl -2.380738807 1.398983e-01 #> 2389       b_cyl -2.376746092 1.418756e-01 #> 2390       b_cyl -2.372753377 1.438780e-01 #> 2391       b_cyl -2.368760662 1.459070e-01 #> 2392       b_cyl -2.364767947 1.479644e-01 #> 2393       b_cyl -2.360775233 1.500519e-01 #> 2394       b_cyl -2.356782518 1.521782e-01 #> 2395       b_cyl -2.352789803 1.543389e-01 #> 2396       b_cyl -2.348797088 1.565354e-01 #> 2397       b_cyl -2.344804373 1.587692e-01 #> 2398       b_cyl -2.340811658 1.610419e-01 #> 2399       b_cyl -2.336818943 1.633549e-01 #> 2400       b_cyl -2.332826228 1.657121e-01 #> 2401       b_cyl -2.328833513 1.681192e-01 #> 2402       b_cyl -2.324840798 1.705710e-01 #> 2403       b_cyl -2.320848083 1.730684e-01 #> 2404       b_cyl -2.316855369 1.756123e-01 #> 2405       b_cyl -2.312862654 1.782036e-01 #> 2406       b_cyl -2.308869939 1.808430e-01 #> 2407       b_cyl -2.304877224 1.835372e-01 #> 2408       b_cyl -2.300884509 1.862848e-01 #> 2409       b_cyl -2.296891794 1.890820e-01 #> 2410       b_cyl -2.292899079 1.919288e-01 #> 2411       b_cyl -2.288906364 1.948253e-01 #> 2412       b_cyl -2.284913649 1.977713e-01 #> 2413       b_cyl -2.280920934 2.007666e-01 #> 2414       b_cyl -2.276928219 2.038201e-01 #> 2415       b_cyl -2.272935505 2.069230e-01 #> 2416       b_cyl -2.268942790 2.100735e-01 #> 2417       b_cyl -2.264950075 2.132711e-01 #> 2418       b_cyl -2.260957360 2.165148e-01 #> 2419       b_cyl -2.256964645 2.198039e-01 #> 2420       b_cyl -2.252971930 2.231392e-01 #> 2421       b_cyl -2.248979215 2.265249e-01 #> 2422       b_cyl -2.244986500 2.299525e-01 #> 2423       b_cyl -2.240993785 2.334207e-01 #> 2424       b_cyl -2.237001070 2.369284e-01 #> 2425       b_cyl -2.233008355 2.404745e-01 #> 2426       b_cyl -2.229015641 2.440576e-01 #> 2427       b_cyl -2.225022926 2.476803e-01 #> 2428       b_cyl -2.221030211 2.513408e-01 #> 2429       b_cyl -2.217037496 2.550342e-01 #> 2430       b_cyl -2.213044781 2.587592e-01 #> 2431       b_cyl -2.209052066 2.625148e-01 #> 2432       b_cyl -2.205059351 2.662998e-01 #> 2433       b_cyl -2.201066636 2.701131e-01 #> 2434       b_cyl -2.197073921 2.739581e-01 #> 2435       b_cyl -2.193081206 2.778302e-01 #> 2436       b_cyl -2.189088491 2.817272e-01 #> 2437       b_cyl -2.185095777 2.856484e-01 #> 2438       b_cyl -2.181103062 2.895931e-01 #> 2439       b_cyl -2.177110347 2.935607e-01 #> 2440       b_cyl -2.173117632 2.975509e-01 #> 2441       b_cyl -2.169124917 3.015670e-01 #> 2442       b_cyl -2.165132202 3.056042e-01 #> 2443       b_cyl -2.161139487 3.096625e-01 #> 2444       b_cyl -2.157146772 3.137415e-01 #> 2445       b_cyl -2.153154057 3.178413e-01 #> 2446       b_cyl -2.149161342 3.219618e-01 #> 2447       b_cyl -2.145168627 3.261048e-01 #> 2448       b_cyl -2.141175913 3.302717e-01 #> 2449       b_cyl -2.137183198 3.344600e-01 #> 2450       b_cyl -2.133190483 3.386702e-01 #> 2451       b_cyl -2.129197768 3.429026e-01 #> 2452       b_cyl -2.125205053 3.471578e-01 #> 2453       b_cyl -2.121212338 3.514364e-01 #> 2454       b_cyl -2.117219623 3.557426e-01 #> 2455       b_cyl -2.113226908 3.600755e-01 #> 2456       b_cyl -2.109234193 3.644341e-01 #> 2457       b_cyl -2.105241478 3.688193e-01 #> 2458       b_cyl -2.101248763 3.732317e-01 #> 2459       b_cyl -2.097256049 3.776723e-01 #> 2460       b_cyl -2.093263334 3.821418e-01 #> 2461       b_cyl -2.089270619 3.866474e-01 #> 2462       b_cyl -2.085277904 3.911839e-01 #> 2463       b_cyl -2.081285189 3.957520e-01 #> 2464       b_cyl -2.077292474 4.003524e-01 #> 2465       b_cyl -2.073299759 4.049855e-01 #> 2466       b_cyl -2.069307044 4.096522e-01 #> 2467       b_cyl -2.065314329 4.143549e-01 #> 2468       b_cyl -2.061321614 4.190973e-01 #> 2469       b_cyl -2.057328899 4.238745e-01 #> 2470       b_cyl -2.053336185 4.286867e-01 #> 2471       b_cyl -2.049343470 4.335340e-01 #> 2472       b_cyl -2.045350755 4.384163e-01 #> 2473       b_cyl -2.041358040 4.433334e-01 #> 2474       b_cyl -2.037365325 4.482895e-01 #> 2475       b_cyl -2.033372610 4.532824e-01 #> 2476       b_cyl -2.029379895 4.583085e-01 #> 2477       b_cyl -2.025387180 4.633670e-01 #> 2478       b_cyl -2.021394465 4.684569e-01 #> 2479       b_cyl -2.017401750 4.735772e-01 #> 2480       b_cyl -2.013409035 4.787265e-01 #> 2481       b_cyl -2.009416321 4.839082e-01 #> 2482       b_cyl -2.005423606 4.891157e-01 #> 2483       b_cyl -2.001430891 4.943465e-01 #> 2484       b_cyl -1.997438176 4.995986e-01 #> 2485       b_cyl -1.993445461 5.048698e-01 #> 2486       b_cyl -1.989452746 5.101579e-01 #> 2487       b_cyl -1.985460031 5.154609e-01 #> 2488       b_cyl -1.981467316 5.207767e-01 #> 2489       b_cyl -1.977474601 5.261002e-01 #> 2490       b_cyl -1.973481886 5.314283e-01 #> 2491       b_cyl -1.969489171 5.367581e-01 #> 2492       b_cyl -1.965496457 5.420865e-01 #> 2493       b_cyl -1.961503742 5.474102e-01 #> 2494       b_cyl -1.957511027 5.527247e-01 #> 2495       b_cyl -1.953518312 5.580250e-01 #> 2496       b_cyl -1.949525597 5.633088e-01 #> 2497       b_cyl -1.945532882 5.685724e-01 #> 2498       b_cyl -1.941540167 5.738124e-01 #> 2499       b_cyl -1.937547452 5.790253e-01 #> 2500       b_cyl -1.933554737 5.842075e-01 #> 2501       b_cyl -1.929562022 5.893489e-01 #> 2502       b_cyl -1.925569307 5.944493e-01 #> 2503       b_cyl -1.921576593 5.995070e-01 #> 2504       b_cyl -1.917583878 6.045185e-01 #> 2505       b_cyl -1.913591163 6.094807e-01 #> 2506       b_cyl -1.909598448 6.143905e-01 #> 2507       b_cyl -1.905605733 6.192437e-01 #> 2508       b_cyl -1.901613018 6.240264e-01 #> 2509       b_cyl -1.897620303 6.287467e-01 #> 2510       b_cyl -1.893627588 6.334022e-01 #> 2511       b_cyl -1.889634873 6.379905e-01 #> 2512       b_cyl -1.885642158 6.425096e-01 #> 2513       b_cyl -1.881649443 6.469574e-01 #> 2514       b_cyl -1.877656729 6.513260e-01 #> 2515       b_cyl -1.873664014 6.556099e-01 #> 2516       b_cyl -1.869671299 6.598173e-01 #> 2517       b_cyl -1.865678584 6.639474e-01 #> 2518       b_cyl -1.861685869 6.679993e-01 #> 2519       b_cyl -1.857693154 6.719724e-01 #> 2520       b_cyl -1.853700439 6.758665e-01 #> 2521       b_cyl -1.849707724 6.796696e-01 #> 2522       b_cyl -1.845715009 6.833886e-01 #> 2523       b_cyl -1.841722294 6.870291e-01 #> 2524       b_cyl -1.837729579 6.905917e-01 #> 2525       b_cyl -1.833736865 6.940773e-01 #> 2526       b_cyl -1.829744150 6.974869e-01 #> 2527       b_cyl -1.825751435 7.008217e-01 #> 2528       b_cyl -1.821758720 7.040681e-01 #> 2529       b_cyl -1.817766005 7.072437e-01 #> 2530       b_cyl -1.813773290 7.103504e-01 #> 2531       b_cyl -1.809780575 7.133901e-01 #> 2532       b_cyl -1.805787860 7.163652e-01 #> 2533       b_cyl -1.801795145 7.192778e-01 #> 2534       b_cyl -1.797802430 7.221268e-01 #> 2535       b_cyl -1.793809715 7.249108e-01 #> 2536       b_cyl -1.789817001 7.276416e-01 #> 2537       b_cyl -1.785824286 7.303219e-01 #> 2538       b_cyl -1.781831571 7.329546e-01 #> 2539       b_cyl -1.777838856 7.355428e-01 #> 2540       b_cyl -1.773846141 7.380893e-01 #> 2541       b_cyl -1.769853426 7.405930e-01 #> 2542       b_cyl -1.765860711 7.430598e-01 #> 2543       b_cyl -1.761867996 7.454960e-01 #> 2544       b_cyl -1.757875281 7.479048e-01 #> 2545       b_cyl -1.753882566 7.502894e-01 #> 2546       b_cyl -1.749889852 7.526529e-01 #> 2547       b_cyl -1.745897137 7.549984e-01 #> 2548       b_cyl -1.741904422 7.573270e-01 #> 2549       b_cyl -1.737911707 7.596450e-01 #> 2550       b_cyl -1.733918992 7.619555e-01 #> 2551       b_cyl -1.729926277 7.642614e-01 #> 2552       b_cyl -1.725933562 7.665654e-01 #> 2553       b_cyl -1.721940847 7.688700e-01 #> 2554       b_cyl -1.717948132 7.711779e-01 #> 2555       b_cyl -1.713955417 7.734931e-01 #> 2556       b_cyl -1.709962702 7.758168e-01 #> 2557       b_cyl -1.705969988 7.781511e-01 #> 2558       b_cyl -1.701977273 7.804975e-01 #> 2559       b_cyl -1.697984558 7.828575e-01 #> 2560       b_cyl -1.693991843 7.852325e-01 #> 2561       b_cyl -1.689999128 7.876253e-01 #> 2562       b_cyl -1.686006413 7.900369e-01 #> 2563       b_cyl -1.682013698 7.924661e-01 #> 2564       b_cyl -1.678020983 7.949129e-01 #> 2565       b_cyl -1.674028268 7.973773e-01 #> 2566       b_cyl -1.670035553 7.998590e-01 #> 2567       b_cyl -1.666042838 8.023573e-01 #> 2568       b_cyl -1.662050124 8.048739e-01 #> 2569       b_cyl -1.658057409 8.074052e-01 #> 2570       b_cyl -1.654064694 8.099489e-01 #> 2571       b_cyl -1.650071979 8.125032e-01 #> 2572       b_cyl -1.646079264 8.150663e-01 #> 2573       b_cyl -1.642086549 8.176357e-01 #> 2574       b_cyl -1.638093834 8.202093e-01 #> 2575       b_cyl -1.634101119 8.227835e-01 #> 2576       b_cyl -1.630108404 8.253548e-01 #> 2577       b_cyl -1.626115689 8.279200e-01 #> 2578       b_cyl -1.622122974 8.304760e-01 #> 2579       b_cyl -1.618130260 8.330194e-01 #> 2580       b_cyl -1.614137545 8.355470e-01 #> 2581       b_cyl -1.610144830 8.380530e-01 #> 2582       b_cyl -1.606152115 8.405319e-01 #> 2583       b_cyl -1.602159400 8.429824e-01 #> 2584       b_cyl -1.598166685 8.454012e-01 #> 2585       b_cyl -1.594173970 8.477847e-01 #> 2586       b_cyl -1.590181255 8.501297e-01 #> 2587       b_cyl -1.586188540 8.524326e-01 #> 2588       b_cyl -1.582195825 8.546831e-01 #> 2589       b_cyl -1.578203110 8.568807e-01 #> 2590       b_cyl -1.574210396 8.590256e-01 #> 2591       b_cyl -1.570217681 8.611151e-01 #> 2592       b_cyl -1.566224966 8.631467e-01 #> 2593       b_cyl -1.562232251 8.651180e-01 #> 2594       b_cyl -1.558239536 8.670267e-01 #> 2595       b_cyl -1.554246821 8.688567e-01 #> 2596       b_cyl -1.550254106 8.706196e-01 #> 2597       b_cyl -1.546261391 8.723138e-01 #> 2598       b_cyl -1.542268676 8.739382e-01 #> 2599       b_cyl -1.538275961 8.754915e-01 #> 2600       b_cyl -1.534283246 8.769729e-01 #> 2601       b_cyl -1.530290532 8.783767e-01 #> 2602       b_cyl -1.526297817 8.796960e-01 #> 2603       b_cyl -1.522305102 8.809411e-01 #> 2604       b_cyl -1.518312387 8.821117e-01 #> 2605       b_cyl -1.514319672 8.832075e-01 #> 2606       b_cyl -1.510326957 8.842283e-01 #> 2607       b_cyl -1.506334242 8.851740e-01 #> 2608       b_cyl -1.502341527 8.860347e-01 #> 2609       b_cyl -1.498348812 8.868136e-01 #> 2610       b_cyl -1.494356097 8.875169e-01 #> 2611       b_cyl -1.490363382 8.881444e-01 #> 2612       b_cyl -1.486370668 8.886959e-01 #> 2613       b_cyl -1.482377953 8.891710e-01 #> 2614       b_cyl -1.478385238 8.895694e-01 #> 2615       b_cyl -1.474392523 8.898756e-01 #> 2616       b_cyl -1.470399808 8.901022e-01 #> 2617       b_cyl -1.466407093 8.902498e-01 #> 2618       b_cyl -1.462414378 8.903177e-01 #> 2619       b_cyl -1.458421663 8.903049e-01 #> 2620       b_cyl -1.454428948 8.902102e-01 #> 2621       b_cyl -1.450436233 8.900290e-01 #> 2622       b_cyl -1.446443518 8.897487e-01 #> 2623       b_cyl -1.442450804 8.893821e-01 #> 2624       b_cyl -1.438458089 8.889276e-01 #> 2625       b_cyl -1.434465374 8.883837e-01 #> 2626       b_cyl -1.430472659 8.877489e-01 #> 2627       b_cyl -1.426479944 8.870216e-01 #> 2628       b_cyl -1.422487229 8.861899e-01 #> 2629       b_cyl -1.418494514 8.852519e-01 #> 2630       b_cyl -1.414501799 8.842160e-01 #> 2631       b_cyl -1.410509084 8.830809e-01 #> 2632       b_cyl -1.406516369 8.818453e-01 #> 2633       b_cyl -1.402523654 8.805081e-01 #> 2634       b_cyl -1.398530940 8.790682e-01 #> 2635       b_cyl -1.394538225 8.775069e-01 #> 2636       b_cyl -1.390545510 8.758368e-01 #> 2637       b_cyl -1.386552795 8.740618e-01 #> 2638       b_cyl -1.382560080 8.721818e-01 #> 2639       b_cyl -1.378567365 8.701970e-01 #> 2640       b_cyl -1.374574650 8.681074e-01 #> 2641       b_cyl -1.370581935 8.659114e-01 #> 2642       b_cyl -1.366589220 8.635927e-01 #> 2643       b_cyl -1.362596505 8.611722e-01 #> 2644       b_cyl -1.358603790 8.586513e-01 #> 2645       b_cyl -1.354611076 8.560316e-01 #> 2646       b_cyl -1.350618361 8.533149e-01 #> 2647       b_cyl -1.346625646 8.505031e-01 #> 2648       b_cyl -1.342632931 8.475908e-01 #> 2649       b_cyl -1.338640216 8.445777e-01 #> 2650       b_cyl -1.334647501 8.414780e-01 #> 2651       b_cyl -1.330654786 8.382946e-01 #> 2652       b_cyl -1.326662071 8.350303e-01 #> 2653       b_cyl -1.322669356 8.316882e-01 #> 2654       b_cyl -1.318676641 8.282711e-01 #> 2655       b_cyl -1.314683926 8.247721e-01 #> 2656       b_cyl -1.310691212 8.212018e-01 #> 2657       b_cyl -1.306698497 8.175676e-01 #> 2658       b_cyl -1.302705782 8.138727e-01 #> 2659       b_cyl -1.298713067 8.101203e-01 #> 2660       b_cyl -1.294720352 8.063134e-01 #> 2661       b_cyl -1.290727637 8.024548e-01 #> 2662       b_cyl -1.286734922 7.985384e-01 #> 2663       b_cyl -1.282742207 7.945778e-01 #> 2664       b_cyl -1.278749492 7.905755e-01 #> 2665       b_cyl -1.274756777 7.865343e-01 #> 2666       b_cyl -1.270764062 7.824566e-01 #> 2667       b_cyl -1.266771348 7.783447e-01 #> 2668       b_cyl -1.262778633 7.741990e-01 #> 2669       b_cyl -1.258785918 7.700199e-01 #> 2670       b_cyl -1.254793203 7.658139e-01 #> 2671       b_cyl -1.250800488 7.615830e-01 #> 2672       b_cyl -1.246807773 7.573287e-01 #> 2673       b_cyl -1.242815058 7.530527e-01 #> 2674       b_cyl -1.238822343 7.487565e-01 #> 2675       b_cyl -1.234829628 7.444391e-01 #> 2676       b_cyl -1.230836913 7.401033e-01 #> 2677       b_cyl -1.226844198 7.357517e-01 #> 2678       b_cyl -1.222851484 7.313854e-01 #> 2679       b_cyl -1.218858769 7.270053e-01 #> 2680       b_cyl -1.214866054 7.226125e-01 #> 2681       b_cyl -1.210873339 7.182078e-01 #> 2682       b_cyl -1.206880624 7.137901e-01 #> 2683       b_cyl -1.202887909 7.093622e-01 #> 2684       b_cyl -1.198895194 7.049251e-01 #> 2685       b_cyl -1.194902479 7.004794e-01 #> 2686       b_cyl -1.190909764 6.960256e-01 #> 2687       b_cyl -1.186917049 6.915643e-01 #> 2688       b_cyl -1.182924334 6.870958e-01 #> 2689       b_cyl -1.178931620 6.826197e-01 #> 2690       b_cyl -1.174938905 6.781376e-01 #> 2691       b_cyl -1.170946190 6.736499e-01 #> 2692       b_cyl -1.166953475 6.691567e-01 #> 2693       b_cyl -1.162960760 6.646582e-01 #> 2694       b_cyl -1.158968045 6.601546e-01 #> 2695       b_cyl -1.154975330 6.556454e-01 #> 2696       b_cyl -1.150982615 6.511305e-01 #> 2697       b_cyl -1.146989900 6.466103e-01 #> 2698       b_cyl -1.142997185 6.420846e-01 #> 2699       b_cyl -1.139004470 6.375532e-01 #> 2700       b_cyl -1.135011756 6.330157e-01 #> 2701       b_cyl -1.131019041 6.284716e-01 #> 2702       b_cyl -1.127026326 6.239192e-01 #> 2703       b_cyl -1.123033611 6.193586e-01 #> 2704       b_cyl -1.119040896 6.147894e-01 #> 2705       b_cyl -1.115048181 6.102109e-01 #> 2706       b_cyl -1.111055466 6.056224e-01 #> 2707       b_cyl -1.107062751 6.010231e-01 #> 2708       b_cyl -1.103070036 5.964118e-01 #> 2709       b_cyl -1.099077321 5.917854e-01 #> 2710       b_cyl -1.095084606 5.871451e-01 #> 2711       b_cyl -1.091091892 5.824903e-01 #> 2712       b_cyl -1.087099177 5.778199e-01 #> 2713       b_cyl -1.083106462 5.731334e-01 #> 2714       b_cyl -1.079113747 5.684298e-01 #> 2715       b_cyl -1.075121032 5.637070e-01 #> 2716       b_cyl -1.071128317 5.589634e-01 #> 2717       b_cyl -1.067135602 5.542009e-01 #> 2718       b_cyl -1.063142887 5.494189e-01 #> 2719       b_cyl -1.059150172 5.446174e-01 #> 2720       b_cyl -1.055157457 5.397961e-01 #> 2721       b_cyl -1.051164742 5.349550e-01 #> 2722       b_cyl -1.047172028 5.300914e-01 #> 2723       b_cyl -1.043179313 5.252075e-01 #> 2724       b_cyl -1.039186598 5.203049e-01 #> 2725       b_cyl -1.035193883 5.153844e-01 #> 2726       b_cyl -1.031201168 5.104468e-01 #> 2727       b_cyl -1.027208453 5.054929e-01 #> 2728       b_cyl -1.023215738 5.005239e-01 #> 2729       b_cyl -1.019223023 4.955386e-01 #> 2730       b_cyl -1.015230308 4.905415e-01 #> 2731       b_cyl -1.011237593 4.855343e-01 #> 2732       b_cyl -1.007244878 4.805186e-01 #> 2733       b_cyl -1.003252164 4.754962e-01 #> 2734       b_cyl -0.999259449 4.704690e-01 #> 2735       b_cyl -0.995266734 4.654389e-01 #> 2736       b_cyl -0.991274019 4.604087e-01 #> 2737       b_cyl -0.987281304 4.553807e-01 #> 2738       b_cyl -0.983288589 4.503572e-01 #> 2739       b_cyl -0.979295874 4.453403e-01 #> 2740       b_cyl -0.975303159 4.403320e-01 #> 2741       b_cyl -0.971310444 4.353344e-01 #> 2742       b_cyl -0.967317729 4.303518e-01 #> 2743       b_cyl -0.963325014 4.253862e-01 #> 2744       b_cyl -0.959332300 4.204385e-01 #> 2745       b_cyl -0.955339585 4.155106e-01 #> 2746       b_cyl -0.951346870 4.106042e-01 #> 2747       b_cyl -0.947354155 4.057209e-01 #> 2748       b_cyl -0.943361440 4.008626e-01 #> 2749       b_cyl -0.939368725 3.960360e-01 #> 2750       b_cyl -0.935376010 3.912382e-01 #> 2751       b_cyl -0.931383295 3.864700e-01 #> 2752       b_cyl -0.927390580 3.817323e-01 #> 2753       b_cyl -0.923397865 3.770260e-01 #> 2754       b_cyl -0.919405150 3.723520e-01 #> 2755       b_cyl -0.915412436 3.677125e-01 #> 2756       b_cyl -0.911419721 3.631122e-01 #> 2757       b_cyl -0.907427006 3.585461e-01 #> 2758       b_cyl -0.903434291 3.540143e-01 #> 2759       b_cyl -0.899441576 3.495170e-01 #> 2760       b_cyl -0.895448861 3.450542e-01 #> 2761       b_cyl -0.891456146 3.406259e-01 #> 2762       b_cyl -0.887463431 3.362357e-01 #> 2763       b_cyl -0.883470716 3.318830e-01 #> 2764       b_cyl -0.879478001 3.275640e-01 #> 2765       b_cyl -0.875485286 3.232783e-01 #> 2766       b_cyl -0.871492572 3.190254e-01 #> 2767       b_cyl -0.867499857 3.148050e-01 #> 2768       b_cyl -0.863507142 3.106164e-01 #> 2769       b_cyl -0.859514427 3.064645e-01 #> 2770       b_cyl -0.855521712 3.023443e-01 #> 2771       b_cyl -0.851528997 2.982542e-01 #> 2772       b_cyl -0.847536282 2.941935e-01 #> 2773       b_cyl -0.843543567 2.901618e-01 #> 2774       b_cyl -0.839550852 2.861585e-01 #> 2775       b_cyl -0.835558137 2.821838e-01 #> 2776       b_cyl -0.831565422 2.782416e-01 #> 2777       b_cyl -0.827572708 2.743263e-01 #> 2778       b_cyl -0.823579993 2.704375e-01 #> 2779       b_cyl -0.819587278 2.665750e-01 #> 2780       b_cyl -0.815594563 2.627384e-01 #> 2781       b_cyl -0.811601848 2.589276e-01 #> 2782       b_cyl -0.807609133 2.551447e-01 #> 2783       b_cyl -0.803616418 2.513904e-01 #> 2784       b_cyl -0.799623703 2.476616e-01 #> 2785       b_cyl -0.795630988 2.439584e-01 #> 2786       b_cyl -0.791638273 2.402808e-01 #> 2787       b_cyl -0.787645558 2.366290e-01 #> 2788       b_cyl -0.783652844 2.330033e-01 #> 2789       b_cyl -0.779660129 2.294080e-01 #> 2790       b_cyl -0.775667414 2.258410e-01 #> 2791       b_cyl -0.771674699 2.223014e-01 #> 2792       b_cyl -0.767681984 2.187894e-01 #> 2793       b_cyl -0.763689269 2.153055e-01 #> 2794       b_cyl -0.759696554 2.118504e-01 #> 2795       b_cyl -0.755703839 2.084246e-01 #> 2796       b_cyl -0.751711124 2.050350e-01 #> 2797       b_cyl -0.747718409 2.016763e-01 #> 2798       b_cyl -0.743725695 1.983489e-01 #> 2799       b_cyl -0.739732980 1.950536e-01 #> 2800       b_cyl -0.735740265 1.917911e-01 #> 2801       b_cyl -0.731747550 1.885619e-01 #> 2802       b_cyl -0.727754835 1.853690e-01 #> 2803       b_cyl -0.723762120 1.822162e-01 #> 2804       b_cyl -0.719769405 1.790990e-01 #> 2805       b_cyl -0.715776690 1.760181e-01 #> 2806       b_cyl -0.711783975 1.729740e-01 #> 2807       b_cyl -0.707791260 1.699673e-01 #> 2808       b_cyl -0.703798545 1.669984e-01 #> 2809       b_cyl -0.699805831 1.640731e-01 #> 2810       b_cyl -0.695813116 1.611899e-01 #> 2811       b_cyl -0.691820401 1.583460e-01 #> 2812       b_cyl -0.687827686 1.555419e-01 #> 2813       b_cyl -0.683834971 1.527777e-01 #> 2814       b_cyl -0.679842256 1.500536e-01 #> 2815       b_cyl -0.675849541 1.473698e-01 #> 2816       b_cyl -0.671856826 1.447343e-01 #> 2817       b_cyl -0.667864111 1.421400e-01 #> 2818       b_cyl -0.663871396 1.395860e-01 #> 2819       b_cyl -0.659878681 1.370724e-01 #> 2820       b_cyl -0.655885967 1.345988e-01 #> 2821       b_cyl -0.651893252 1.321651e-01 #> 2822       b_cyl -0.647900537 1.297728e-01 #> 2823       b_cyl -0.643907822 1.274263e-01 #> 2824       b_cyl -0.639915107 1.251185e-01 #> 2825       b_cyl -0.635922392 1.228491e-01 #> 2826       b_cyl -0.631929677 1.206175e-01 #> 2827       b_cyl -0.627936962 1.184232e-01 #> 2828       b_cyl -0.623944247 1.162658e-01 #> 2829       b_cyl -0.619951532 1.141485e-01 #> 2830       b_cyl -0.615958817 1.120702e-01 #> 2831       b_cyl -0.611966103 1.100267e-01 #> 2832       b_cyl -0.607973388 1.080172e-01 #> 2833       b_cyl -0.603980673 1.060412e-01 #> 2834       b_cyl -0.599987958 1.040979e-01 #> 2835       b_cyl -0.595995243 1.021868e-01 #> 2836       b_cyl -0.592002528 1.003123e-01 #> 2837       b_cyl -0.588009813 9.846950e-02 #> 2838       b_cyl -0.584017098 9.665640e-02 #> 2839       b_cyl -0.580024383 9.487238e-02 #> 2840       b_cyl -0.576031668 9.311679e-02 #> 2841       b_cyl -0.572038953 9.138899e-02 #> 2842       b_cyl -0.568046239 8.968902e-02 #> 2843       b_cyl -0.564053524 8.802036e-02 #> 2844       b_cyl -0.560060809 8.637735e-02 #> 2845       b_cyl -0.556068094 8.475942e-02 #> 2846       b_cyl -0.552075379 8.316602e-02 #> 2847       b_cyl -0.548082664 8.159663e-02 #> 2848       b_cyl -0.544089949 8.005075e-02 #> 2849       b_cyl -0.540097234 7.852988e-02 #> 2850       b_cyl -0.536104519 7.703418e-02 #> 2851       b_cyl -0.532111804 7.556038e-02 #> 2852       b_cyl -0.528119089 7.410811e-02 #> 2853       b_cyl -0.524126375 7.267699e-02 #> 2854       b_cyl -0.520133660 7.126667e-02 #> 2855       b_cyl -0.516140945 6.987685e-02 #> 2856       b_cyl -0.512148230 6.851026e-02 #> 2857       b_cyl -0.508155515 6.716467e-02 #> 2858       b_cyl -0.504162800 6.583866e-02 #> 2859       b_cyl -0.500170085 6.453205e-02 #> 2860       b_cyl -0.496177370 6.324466e-02 #> 2861       b_cyl -0.492184655 6.197635e-02 #> 2862       b_cyl -0.488191940 6.072707e-02 #> 2863       b_cyl -0.484199225 5.950056e-02 #> 2864       b_cyl -0.480206511 5.829280e-02 #> 2865       b_cyl -0.476213796 5.710377e-02 #> 2866       b_cyl -0.472221081 5.593344e-02 #> 2867       b_cyl -0.468228366 5.478182e-02 #> 2868       b_cyl -0.464235651 5.364892e-02 #> 2869       b_cyl -0.460242936 5.253605e-02 #> 2870       b_cyl -0.456250221 5.144472e-02 #> 2871       b_cyl -0.452257506 5.037227e-02 #> 2872       b_cyl -0.448264791 4.931877e-02 #> 2873       b_cyl -0.444272076 4.828431e-02 #> 2874       b_cyl -0.440279361 4.726894e-02 #> 2875       b_cyl -0.436286647 4.627274e-02 #> 2876       b_cyl -0.432293932 4.529833e-02 #> 2877       b_cyl -0.428301217 4.434481e-02 #> 2878       b_cyl -0.424308502 4.341068e-02 #> 2879       b_cyl -0.420315787 4.249596e-02 #> 2880       b_cyl -0.416323072 4.160066e-02 #> 2881       b_cyl -0.412330357 4.072480e-02 #> 2882       b_cyl -0.408337642 3.986836e-02 #> 2883       b_cyl -0.404344927 3.903507e-02 #> 2884       b_cyl -0.400352212 3.822136e-02 #> 2885       b_cyl -0.396359497 3.742681e-02 #> 2886       b_cyl -0.392366783 3.665126e-02 #> 2887       b_cyl -0.388374068 3.589455e-02 #> 2888       b_cyl -0.384381353 3.515650e-02 #> 2889       b_cyl -0.380388638 3.443774e-02 #> 2890       b_cyl -0.376395923 3.374007e-02 #> 2891       b_cyl -0.372403208 3.306012e-02 #> 2892       b_cyl -0.368410493 3.239757e-02 #> 2893       b_cyl -0.364417778 3.175206e-02 #> 2894       b_cyl -0.360425063 3.112322e-02 #> 2895       b_cyl -0.356432348 3.051064e-02 #> 2896       b_cyl -0.352439633 2.991559e-02 #> 2897       b_cyl -0.348446919 2.933729e-02 #> 2898       b_cyl -0.344454204 2.877366e-02 #> 2899       b_cyl -0.340461489 2.822422e-02 #> 2900       b_cyl -0.336468774 2.768846e-02 #> 2901       b_cyl -0.332476059 2.716589e-02 #> 2902       b_cyl -0.328483344 2.665601e-02 #> 2903       b_cyl -0.324490629 2.616028e-02 #> 2904       b_cyl -0.320497914 2.567640e-02 #> 2905       b_cyl -0.316505199 2.520340e-02 #> 2906       b_cyl -0.312512484 2.474080e-02 #> 2907       b_cyl -0.308519769 2.428809e-02 #> 2908       b_cyl -0.304527055 2.384483e-02 #> 2909       b_cyl -0.300534340 2.341075e-02 #> 2910       b_cyl -0.296541625 2.298664e-02 #> 2911       b_cyl -0.292548910 2.257043e-02 #> 2912       b_cyl -0.288556195 2.216171e-02 #> 2913       b_cyl -0.284563480 2.176011e-02 #> 2914       b_cyl -0.280570765 2.136529e-02 #> 2915       b_cyl -0.276578050 2.097691e-02 #> 2916       b_cyl -0.272585335 2.059517e-02 #> 2917       b_cyl -0.268592620 2.021989e-02 #> 2918       b_cyl -0.264599905 1.985005e-02 #> 2919       b_cyl -0.260607191 1.948542e-02 #> 2920       b_cyl -0.256614476 1.912579e-02 #> 2921       b_cyl -0.252621761 1.877096e-02 #> 2922       b_cyl -0.248629046 1.842075e-02 #> 2923       b_cyl -0.244636331 1.807564e-02 #> 2924       b_cyl -0.240643616 1.773500e-02 #> 2925       b_cyl -0.236650901 1.739846e-02 #> 2926       b_cyl -0.232658186 1.706587e-02 #> 2927       b_cyl -0.228665471 1.673713e-02 #> 2928       b_cyl -0.224672756 1.641212e-02 #> 2929       b_cyl -0.220680041 1.609075e-02 #> 2930       b_cyl -0.216687327 1.577361e-02 #> 2931       b_cyl -0.212694612 1.545984e-02 #> 2932       b_cyl -0.208701897 1.514934e-02 #> 2933       b_cyl -0.204709182 1.484203e-02 #> 2934       b_cyl -0.200716467 1.453779e-02 #> 2935       b_cyl -0.196723752 1.423654e-02 #> 2936       b_cyl -0.192731037 1.393837e-02 #> 2937       b_cyl -0.188738322 1.364334e-02 #> 2938       b_cyl -0.184745607 1.335094e-02 #> 2939       b_cyl -0.180752892 1.306108e-02 #> 2940       b_cyl -0.176760177 1.277364e-02 #> 2941       b_cyl -0.172767463 1.248854e-02 #> 2942       b_cyl -0.168774748 1.220567e-02 #> 2943       b_cyl -0.164782033 1.192522e-02 #> 2944       b_cyl -0.160789318 1.164693e-02 #> 2945       b_cyl -0.156796603 1.137056e-02 #> 2946       b_cyl -0.152803888 1.109604e-02 #> 2947       b_cyl -0.148811173 1.082330e-02 #> 2948       b_cyl -0.144818458 1.055228e-02 #> 2949       b_cyl -0.140825743 1.028292e-02 #> 2950       b_cyl -0.136833028 1.001550e-02 #> 2951       b_cyl -0.132840313 9.749691e-03 #> 2952       b_cyl -0.128847599 9.485467e-03 #> 2953       b_cyl -0.124854884 9.222830e-03 #> 2954       b_cyl -0.120862169 8.961798e-03 #> 2955       b_cyl -0.116869454 8.702402e-03 #> 2956       b_cyl -0.112876739 8.444771e-03 #> 2957       b_cyl -0.108884024 8.189191e-03 #> 2958       b_cyl -0.104891309 7.935469e-03 #> 2959       b_cyl -0.100898594 7.683700e-03 #> 2960       b_cyl -0.096905879 7.433988e-03 #> 2961       b_cyl -0.092913164 7.186451e-03 #> 2962       b_cyl -0.088920449 6.941214e-03 #> 2963       b_cyl -0.084927735 6.698710e-03 #> 2964       b_cyl -0.080935020 6.459118e-03 #> 2965       b_cyl -0.076942305 6.222348e-03 #> 2966       b_cyl -0.072949590 5.988562e-03 #> 2967       b_cyl -0.068956875 5.757925e-03 #> 2968       b_cyl -0.064964160 5.530606e-03 #> 2969       b_cyl -0.060971445 5.306775e-03 #> 2970       b_cyl -0.056978730 5.087288e-03 #> 2971       b_cyl -0.052986015 4.871851e-03 #> 2972       b_cyl -0.048993300 4.660491e-03 #> 2973       b_cyl -0.045000585 4.453365e-03 #> 2974       b_cyl -0.041007871 4.250624e-03 #> 2975       b_cyl -0.037015156 4.052414e-03 #> 2976       b_cyl -0.033022441 3.859002e-03 #> 2977       b_cyl -0.029029726 3.671318e-03 #> 2978       b_cyl -0.025037011 3.488605e-03 #> 2979       b_cyl -0.021044296 3.310960e-03 #> 2980       b_cyl -0.017051581 3.138470e-03 #> 2981       b_cyl -0.013058866 2.971213e-03 #> 2982       b_cyl -0.009066151 2.809252e-03 #> 2983       b_cyl -0.005073436 2.653133e-03 #> 2984       b_cyl -0.001080721 2.503068e-03 #> 2985       b_cyl  0.002911993 2.358421e-03 #> 2986       b_cyl  0.006904708 2.219196e-03 #> 2987       b_cyl  0.010897423 2.085387e-03 #> 2988       b_cyl  0.014890138 1.956973e-03 #> 2989       b_cyl  0.018882853 1.833925e-03 #> 2990       b_cyl  0.022875568 1.717016e-03 #> 2991       b_cyl  0.026868283 1.605651e-03 #> 2992       b_cyl  0.030860998 1.499454e-03 #> 2993       b_cyl  0.034853713 1.398346e-03 #> 2994       b_cyl  0.038846428 1.302241e-03 #> 2995       b_cyl  0.042839143 1.211046e-03 #> 2996       b_cyl  0.046831857 1.124689e-03 #> 2997       b_cyl  0.050824572 1.043968e-03 #> 2998       b_cyl  0.054817287 9.677739e-04 #> 2999       b_cyl  0.058810002 8.959866e-04 #> 3000       b_cyl  0.062802717 8.284834e-04 #> 3001       b_cyl  0.066795432 7.651391e-04 #> 3002       b_cyl  0.070788147 7.058267e-04 #> 3003       b_cyl  0.074780862 6.506792e-04 #> 3004       b_cyl  0.078773577 5.997924e-04 #> 3005       b_cyl  0.082766292 5.524828e-04 #> 3006       b_cyl  0.086759007 5.086235e-04 #> 3007       b_cyl  0.090751721 4.680898e-04 #> 3008       b_cyl  0.094744436 4.307586e-04 #> 3009       b_cyl  0.098737151 3.965098e-04 #> 3010       b_cyl  0.102729866 3.656015e-04 #> 3011       b_cyl  0.106722581 3.377178e-04 #> 3012       b_cyl  0.110715296 3.125203e-04 #> 3013       b_cyl  0.114708011 2.899072e-04 #> 3014       b_cyl  0.118700726 2.697808e-04 #> 3015       b_cyl  0.122693441 2.520479e-04 #> 3016       b_cyl  0.126686156 2.366199e-04 #> 3017       b_cyl  0.130678871 2.238293e-04 #> 3018       b_cyl  0.134671585 2.131750e-04 #> 3019       b_cyl  0.138664300 2.045543e-04 #> 3020       b_cyl  0.142657015 1.979020e-04 #> 3021       b_cyl  0.146649730 1.931567e-04 #> 3022       b_cyl  0.150642445 1.902613e-04 #> 3023       b_cyl  0.154635160 1.892477e-04 #> 3024       b_cyl  0.158627875 1.902503e-04 #> 3025       b_cyl  0.162620590 1.929325e-04 #> 3026       b_cyl  0.166613305 1.972538e-04 #> 3027       b_cyl  0.170606020 2.031758e-04 #> 3028       b_cyl  0.174598735 2.106621e-04 #> 3029       b_cyl  0.178591449 2.196775e-04 #> 3030       b_cyl  0.182584164 2.303517e-04 #> 3031       b_cyl  0.186576879 2.426184e-04 #> 3032       b_cyl  0.190569594 2.562953e-04 #> 3033       b_cyl  0.194562309 2.713476e-04 #> 3034       b_cyl  0.198555024 2.877393e-04 #> 3035       b_cyl  0.202547739 3.054327e-04 #> 3036       b_cyl  0.206540454 3.243879e-04 #> 3037       b_cyl  0.210533169 3.447658e-04 #> 3038       b_cyl  0.214525884 3.663335e-04 #> 3039       b_cyl  0.218518599 3.889947e-04 #> 3040       b_cyl  0.222511313 4.126928e-04 #> 3041       b_cyl  0.226504028 4.373667e-04 #> 3042       b_cyl  0.230496743 4.629510e-04 #> 3043       b_cyl  0.234489458 4.893965e-04 #> 3044       b_cyl  0.238482173 5.167188e-04 #> 3045       b_cyl  0.242474888 5.446780e-04 #> 3046       b_cyl  0.246467603 5.731845e-04 #> 3047       b_cyl  0.250460318 6.021436e-04 #> 3048       b_cyl  0.254453033 6.314563e-04 #> 3049       b_cyl  0.258445748 6.610192e-04 #> 3050       b_cyl  0.262438463 6.907231e-04 #> 3051       b_cyl  0.266431177 7.204108e-04 #> 3052       b_cyl  0.270423892 7.499483e-04 #> 3053       b_cyl  0.274416607 7.792152e-04 #> 3054       b_cyl  0.278409322 8.080891e-04 #> 3055       b_cyl  0.282402037 8.364464e-04 #> 3056       b_cyl  0.286394752 8.641626e-04 #> 3057       b_cyl  0.290387467 8.909650e-04 #> 3058       b_cyl  0.294380182 9.167661e-04 #> 3059       b_cyl  0.298372897 9.414903e-04 #> 3060       b_cyl  0.302365612 9.650196e-04 #> 3061       b_cyl  0.306358326 9.872395e-04 #> 3062       b_cyl  0.310351041 1.008040e-03 #> 3063       b_cyl  0.314343756 1.027303e-03 #> 3064       b_cyl  0.318336471 1.044577e-03 #> 3065       b_cyl  0.322329186 1.060088e-03 #> 3066       b_cyl  0.326321901 1.073758e-03 #> 3067       b_cyl  0.330314616 1.085516e-03 #> 3068       b_cyl  0.334307331 1.095301e-03 #> 3069       b_cyl  0.338300046 1.103057e-03 #> 3070       b_cyl  0.342292761 1.108592e-03 #> 3071       b_cyl  0.346285476 1.111715e-03 #> 3072       b_cyl  0.350278190 1.112707e-03 # }"},{"path":"https://easystats.github.io/bayestestR/reference/eti.html","id":null,"dir":"Reference","previous_headings":"","what":"Equal-Tailed Interval (ETI) — eti","title":"Equal-Tailed Interval (ETI) — eti","text":"Compute Equal-Tailed Interval (ETI) posterior distributions using quantiles method. probability interval equal probability . ETI can used context uncertainty characterisation posterior distributions Credible Interval (CI).","code":""},{"path":"https://easystats.github.io/bayestestR/reference/eti.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Equal-Tailed Interval (ETI) — eti","text":"","code":"eti(x, ...)  # S3 method for numeric eti(x, ci = 0.95, verbose = TRUE, ...)  # S3 method for stanreg eti(   x,   ci = 0.95,   effects = c(\"fixed\", \"random\", \"all\"),   component = c(\"location\", \"all\", \"conditional\", \"smooth_terms\", \"sigma\",     \"distributional\", \"auxiliary\"),   parameters = NULL,   verbose = TRUE,   ... )  # S3 method for brmsfit eti(   x,   ci = 0.95,   effects = c(\"fixed\", \"random\", \"all\"),   component = c(\"conditional\", \"zi\", \"zero_inflated\", \"all\"),   parameters = NULL,   verbose = TRUE,   ... )"},{"path":"https://easystats.github.io/bayestestR/reference/eti.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Equal-Tailed Interval (ETI) — eti","text":"x Vector representing posterior distribution, data frame vectors. Can also Bayesian model. bayestestR supports wide range models (see, example, methods(\"hdi\")) documented 'Usage' section, methods classes mostly resemble arguments .numeric .data.framemethods. ... Currently used. ci Value vector probability (credible) interval - CI (0 1) estimated. Default .95 (95%). verbose Toggle warnings. effects results fixed effects, random effects returned? applies mixed models. May abbreviated. component results parameters, parameters conditional model zero-inflated part model returned? May abbreviated. applies brms-models. parameters Regular expression pattern describes parameters returned. Meta-parameters (like lp__ prior_) filtered default, parameters typically appear summary() returned. Use parameters select specific parameters output.","code":""},{"path":"https://easystats.github.io/bayestestR/reference/eti.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Equal-Tailed Interval (ETI) — eti","text":"data frame following columns: Parameter model parameter(s), x model-object. x vector, column missing. CI probability credible interval. CI_low, CI_high lower upper credible interval limits parameters.","code":""},{"path":"https://easystats.github.io/bayestestR/reference/eti.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Equal-Tailed Interval (ETI) — eti","text":"Unlike equal-tailed intervals (see eti()) typically exclude 2.5% tail distribution always include median, HDI equal-tailed therefore always includes mode(s) posterior distributions. can useful better represent credibility mass distribution, HDI also limitations. See spi() details.  95% 89% Credible Intervals (CI) two reasonable ranges characterize uncertainty related estimation (see discussion differences two values).  89% intervals (ci = 0.89) deemed stable , instance, 95% intervals (Kruschke, 2014). effective sample size least 10.000 recommended one wants estimate 95% intervals high precision (Kruschke, 2014, p. 183ff). Unfortunately, default number posterior samples Bayes packages (e.g., rstanarm brms) 4.000 (thus, might want increase fitting model). Moreover, 89 indicates arbitrariness interval limits - remarkable property highest prime number exceed already unstable 95% threshold (McElreath, 2015).  However, 95% advantages . instance, shares (case normal posterior distribution) intuitive relationship standard deviation conveys accurate image (artificial) bounds distribution. Also, wider, makes analyses conservative (.e., probability covering 0 larger 95% CI lower ranges 89%), good thing context reproducibility crisis.  95% equal-tailed interval (ETI) 2.5% distribution either side limits. indicates 2.5th percentile 97.5h percentile. symmetric distributions, two methods computing credible intervals, ETI HDI, return similar results.  case skewed distributions. Indeed, possible parameter values ETI lower credibility (less probable) parameter values outside ETI. property seems undesirable summary credible values distribution.  hand, ETI range change transformations applied distribution (instance, log odds scale probabilities): lower higher bounds transformed distribution correspond transformed lower higher bounds original distribution. contrary, applying transformations distribution change resulting HDI.","code":""},{"path":[]},{"path":"https://easystats.github.io/bayestestR/reference/eti.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Equal-Tailed Interval (ETI) — eti","text":"","code":"library(bayestestR)  posterior <- rnorm(1000) eti(posterior) #> 95% ETI: [-1.93, 1.84] eti(posterior, ci = c(0.80, 0.89, 0.95)) #> Equal-Tailed Interval #>  #> 80% ETI       |       89% ETI |       95% ETI #> --------------------------------------------- #> [-1.29, 1.25] | [-1.58, 1.53] | [-1.93, 1.84]  df <- data.frame(replicate(4, rnorm(100))) eti(df) #> Equal-Tailed Interval #>  #> Parameter |       95% ETI #> ------------------------- #> X1        | [-1.93, 2.19] #> X2        | [-1.70, 1.96] #> X3        | [-1.91, 1.63] #> X4        | [-1.87, 1.87] eti(df, ci = c(0.80, 0.89, 0.95)) #> Equal-Tailed Interval #>  #> Parameter |       80% ETI |       89% ETI |       95% ETI #> --------------------------------------------------------- #> X1        | [-1.16, 1.28] | [-1.74, 1.78] | [-1.93, 2.19] #> X2        | [-0.96, 1.62] | [-1.40, 1.70] | [-1.70, 1.96] #> X3        | [-1.07, 0.88] | [-1.52, 1.15] | [-1.91, 1.63] #> X4        | [-1.20, 1.18] | [-1.67, 1.47] | [-1.87, 1.87] # \\dontrun{ library(rstanarm) model <- stan_glm(mpg ~ wt + gear, data = mtcars, chains = 2, iter = 200, refresh = 0) #> Warning: The largest R-hat is 1.06, indicating chains have not mixed. #> Running the chains for more iterations may help. See #> https://mc-stan.org/misc/warnings.html#r-hat #> Warning: Bulk Effective Samples Size (ESS) is too low, indicating posterior means and medians may be unreliable. #> Running the chains for more iterations may help. See #> https://mc-stan.org/misc/warnings.html#bulk-ess #> Warning: Tail Effective Samples Size (ESS) is too low, indicating posterior variances and tail quantiles may be unreliable. #> Running the chains for more iterations may help. See #> https://mc-stan.org/misc/warnings.html#tail-ess eti(model) #> Equal-Tailed Interval #>  #> Parameter   |        95% ETI | Effects |   Component #> ---------------------------------------------------- #> (Intercept) | [29.80, 50.38] |   fixed | conditional #> wt          | [-6.99, -3.94] |   fixed | conditional #> gear        | [-2.21,  1.24] |   fixed | conditional eti(model, ci = c(0.80, 0.89, 0.95)) #> Equal-Tailed Interval #>  #> Parameter   |        80% ETI |        89% ETI |        95% ETI | Effects |   Component #> -------------------------------------------------------------------------------------- #> (Intercept) | [32.43, 45.66] | [31.18, 47.98] | [29.80, 50.38] |   fixed | conditional #> wt          | [-6.44, -4.62] | [-6.66, -4.35] | [-6.99, -3.94] |   fixed | conditional #> gear        | [-1.52,  0.79] | [-1.88,  0.99] | [-2.21,  1.24] |   fixed | conditional  library(emmeans) eti(emtrends(model, ~1, \"wt\")) #> Warning: Model has 0 prior weights, but we recovered 32 rows of data. #> So prior weights were ignored. #> Equal-Tailed Interval #>  #> Parameter |        95% ETI #> -------------------------- #> overall   | [-6.99, -3.94]  library(brms) model <- brms::brm(mpg ~ wt + cyl, data = mtcars) #> Compiling Stan program... #> Start sampling #>  #> SAMPLING FOR MODEL '2d19b3a372313df641edf05db5e9f303' NOW (CHAIN 1). #> Chain 1:  #> Chain 1: Gradient evaluation took 1.1e-05 seconds #> Chain 1: 1000 transitions using 10 leapfrog steps per transition would take 0.11 seconds. #> Chain 1: Adjust your expectations accordingly! #> Chain 1:  #> Chain 1:  #> Chain 1: Iteration:    1 / 2000 [  0%]  (Warmup) #> Chain 1: Iteration:  200 / 2000 [ 10%]  (Warmup) #> Chain 1: Iteration:  400 / 2000 [ 20%]  (Warmup) #> Chain 1: Iteration:  600 / 2000 [ 30%]  (Warmup) #> Chain 1: Iteration:  800 / 2000 [ 40%]  (Warmup) #> Chain 1: Iteration: 1000 / 2000 [ 50%]  (Warmup) #> Chain 1: Iteration: 1001 / 2000 [ 50%]  (Sampling) #> Chain 1: Iteration: 1200 / 2000 [ 60%]  (Sampling) #> Chain 1: Iteration: 1400 / 2000 [ 70%]  (Sampling) #> Chain 1: Iteration: 1600 / 2000 [ 80%]  (Sampling) #> Chain 1: Iteration: 1800 / 2000 [ 90%]  (Sampling) #> Chain 1: Iteration: 2000 / 2000 [100%]  (Sampling) #> Chain 1:  #> Chain 1:  Elapsed Time: 0.02809 seconds (Warm-up) #> Chain 1:                0.025061 seconds (Sampling) #> Chain 1:                0.053151 seconds (Total) #> Chain 1:  #>  #> SAMPLING FOR MODEL '2d19b3a372313df641edf05db5e9f303' NOW (CHAIN 2). #> Chain 2:  #> Chain 2: Gradient evaluation took 7e-06 seconds #> Chain 2: 1000 transitions using 10 leapfrog steps per transition would take 0.07 seconds. #> Chain 2: Adjust your expectations accordingly! #> Chain 2:  #> Chain 2:  #> Chain 2: Iteration:    1 / 2000 [  0%]  (Warmup) #> Chain 2: Iteration:  200 / 2000 [ 10%]  (Warmup) #> Chain 2: Iteration:  400 / 2000 [ 20%]  (Warmup) #> Chain 2: Iteration:  600 / 2000 [ 30%]  (Warmup) #> Chain 2: Iteration:  800 / 2000 [ 40%]  (Warmup) #> Chain 2: Iteration: 1000 / 2000 [ 50%]  (Warmup) #> Chain 2: Iteration: 1001 / 2000 [ 50%]  (Sampling) #> Chain 2: Iteration: 1200 / 2000 [ 60%]  (Sampling) #> Chain 2: Iteration: 1400 / 2000 [ 70%]  (Sampling) #> Chain 2: Iteration: 1600 / 2000 [ 80%]  (Sampling) #> Chain 2: Iteration: 1800 / 2000 [ 90%]  (Sampling) #> Chain 2: Iteration: 2000 / 2000 [100%]  (Sampling) #> Chain 2:  #> Chain 2:  Elapsed Time: 0.02755 seconds (Warm-up) #> Chain 2:                0.026252 seconds (Sampling) #> Chain 2:                0.053802 seconds (Total) #> Chain 2:  #>  #> SAMPLING FOR MODEL '2d19b3a372313df641edf05db5e9f303' NOW (CHAIN 3). #> Chain 3:  #> Chain 3: Gradient evaluation took 6e-06 seconds #> Chain 3: 1000 transitions using 10 leapfrog steps per transition would take 0.06 seconds. #> Chain 3: Adjust your expectations accordingly! #> Chain 3:  #> Chain 3:  #> Chain 3: Iteration:    1 / 2000 [  0%]  (Warmup) #> Chain 3: Iteration:  200 / 2000 [ 10%]  (Warmup) #> Chain 3: Iteration:  400 / 2000 [ 20%]  (Warmup) #> Chain 3: Iteration:  600 / 2000 [ 30%]  (Warmup) #> Chain 3: Iteration:  800 / 2000 [ 40%]  (Warmup) #> Chain 3: Iteration: 1000 / 2000 [ 50%]  (Warmup) #> Chain 3: Iteration: 1001 / 2000 [ 50%]  (Sampling) #> Chain 3: Iteration: 1200 / 2000 [ 60%]  (Sampling) #> Chain 3: Iteration: 1400 / 2000 [ 70%]  (Sampling) #> Chain 3: Iteration: 1600 / 2000 [ 80%]  (Sampling) #> Chain 3: Iteration: 1800 / 2000 [ 90%]  (Sampling) #> Chain 3: Iteration: 2000 / 2000 [100%]  (Sampling) #> Chain 3:  #> Chain 3:  Elapsed Time: 0.029382 seconds (Warm-up) #> Chain 3:                0.027785 seconds (Sampling) #> Chain 3:                0.057167 seconds (Total) #> Chain 3:  #>  #> SAMPLING FOR MODEL '2d19b3a372313df641edf05db5e9f303' NOW (CHAIN 4). #> Chain 4:  #> Chain 4: Gradient evaluation took 7e-06 seconds #> Chain 4: 1000 transitions using 10 leapfrog steps per transition would take 0.07 seconds. #> Chain 4: Adjust your expectations accordingly! #> Chain 4:  #> Chain 4:  #> Chain 4: Iteration:    1 / 2000 [  0%]  (Warmup) #> Chain 4: Iteration:  200 / 2000 [ 10%]  (Warmup) #> Chain 4: Iteration:  400 / 2000 [ 20%]  (Warmup) #> Chain 4: Iteration:  600 / 2000 [ 30%]  (Warmup) #> Chain 4: Iteration:  800 / 2000 [ 40%]  (Warmup) #> Chain 4: Iteration: 1000 / 2000 [ 50%]  (Warmup) #> Chain 4: Iteration: 1001 / 2000 [ 50%]  (Sampling) #> Chain 4: Iteration: 1200 / 2000 [ 60%]  (Sampling) #> Chain 4: Iteration: 1400 / 2000 [ 70%]  (Sampling) #> Chain 4: Iteration: 1600 / 2000 [ 80%]  (Sampling) #> Chain 4: Iteration: 1800 / 2000 [ 90%]  (Sampling) #> Chain 4: Iteration: 2000 / 2000 [100%]  (Sampling) #> Chain 4:  #> Chain 4:  Elapsed Time: 0.028515 seconds (Warm-up) #> Chain 4:                0.029923 seconds (Sampling) #> Chain 4:                0.058438 seconds (Total) #> Chain 4:  eti(model) #> Equal-Tailed Interval #>  #> Parameter   |        95% ETI | Effects |   Component #> ---------------------------------------------------- #> b_Intercept | [36.12, 43.17] |   fixed | conditional #> b_wt        | [-4.83, -1.56] |   fixed | conditional #> b_cyl       | [-2.39, -0.63] |   fixed | conditional eti(model, ci = c(0.80, 0.89, 0.95)) #> Equal-Tailed Interval #>  #> Parameter   |        80% ETI |        89% ETI |        95% ETI | Effects |   Component #> -------------------------------------------------------------------------------------- #> b_Intercept | [37.41, 41.92] | [36.83, 42.53] | [36.12, 43.17] |   fixed | conditional #> b_wt        | [-4.20, -2.14] | [-4.45, -1.86] | [-4.83, -1.56] |   fixed | conditional #> b_cyl       | [-2.08, -0.96] | [-2.21, -0.82] | [-2.39, -0.63] |   fixed | conditional  library(BayesFactor) bf <- ttestBF(x = rnorm(100, 1, 1)) eti(bf) #> Equal-Tailed Interval #>  #> Parameter  |      95% ETI #> ------------------------- #> Difference | [0.85, 1.26] eti(bf, ci = c(0.80, 0.89, 0.95)) #> Equal-Tailed Interval #>  #> Parameter  |      80% ETI |      89% ETI |      95% ETI #> ------------------------------------------------------- #> Difference | [0.92, 1.19] | [0.89, 1.22] | [0.85, 1.26] # }"},{"path":"https://easystats.github.io/bayestestR/reference/hdi.html","id":null,"dir":"Reference","previous_headings":"","what":"Highest Density Interval (HDI) — hdi","title":"Highest Density Interval (HDI) — hdi","text":"Compute Highest Density Interval (HDI) posterior distributions. points within interval higher probability density points outside interval. HDI can used context uncertainty characterisation posterior distributions Credible Interval (CI).","code":""},{"path":"https://easystats.github.io/bayestestR/reference/hdi.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Highest Density Interval (HDI) — hdi","text":"","code":"hdi(x, ...)  # S3 method for numeric hdi(x, ci = 0.95, verbose = TRUE, ...)  # S3 method for data.frame hdi(x, ci = 0.95, verbose = TRUE, ...)  # S3 method for stanreg hdi(   x,   ci = 0.95,   effects = c(\"fixed\", \"random\", \"all\"),   component = c(\"location\", \"all\", \"conditional\", \"smooth_terms\", \"sigma\",     \"distributional\", \"auxiliary\"),   parameters = NULL,   verbose = TRUE,   ... )  # S3 method for brmsfit hdi(   x,   ci = 0.95,   effects = c(\"fixed\", \"random\", \"all\"),   component = c(\"conditional\", \"zi\", \"zero_inflated\", \"all\"),   parameters = NULL,   verbose = TRUE,   ... )"},{"path":"https://easystats.github.io/bayestestR/reference/hdi.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Highest Density Interval (HDI) — hdi","text":"x Vector representing posterior distribution, data frame vectors. Can also Bayesian model. bayestestR supports wide range models (see, example, methods(\"hdi\")) documented 'Usage' section, methods classes mostly resemble arguments .numeric .data.framemethods. ... Currently used. ci Value vector probability (credible) interval - CI (0 1) estimated. Default .95 (95%). verbose Toggle warnings. effects results fixed effects, random effects returned? applies mixed models. May abbreviated. component results parameters, parameters conditional model zero-inflated part model returned? May abbreviated. applies brms-models. parameters Regular expression pattern describes parameters returned. Meta-parameters (like lp__ prior_) filtered default, parameters typically appear summary() returned. Use parameters select specific parameters output.","code":""},{"path":"https://easystats.github.io/bayestestR/reference/hdi.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Highest Density Interval (HDI) — hdi","text":"data frame following columns: Parameter model parameter(s), x model-object. x vector, column missing. CI probability credible interval. CI_low, CI_high lower upper credible interval limits parameters.","code":""},{"path":"https://easystats.github.io/bayestestR/reference/hdi.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Highest Density Interval (HDI) — hdi","text":"Unlike equal-tailed intervals (see eti()) typically exclude 2.5% tail distribution always include median, HDI equal-tailed therefore always includes mode(s) posterior distributions. can useful better represent credibility mass distribution, HDI also limitations. See spi() details.  95% 89% Credible Intervals (CI) two reasonable ranges characterize uncertainty related estimation (see discussion differences two values).  89% intervals (ci = 0.89) deemed stable , instance, 95% intervals (Kruschke, 2014). effective sample size least 10.000 recommended one wants estimate 95% intervals high precision (Kruschke, 2014, p. 183ff). Unfortunately, default number posterior samples Bayes packages (e.g., rstanarm brms) 4.000 (thus, might want increase fitting model). Moreover, 89 indicates arbitrariness interval limits - remarkable property highest prime number exceed already unstable 95% threshold (McElreath, 2015).  However, 95% advantages . instance, shares (case normal posterior distribution) intuitive relationship standard deviation conveys accurate image (artificial) bounds distribution. Also, wider, makes analyses conservative (.e., probability covering 0 larger 95% CI lower ranges 89%), good thing context reproducibility crisis.  95% equal-tailed interval (ETI) 2.5% distribution either side limits. indicates 2.5th percentile 97.5h percentile. symmetric distributions, two methods computing credible intervals, ETI HDI, return similar results.  case skewed distributions. Indeed, possible parameter values ETI lower credibility (less probable) parameter values outside ETI. property seems undesirable summary credible values distribution.  hand, ETI range change transformations applied distribution (instance, log odds scale probabilities): lower higher bounds transformed distribution correspond transformed lower higher bounds original distribution. contrary, applying transformations distribution change resulting HDI.","code":""},{"path":"https://easystats.github.io/bayestestR/reference/hdi.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Highest Density Interval (HDI) — hdi","text":"also plot()-method implemented see-package.","code":""},{"path":"https://easystats.github.io/bayestestR/reference/hdi.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Highest Density Interval (HDI) — hdi","text":"Kruschke, J. (2014). Bayesian data analysis: tutorial R, JAGS, Stan. Academic Press. McElreath, R. (2015). Statistical rethinking: Bayesian course examples R Stan. Chapman Hall/CRC.","code":""},{"path":[]},{"path":"https://easystats.github.io/bayestestR/reference/hdi.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Highest Density Interval (HDI) — hdi","text":"Credits go ggdistribute HDInterval.","code":""},{"path":"https://easystats.github.io/bayestestR/reference/hdi.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Highest Density Interval (HDI) — hdi","text":"","code":"library(bayestestR)  posterior <- rnorm(1000) hdi(posterior, ci = 0.89) #>           [,1]     [,2] #> [1,] -2.096071 1.796661 hdi(posterior, ci = c(.80, .90, .95)) #>           [,1]     [,2] #> [1,] -2.096071 1.796661  df <- data.frame(replicate(4, rnorm(100))) hdi(df) #> Error in UseMethod(\"hdi_\"): no applicable method for 'hdi_' applied to an object of class \"data.frame\" hdi(df, ci = c(.80, .90, .95)) #> Error in UseMethod(\"hdi_\"): no applicable method for 'hdi_' applied to an object of class \"data.frame\" # \\dontrun{ library(rstanarm) model <- stan_glm(mpg ~ wt + gear, data = mtcars, chains = 2, iter = 200, refresh = 0) #> Warning: Bulk Effective Samples Size (ESS) is too low, indicating posterior means and medians may be unreliable. #> Running the chains for more iterations may help. See #> https://mc-stan.org/misc/warnings.html#bulk-ess #> Warning: Tail Effective Samples Size (ESS) is too low, indicating posterior variances and tail quantiles may be unreliable. #> Running the chains for more iterations may help. See #> https://mc-stan.org/misc/warnings.html#tail-ess hdi(model) #> Error in UseMethod(\"hdi_\"): no applicable method for 'hdi_' applied to an object of class \"c('stanreg', 'glm', 'lm')\" hdi(model, ci = c(.80, .90, .95)) #> Error in UseMethod(\"hdi_\"): no applicable method for 'hdi_' applied to an object of class \"c('stanreg', 'glm', 'lm')\"  library(emmeans) hdi(emtrends(model, ~1, \"wt\")) #> Warning: Model has 0 prior weights, but we recovered 32 rows of data. #> So prior weights were ignored. #> Error in UseMethod(\"hdi_\"): no applicable method for 'hdi_' applied to an object of class \"emmGrid\"  library(brms) model <- brms::brm(mpg ~ wt + cyl, data = mtcars) #> Compiling Stan program... #> Start sampling #>  #> SAMPLING FOR MODEL '2d19b3a372313df641edf05db5e9f303' NOW (CHAIN 1). #> Chain 1:  #> Chain 1: Gradient evaluation took 9e-06 seconds #> Chain 1: 1000 transitions using 10 leapfrog steps per transition would take 0.09 seconds. #> Chain 1: Adjust your expectations accordingly! #> Chain 1:  #> Chain 1:  #> Chain 1: Iteration:    1 / 2000 [  0%]  (Warmup) #> Chain 1: Iteration:  200 / 2000 [ 10%]  (Warmup) #> Chain 1: Iteration:  400 / 2000 [ 20%]  (Warmup) #> Chain 1: Iteration:  600 / 2000 [ 30%]  (Warmup) #> Chain 1: Iteration:  800 / 2000 [ 40%]  (Warmup) #> Chain 1: Iteration: 1000 / 2000 [ 50%]  (Warmup) #> Chain 1: Iteration: 1001 / 2000 [ 50%]  (Sampling) #> Chain 1: Iteration: 1200 / 2000 [ 60%]  (Sampling) #> Chain 1: Iteration: 1400 / 2000 [ 70%]  (Sampling) #> Chain 1: Iteration: 1600 / 2000 [ 80%]  (Sampling) #> Chain 1: Iteration: 1800 / 2000 [ 90%]  (Sampling) #> Chain 1: Iteration: 2000 / 2000 [100%]  (Sampling) #> Chain 1:  #> Chain 1:  Elapsed Time: 0.029474 seconds (Warm-up) #> Chain 1:                0.023562 seconds (Sampling) #> Chain 1:                0.053036 seconds (Total) #> Chain 1:  #>  #> SAMPLING FOR MODEL '2d19b3a372313df641edf05db5e9f303' NOW (CHAIN 2). #> Chain 2:  #> Chain 2: Gradient evaluation took 7e-06 seconds #> Chain 2: 1000 transitions using 10 leapfrog steps per transition would take 0.07 seconds. #> Chain 2: Adjust your expectations accordingly! #> Chain 2:  #> Chain 2:  #> Chain 2: Iteration:    1 / 2000 [  0%]  (Warmup) #> Chain 2: Iteration:  200 / 2000 [ 10%]  (Warmup) #> Chain 2: Iteration:  400 / 2000 [ 20%]  (Warmup) #> Chain 2: Iteration:  600 / 2000 [ 30%]  (Warmup) #> Chain 2: Iteration:  800 / 2000 [ 40%]  (Warmup) #> Chain 2: Iteration: 1000 / 2000 [ 50%]  (Warmup) #> Chain 2: Iteration: 1001 / 2000 [ 50%]  (Sampling) #> Chain 2: Iteration: 1200 / 2000 [ 60%]  (Sampling) #> Chain 2: Iteration: 1400 / 2000 [ 70%]  (Sampling) #> Chain 2: Iteration: 1600 / 2000 [ 80%]  (Sampling) #> Chain 2: Iteration: 1800 / 2000 [ 90%]  (Sampling) #> Chain 2: Iteration: 2000 / 2000 [100%]  (Sampling) #> Chain 2:  #> Chain 2:  Elapsed Time: 0.027768 seconds (Warm-up) #> Chain 2:                0.027694 seconds (Sampling) #> Chain 2:                0.055462 seconds (Total) #> Chain 2:  #>  #> SAMPLING FOR MODEL '2d19b3a372313df641edf05db5e9f303' NOW (CHAIN 3). #> Chain 3:  #> Chain 3: Gradient evaluation took 7e-06 seconds #> Chain 3: 1000 transitions using 10 leapfrog steps per transition would take 0.07 seconds. #> Chain 3: Adjust your expectations accordingly! #> Chain 3:  #> Chain 3:  #> Chain 3: Iteration:    1 / 2000 [  0%]  (Warmup) #> Chain 3: Iteration:  200 / 2000 [ 10%]  (Warmup) #> Chain 3: Iteration:  400 / 2000 [ 20%]  (Warmup) #> Chain 3: Iteration:  600 / 2000 [ 30%]  (Warmup) #> Chain 3: Iteration:  800 / 2000 [ 40%]  (Warmup) #> Chain 3: Iteration: 1000 / 2000 [ 50%]  (Warmup) #> Chain 3: Iteration: 1001 / 2000 [ 50%]  (Sampling) #> Chain 3: Iteration: 1200 / 2000 [ 60%]  (Sampling) #> Chain 3: Iteration: 1400 / 2000 [ 70%]  (Sampling) #> Chain 3: Iteration: 1600 / 2000 [ 80%]  (Sampling) #> Chain 3: Iteration: 1800 / 2000 [ 90%]  (Sampling) #> Chain 3: Iteration: 2000 / 2000 [100%]  (Sampling) #> Chain 3:  #> Chain 3:  Elapsed Time: 0.027376 seconds (Warm-up) #> Chain 3:                0.026262 seconds (Sampling) #> Chain 3:                0.053638 seconds (Total) #> Chain 3:  #>  #> SAMPLING FOR MODEL '2d19b3a372313df641edf05db5e9f303' NOW (CHAIN 4). #> Chain 4:  #> Chain 4: Gradient evaluation took 6e-06 seconds #> Chain 4: 1000 transitions using 10 leapfrog steps per transition would take 0.06 seconds. #> Chain 4: Adjust your expectations accordingly! #> Chain 4:  #> Chain 4:  #> Chain 4: Iteration:    1 / 2000 [  0%]  (Warmup) #> Chain 4: Iteration:  200 / 2000 [ 10%]  (Warmup) #> Chain 4: Iteration:  400 / 2000 [ 20%]  (Warmup) #> Chain 4: Iteration:  600 / 2000 [ 30%]  (Warmup) #> Chain 4: Iteration:  800 / 2000 [ 40%]  (Warmup) #> Chain 4: Iteration: 1000 / 2000 [ 50%]  (Warmup) #> Chain 4: Iteration: 1001 / 2000 [ 50%]  (Sampling) #> Chain 4: Iteration: 1200 / 2000 [ 60%]  (Sampling) #> Chain 4: Iteration: 1400 / 2000 [ 70%]  (Sampling) #> Chain 4: Iteration: 1600 / 2000 [ 80%]  (Sampling) #> Chain 4: Iteration: 1800 / 2000 [ 90%]  (Sampling) #> Chain 4: Iteration: 2000 / 2000 [100%]  (Sampling) #> Chain 4:  #> Chain 4:  Elapsed Time: 0.029904 seconds (Warm-up) #> Chain 4:                0.028904 seconds (Sampling) #> Chain 4:                0.058808 seconds (Total) #> Chain 4:  hdi(model) #> Error in UseMethod(\"hdi_\"): no applicable method for 'hdi_' applied to an object of class \"brmsfit\" hdi(model, ci = c(.80, .90, .95)) #> Error in UseMethod(\"hdi_\"): no applicable method for 'hdi_' applied to an object of class \"brmsfit\"  library(BayesFactor) bf <- ttestBF(x = rnorm(100, 1, 1)) hdi(bf) #> Error in UseMethod(\"hdi_\"): no applicable method for 'hdi_' applied to an object of class \"c('BFBayesFactor', 'BFOrNULL')\" hdi(bf, ci = c(.80, .90, .95)) #> Error in UseMethod(\"hdi_\"): no applicable method for 'hdi_' applied to an object of class \"c('BFBayesFactor', 'BFOrNULL')\" # }"},{"path":"https://easystats.github.io/bayestestR/reference/map_estimate.html","id":null,"dir":"Reference","previous_headings":"","what":"Maximum A Posteriori probability estimate (MAP) — map_estimate","title":"Maximum A Posteriori probability estimate (MAP) — map_estimate","text":"Find Highest Maximum Posteriori probability estimate (MAP) posterior, .e., value associated highest probability density (\"peak\" posterior distribution). words, estimation mode continuous parameters. Note function relies estimate_density, default uses different smoothing bandwidth (\"SJ\") compared legacy default implemented base R density function (\"nrd0\").","code":""},{"path":"https://easystats.github.io/bayestestR/reference/map_estimate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Maximum A Posteriori probability estimate (MAP) — map_estimate","text":"","code":"map_estimate(x, precision = 2^10, method = \"kernel\", ...)  # S3 method for numeric map_estimate(x, precision = 2^10, method = \"kernel\", ...)  # S3 method for stanreg map_estimate(   x,   precision = 2^10,   method = \"kernel\",   effects = c(\"fixed\", \"random\", \"all\"),   component = c(\"location\", \"all\", \"conditional\", \"smooth_terms\", \"sigma\",     \"distributional\", \"auxiliary\"),   parameters = NULL,   ... )  # S3 method for brmsfit map_estimate(   x,   precision = 2^10,   method = \"kernel\",   effects = c(\"fixed\", \"random\", \"all\"),   component = c(\"conditional\", \"zi\", \"zero_inflated\", \"all\"),   parameters = NULL,   ... )  # S3 method for data.frame map_estimate(x, precision = 2^10, method = \"kernel\", ...)"},{"path":"https://easystats.github.io/bayestestR/reference/map_estimate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Maximum A Posteriori probability estimate (MAP) — map_estimate","text":"x Vector representing posterior distribution, data frame vectors. Can also Bayesian model. bayestestR supports wide range models (see, example, methods(\"hdi\")) documented 'Usage' section, methods classes mostly resemble arguments .numeric .data.framemethods. precision Number points density data. See n parameter density. method Density estimation method. Can \"kernel\" (default), \"logspline\" \"KernSmooth\". ... Currently used. effects results fixed effects, random effects returned? applies mixed models. May abbreviated. component results parameters, parameters conditional model zero-inflated part model returned? May abbreviated. applies brms-models. parameters Regular expression pattern describes parameters returned. Meta-parameters (like lp__ prior_) filtered default, parameters typically appear summary() returned. Use parameters select specific parameters output.","code":""},{"path":"https://easystats.github.io/bayestestR/reference/map_estimate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Maximum A Posteriori probability estimate (MAP) — map_estimate","text":"numeric value x vector. x model-object, returns data frame following columns: Parameter model parameter(s), x model-object. x vector, column missing. MAP_Estimate MAP estimate posterior model parameter.","code":""},{"path":"https://easystats.github.io/bayestestR/reference/map_estimate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Maximum A Posteriori probability estimate (MAP) — map_estimate","text":"","code":"# \\dontrun{ library(bayestestR)  posterior <- rnorm(10000) map_estimate(posterior) #> MAP Estimate: 0.03  plot(density(posterior)) abline(v = map_estimate(posterior), col = \"red\")   library(rstanarm) model <- rstanarm::stan_glm(mpg ~ wt + cyl, data = mtcars) #>  #> SAMPLING FOR MODEL 'continuous' NOW (CHAIN 1). #> Chain 1:  #> Chain 1: Gradient evaluation took 1.8e-05 seconds #> Chain 1: 1000 transitions using 10 leapfrog steps per transition would take 0.18 seconds. #> Chain 1: Adjust your expectations accordingly! #> Chain 1:  #> Chain 1:  #> Chain 1: Iteration:    1 / 2000 [  0%]  (Warmup) #> Chain 1: Iteration:  200 / 2000 [ 10%]  (Warmup) #> Chain 1: Iteration:  400 / 2000 [ 20%]  (Warmup) #> Chain 1: Iteration:  600 / 2000 [ 30%]  (Warmup) #> Chain 1: Iteration:  800 / 2000 [ 40%]  (Warmup) #> Chain 1: Iteration: 1000 / 2000 [ 50%]  (Warmup) #> Chain 1: Iteration: 1001 / 2000 [ 50%]  (Sampling) #> Chain 1: Iteration: 1200 / 2000 [ 60%]  (Sampling) #> Chain 1: Iteration: 1400 / 2000 [ 70%]  (Sampling) #> Chain 1: Iteration: 1600 / 2000 [ 80%]  (Sampling) #> Chain 1: Iteration: 1800 / 2000 [ 90%]  (Sampling) #> Chain 1: Iteration: 2000 / 2000 [100%]  (Sampling) #> Chain 1:  #> Chain 1:  Elapsed Time: 0.056 seconds (Warm-up) #> Chain 1:                0.059 seconds (Sampling) #> Chain 1:                0.115 seconds (Total) #> Chain 1:  #>  #> SAMPLING FOR MODEL 'continuous' NOW (CHAIN 2). #> Chain 2:  #> Chain 2: Gradient evaluation took 1.2e-05 seconds #> Chain 2: 1000 transitions using 10 leapfrog steps per transition would take 0.12 seconds. #> Chain 2: Adjust your expectations accordingly! #> Chain 2:  #> Chain 2:  #> Chain 2: Iteration:    1 / 2000 [  0%]  (Warmup) #> Chain 2: Iteration:  200 / 2000 [ 10%]  (Warmup) #> Chain 2: Iteration:  400 / 2000 [ 20%]  (Warmup) #> Chain 2: Iteration:  600 / 2000 [ 30%]  (Warmup) #> Chain 2: Iteration:  800 / 2000 [ 40%]  (Warmup) #> Chain 2: Iteration: 1000 / 2000 [ 50%]  (Warmup) #> Chain 2: Iteration: 1001 / 2000 [ 50%]  (Sampling) #> Chain 2: Iteration: 1200 / 2000 [ 60%]  (Sampling) #> Chain 2: Iteration: 1400 / 2000 [ 70%]  (Sampling) #> Chain 2: Iteration: 1600 / 2000 [ 80%]  (Sampling) #> Chain 2: Iteration: 1800 / 2000 [ 90%]  (Sampling) #> Chain 2: Iteration: 2000 / 2000 [100%]  (Sampling) #> Chain 2:  #> Chain 2:  Elapsed Time: 0.056 seconds (Warm-up) #> Chain 2:                0.059 seconds (Sampling) #> Chain 2:                0.115 seconds (Total) #> Chain 2:  #>  #> SAMPLING FOR MODEL 'continuous' NOW (CHAIN 3). #> Chain 3:  #> Chain 3: Gradient evaluation took 1.2e-05 seconds #> Chain 3: 1000 transitions using 10 leapfrog steps per transition would take 0.12 seconds. #> Chain 3: Adjust your expectations accordingly! #> Chain 3:  #> Chain 3:  #> Chain 3: Iteration:    1 / 2000 [  0%]  (Warmup) #> Chain 3: Iteration:  200 / 2000 [ 10%]  (Warmup) #> Chain 3: Iteration:  400 / 2000 [ 20%]  (Warmup) #> Chain 3: Iteration:  600 / 2000 [ 30%]  (Warmup) #> Chain 3: Iteration:  800 / 2000 [ 40%]  (Warmup) #> Chain 3: Iteration: 1000 / 2000 [ 50%]  (Warmup) #> Chain 3: Iteration: 1001 / 2000 [ 50%]  (Sampling) #> Chain 3: Iteration: 1200 / 2000 [ 60%]  (Sampling) #> Chain 3: Iteration: 1400 / 2000 [ 70%]  (Sampling) #> Chain 3: Iteration: 1600 / 2000 [ 80%]  (Sampling) #> Chain 3: Iteration: 1800 / 2000 [ 90%]  (Sampling) #> Chain 3: Iteration: 2000 / 2000 [100%]  (Sampling) #> Chain 3:  #> Chain 3:  Elapsed Time: 0.069 seconds (Warm-up) #> Chain 3:                0.067 seconds (Sampling) #> Chain 3:                0.136 seconds (Total) #> Chain 3:  #>  #> SAMPLING FOR MODEL 'continuous' NOW (CHAIN 4). #> Chain 4:  #> Chain 4: Gradient evaluation took 1.1e-05 seconds #> Chain 4: 1000 transitions using 10 leapfrog steps per transition would take 0.11 seconds. #> Chain 4: Adjust your expectations accordingly! #> Chain 4:  #> Chain 4:  #> Chain 4: Iteration:    1 / 2000 [  0%]  (Warmup) #> Chain 4: Iteration:  200 / 2000 [ 10%]  (Warmup) #> Chain 4: Iteration:  400 / 2000 [ 20%]  (Warmup) #> Chain 4: Iteration:  600 / 2000 [ 30%]  (Warmup) #> Chain 4: Iteration:  800 / 2000 [ 40%]  (Warmup) #> Chain 4: Iteration: 1000 / 2000 [ 50%]  (Warmup) #> Chain 4: Iteration: 1001 / 2000 [ 50%]  (Sampling) #> Chain 4: Iteration: 1200 / 2000 [ 60%]  (Sampling) #> Chain 4: Iteration: 1400 / 2000 [ 70%]  (Sampling) #> Chain 4: Iteration: 1600 / 2000 [ 80%]  (Sampling) #> Chain 4: Iteration: 1800 / 2000 [ 90%]  (Sampling) #> Chain 4: Iteration: 2000 / 2000 [100%]  (Sampling) #> Chain 4:  #> Chain 4:  Elapsed Time: 0.058 seconds (Warm-up) #> Chain 4:                0.058 seconds (Sampling) #> Chain 4:                0.116 seconds (Total) #> Chain 4:  map_estimate(model) #> MAP Estimate #>  #> Parameter   | MAP_Estimate #> -------------------------- #> (Intercept) |        39.67 #> wt          |        -3.11 #> cyl         |        -1.52  library(brms) model <- brms::brm(mpg ~ wt + cyl, data = mtcars) #> Compiling Stan program... #> Start sampling #>  #> SAMPLING FOR MODEL '2d19b3a372313df641edf05db5e9f303' NOW (CHAIN 1). #> Chain 1:  #> Chain 1: Gradient evaluation took 1e-05 seconds #> Chain 1: 1000 transitions using 10 leapfrog steps per transition would take 0.1 seconds. #> Chain 1: Adjust your expectations accordingly! #> Chain 1:  #> Chain 1:  #> Chain 1: Iteration:    1 / 2000 [  0%]  (Warmup) #> Chain 1: Iteration:  200 / 2000 [ 10%]  (Warmup) #> Chain 1: Iteration:  400 / 2000 [ 20%]  (Warmup) #> Chain 1: Iteration:  600 / 2000 [ 30%]  (Warmup) #> Chain 1: Iteration:  800 / 2000 [ 40%]  (Warmup) #> Chain 1: Iteration: 1000 / 2000 [ 50%]  (Warmup) #> Chain 1: Iteration: 1001 / 2000 [ 50%]  (Sampling) #> Chain 1: Iteration: 1200 / 2000 [ 60%]  (Sampling) #> Chain 1: Iteration: 1400 / 2000 [ 70%]  (Sampling) #> Chain 1: Iteration: 1600 / 2000 [ 80%]  (Sampling) #> Chain 1: Iteration: 1800 / 2000 [ 90%]  (Sampling) #> Chain 1: Iteration: 2000 / 2000 [100%]  (Sampling) #> Chain 1:  #> Chain 1:  Elapsed Time: 0.02868 seconds (Warm-up) #> Chain 1:                0.027644 seconds (Sampling) #> Chain 1:                0.056324 seconds (Total) #> Chain 1:  #>  #> SAMPLING FOR MODEL '2d19b3a372313df641edf05db5e9f303' NOW (CHAIN 2). #> Chain 2:  #> Chain 2: Gradient evaluation took 7e-06 seconds #> Chain 2: 1000 transitions using 10 leapfrog steps per transition would take 0.07 seconds. #> Chain 2: Adjust your expectations accordingly! #> Chain 2:  #> Chain 2:  #> Chain 2: Iteration:    1 / 2000 [  0%]  (Warmup) #> Chain 2: Iteration:  200 / 2000 [ 10%]  (Warmup) #> Chain 2: Iteration:  400 / 2000 [ 20%]  (Warmup) #> Chain 2: Iteration:  600 / 2000 [ 30%]  (Warmup) #> Chain 2: Iteration:  800 / 2000 [ 40%]  (Warmup) #> Chain 2: Iteration: 1000 / 2000 [ 50%]  (Warmup) #> Chain 2: Iteration: 1001 / 2000 [ 50%]  (Sampling) #> Chain 2: Iteration: 1200 / 2000 [ 60%]  (Sampling) #> Chain 2: Iteration: 1400 / 2000 [ 70%]  (Sampling) #> Chain 2: Iteration: 1600 / 2000 [ 80%]  (Sampling) #> Chain 2: Iteration: 1800 / 2000 [ 90%]  (Sampling) #> Chain 2: Iteration: 2000 / 2000 [100%]  (Sampling) #> Chain 2:  #> Chain 2:  Elapsed Time: 0.029018 seconds (Warm-up) #> Chain 2:                0.030735 seconds (Sampling) #> Chain 2:                0.059753 seconds (Total) #> Chain 2:  #>  #> SAMPLING FOR MODEL '2d19b3a372313df641edf05db5e9f303' NOW (CHAIN 3). #> Chain 3:  #> Chain 3: Gradient evaluation took 8e-06 seconds #> Chain 3: 1000 transitions using 10 leapfrog steps per transition would take 0.08 seconds. #> Chain 3: Adjust your expectations accordingly! #> Chain 3:  #> Chain 3:  #> Chain 3: Iteration:    1 / 2000 [  0%]  (Warmup) #> Chain 3: Iteration:  200 / 2000 [ 10%]  (Warmup) #> Chain 3: Iteration:  400 / 2000 [ 20%]  (Warmup) #> Chain 3: Iteration:  600 / 2000 [ 30%]  (Warmup) #> Chain 3: Iteration:  800 / 2000 [ 40%]  (Warmup) #> Chain 3: Iteration: 1000 / 2000 [ 50%]  (Warmup) #> Chain 3: Iteration: 1001 / 2000 [ 50%]  (Sampling) #> Chain 3: Iteration: 1200 / 2000 [ 60%]  (Sampling) #> Chain 3: Iteration: 1400 / 2000 [ 70%]  (Sampling) #> Chain 3: Iteration: 1600 / 2000 [ 80%]  (Sampling) #> Chain 3: Iteration: 1800 / 2000 [ 90%]  (Sampling) #> Chain 3: Iteration: 2000 / 2000 [100%]  (Sampling) #> Chain 3:  #> Chain 3:  Elapsed Time: 0.02896 seconds (Warm-up) #> Chain 3:                0.025314 seconds (Sampling) #> Chain 3:                0.054274 seconds (Total) #> Chain 3:  #>  #> SAMPLING FOR MODEL '2d19b3a372313df641edf05db5e9f303' NOW (CHAIN 4). #> Chain 4:  #> Chain 4: Gradient evaluation took 7e-06 seconds #> Chain 4: 1000 transitions using 10 leapfrog steps per transition would take 0.07 seconds. #> Chain 4: Adjust your expectations accordingly! #> Chain 4:  #> Chain 4:  #> Chain 4: Iteration:    1 / 2000 [  0%]  (Warmup) #> Chain 4: Iteration:  200 / 2000 [ 10%]  (Warmup) #> Chain 4: Iteration:  400 / 2000 [ 20%]  (Warmup) #> Chain 4: Iteration:  600 / 2000 [ 30%]  (Warmup) #> Chain 4: Iteration:  800 / 2000 [ 40%]  (Warmup) #> Chain 4: Iteration: 1000 / 2000 [ 50%]  (Warmup) #> Chain 4: Iteration: 1001 / 2000 [ 50%]  (Sampling) #> Chain 4: Iteration: 1200 / 2000 [ 60%]  (Sampling) #> Chain 4: Iteration: 1400 / 2000 [ 70%]  (Sampling) #> Chain 4: Iteration: 1600 / 2000 [ 80%]  (Sampling) #> Chain 4: Iteration: 1800 / 2000 [ 90%]  (Sampling) #> Chain 4: Iteration: 2000 / 2000 [100%]  (Sampling) #> Chain 4:  #> Chain 4:  Elapsed Time: 0.029114 seconds (Warm-up) #> Chain 4:                0.025265 seconds (Sampling) #> Chain 4:                0.054379 seconds (Total) #> Chain 4:  map_estimate(model) #> MAP Estimate #>  #> Parameter   | MAP_Estimate #> -------------------------- #> b_Intercept |        39.82 #> b_wt        |        -3.20 #> b_cyl       |        -1.59 # }"},{"path":"https://easystats.github.io/bayestestR/reference/mcse.html","id":null,"dir":"Reference","previous_headings":"","what":"Monte-Carlo Standard Error (MCSE) — mcse","title":"Monte-Carlo Standard Error (MCSE) — mcse","text":"function returns Monte Carlo Standard Error (MCSE).","code":""},{"path":"https://easystats.github.io/bayestestR/reference/mcse.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Monte-Carlo Standard Error (MCSE) — mcse","text":"","code":"mcse(model, ...)  # S3 method for stanreg mcse(   model,   effects = c(\"fixed\", \"random\", \"all\"),   component = c(\"location\", \"all\", \"conditional\", \"smooth_terms\", \"sigma\",     \"distributional\", \"auxiliary\"),   parameters = NULL,   ... )"},{"path":"https://easystats.github.io/bayestestR/reference/mcse.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Monte-Carlo Standard Error (MCSE) — mcse","text":"model stanreg, stanfit, brmsfit, blavaan, MCMCglmm object. ... Currently used. effects results fixed effects, random effects returned? applies mixed models. May abbreviated. component results parameters, parameters conditional model zero-inflated part model returned? May abbreviated. applies brms-models. parameters Regular expression pattern describes parameters returned. Meta-parameters (like lp__ prior_) filtered default, parameters typically appear summary() returned. Use parameters select specific parameters output.","code":""},{"path":"https://easystats.github.io/bayestestR/reference/mcse.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Monte-Carlo Standard Error (MCSE) — mcse","text":"Monte Carlo Standard Error (MCSE) another measure accuracy chains. defined standard deviation chains divided effective sample size (formula mcse() Kruschke 2015, p. 187). MCSE “provides quantitative suggestion big estimation noise ”.","code":""},{"path":"https://easystats.github.io/bayestestR/reference/mcse.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Monte-Carlo Standard Error (MCSE) — mcse","text":"Kruschke, J. (2014). Bayesian data analysis: tutorial R, JAGS, Stan. Academic Press.","code":""},{"path":"https://easystats.github.io/bayestestR/reference/mcse.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Monte-Carlo Standard Error (MCSE) — mcse","text":"","code":"# \\dontrun{ library(bayestestR) library(rstanarm)  model <- stan_glm(mpg ~ wt + am, data = mtcars, chains = 1, refresh = 0) mcse(model) #>     Parameter       MCSE #> 1 (Intercept) 0.14420893 #> 2          wt 0.03564543 #> 3          am 0.06916278 # }"},{"path":"https://easystats.github.io/bayestestR/reference/mediation.html","id":null,"dir":"Reference","previous_headings":"","what":"Summary of Bayesian multivariate-response mediation-models — mediation","title":"Summary of Bayesian multivariate-response mediation-models — mediation","text":"mediation() short summary multivariate-response mediation-models, .e. function computes average direct average causal mediation effects multivariate response models.","code":""},{"path":"https://easystats.github.io/bayestestR/reference/mediation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summary of Bayesian multivariate-response mediation-models — mediation","text":"","code":"mediation(model, ...)  # S3 method for brmsfit mediation(   model,   treatment,   mediator,   response = NULL,   centrality = \"median\",   ci = 0.95,   method = \"ETI\",   ... )  # S3 method for stanmvreg mediation(   model,   treatment,   mediator,   response = NULL,   centrality = \"median\",   ci = 0.95,   method = \"ETI\",   ... )"},{"path":"https://easystats.github.io/bayestestR/reference/mediation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summary of Bayesian multivariate-response mediation-models — mediation","text":"model brmsfit stanmvreg object. ... used. treatment Character, name treatment variable (direct effect) (multivariate response) mediator-model. missing, mediation() tries find treatment variable automatically, however, may fail. mediator Character, name mediator variable (multivariate response) mediator-model. missing, mediation() tries find treatment variable automatically, however, may fail. response named character vector, indicating names response variables used mediation analysis. Usually can NULL, case variables retrieved automatically. NULL, names match names model formulas, names(insight::find_response(model, combine = TRUE)). can useful , instance, mediator variable used predictor different name mediator variable used response. might occur mediator transformed one model, used \"\" response variable model. Example: mediator m used response variable, centered version m_center used mediator variable. second response variable (treatment model, mediator additional predictor), y, transformed. use response like : mediation(model, response = c(m = \"m_center\", y = \"y\")). centrality point-estimates (centrality indices) compute.  Character (vector) list one options: \"median\", \"mean\", \"MAP\" \"\". ci Value vector probability CI (0 1) estimated. Default .95 (95%). method Can 'ETI' (default), 'HDI', 'BCI', 'SPI' 'SI'.","code":""},{"path":"https://easystats.github.io/bayestestR/reference/mediation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summary of Bayesian multivariate-response mediation-models — mediation","text":"data frame direct, indirect, mediator total effect multivariate-response mediation-model, well proportion mediated. effect sizes median values posterior samples (use centrality centrality indices).","code":""},{"path":"https://easystats.github.io/bayestestR/reference/mediation.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Summary of Bayesian multivariate-response mediation-models — mediation","text":"mediation() returns data frame information direct effect (mean value posterior samples treatment outcome model), mediator effect (mean value posterior samples mediator outcome model), indirect effect (mean value multiplication posterior samples mediator outcome model posterior samples treatment mediation model) total effect (mean value sums posterior samples used direct indirect effect). proportion mediated indirect effect divided total effect.  values, 89% credible intervals calculated default. Use ci calculate different interval.  arguments treatment mediator necessarily need specified. missing, mediation() tries find treatment mediator variable automatically. work, specify variables.  direct effect also called average direct effect (ADE), indirect effect also called average causal mediation effects (ACME). See also Tingley et al. 2014 Imai et al. 2010.","code":""},{"path":"https://easystats.github.io/bayestestR/reference/mediation.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Summary of Bayesian multivariate-response mediation-models — mediation","text":".data.frame() method returns posterior samples effects, can used processing different bayestestR package.","code":""},{"path":"https://easystats.github.io/bayestestR/reference/mediation.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Summary of Bayesian multivariate-response mediation-models — mediation","text":"Imai, K., Keele, L. Tingley, D. (2010) General Approach Causal Mediation Analysis, Psychological Methods, Vol. 15, . 4 (December), pp. 309-334. Tingley, D., Yamamoto, T., Hirose, K., Imai, K. Keele, L. (2014). mediation: R package Causal Mediation Analysis, Journal Statistical Software, Vol. 59, . 5, pp. 1-38.","code":""},{"path":[]},{"path":"https://easystats.github.io/bayestestR/reference/mediation.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summary of Bayesian multivariate-response mediation-models — mediation","text":"","code":"# \\dontrun{ library(mediation) #> Loading required package: MASS #>  #> Attaching package: ‘MASS’ #> The following object is masked from ‘package:patchwork’: #>  #>     area #> Loading required package: mvtnorm #> Loading required package: sandwich #> mediation: Causal Mediation Analysis #> Version: 4.5.0 library(brms) library(rstanarm)  # load sample data data(jobs) set.seed(123)  # linear models, for mediation analysis b1 <- lm(job_seek ~ treat + econ_hard + sex + age, data = jobs) b2 <- lm(depress2 ~ treat + job_seek + econ_hard + sex + age, data = jobs) # mediation analysis, for comparison with Stan models m1 <- mediate(b1, b2, sims = 1000, treat = \"treat\", mediator = \"job_seek\")  # Fit Bayesian mediation model in brms f1 <- bf(job_seek ~ treat + econ_hard + sex + age) f2 <- bf(depress2 ~ treat + job_seek + econ_hard + sex + age) m2 <- brm(f1 + f2 + set_rescor(FALSE), data = jobs, cores = 4, refresh = 0) #> Compiling Stan program... #> Start sampling  # Fit Bayesian mediation model in rstanarm m3 <- stan_mvmer(   list(     job_seek ~ treat + econ_hard + sex + age + (1 | occp),     depress2 ~ treat + job_seek + econ_hard + sex + age + (1 | occp)   ),   data = jobs,   cores = 4,   refresh = 0 ) #> Fitting a multivariate glmer model. #>  #> Please note the warmup may be much slower than later iterations! #> Warning: There were 3 divergent transitions after warmup. See #> https://mc-stan.org/misc/warnings.html#divergent-transitions-after-warmup #> to find out why this is a problem and how to eliminate them. #> Warning: Examine the pairs() plot to diagnose sampling problems  summary(m1) #>  #> Causal Mediation Analysis  #>  #> Quasi-Bayesian Confidence Intervals #>  #>                Estimate 95% CI Lower 95% CI Upper p-value #> ACME            -0.0157      -0.0387         0.01    0.19 #> ADE             -0.0438      -0.1315         0.04    0.35 #> Total Effect    -0.0595      -0.1530         0.02    0.21 #> Prop. Mediated   0.2137      -2.0277         2.70    0.32 #>  #> Sample Size Used: 899  #>  #>  #> Simulations: 1000  #>  mediation(m2, centrality = \"mean\", ci = 0.95) #> # Causal Mediation Analysis for Stan Model #>  #>   Treatment: treat #>   Mediator : job_seek #>   Response : depress2 #>  #> Effect                 | Estimate |          95% ETI #> ---------------------------------------------------- #> Direct Effect (ADE)    |   -0.040 | [-0.124,  0.045] #> Indirect Effect (ACME) |   -0.015 | [-0.041,  0.009] #> Mediator Effect        |   -0.240 | [-0.296, -0.185] #> Total Effect           |   -0.055 | [-0.143,  0.032] #>  #> Proportion mediated: 27.96% [-197.34%, 253.26%] #>  mediation(m3, centrality = \"mean\", ci = 0.95) #> # Causal Mediation Analysis for Stan Model #>  #>   Treatment: treat #>   Mediator : job_seek #>   Response : depress2 #>  #> Effect                 | Estimate |          95% ETI #> ---------------------------------------------------- #> Direct Effect (ADE)    |   -0.040 | [-0.125,  0.044] #> Indirect Effect (ACME) |   -0.018 | [-0.043,  0.004] #> Mediator Effect        |   -0.241 | [-0.298, -0.186] #> Total Effect           |   -0.058 | [-0.144,  0.030] #>  #> Proportion mediated: 30.83% [-181.98%, 243.63%] #>  # }"},{"path":"https://easystats.github.io/bayestestR/reference/model_to_priors.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert model's posteriors to priors (EXPERIMENTAL) — model_to_priors","title":"Convert model's posteriors to priors (EXPERIMENTAL) — model_to_priors","text":"Convert model's posteriors (normal) priors.","code":""},{"path":"https://easystats.github.io/bayestestR/reference/model_to_priors.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert model's posteriors to priors (EXPERIMENTAL) — model_to_priors","text":"","code":"model_to_priors(model, scale_multiply = 3, ...)"},{"path":"https://easystats.github.io/bayestestR/reference/model_to_priors.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert model's posteriors to priors (EXPERIMENTAL) — model_to_priors","text":"model Bayesian model. scale_multiply SD posterior multiplied amount set prior avoid overly narrow priors. ... arguments insight::get_prior() describe_posterior.","code":""},{"path":"https://easystats.github.io/bayestestR/reference/model_to_priors.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert model's posteriors to priors (EXPERIMENTAL) — model_to_priors","text":"","code":"# \\dontrun{ # brms models # ----------------------------------------------- if (require(\"brms\")) {   formula <- brms::brmsformula(mpg ~ wt + cyl, center = FALSE)    model <- brms::brm(formula, data = mtcars, refresh = 0)   priors <- model_to_priors(model)   priors <- brms::validate_prior(priors, formula, data = mtcars)   priors    model2 <- brms::brm(formula, data = mtcars, prior = priors, refresh = 0) } #> Compiling Stan program... #> Start sampling #> Compiling Stan program... #> Start sampling # }"},{"path":"https://easystats.github.io/bayestestR/reference/overlap.html","id":null,"dir":"Reference","previous_headings":"","what":"Overlap Coefficient — overlap","title":"Overlap Coefficient — overlap","text":"method calculate overlap coefficient two empirical distributions (can used measure similarity two samples).","code":""},{"path":"https://easystats.github.io/bayestestR/reference/overlap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Overlap Coefficient — overlap","text":"","code":"overlap(   x,   y,   method_density = \"kernel\",   method_auc = \"trapezoid\",   precision = 2^10,   extend = TRUE,   extend_scale = 0.1,   ... )"},{"path":"https://easystats.github.io/bayestestR/reference/overlap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Overlap Coefficient — overlap","text":"x Vector x values. y Vector x values. method_density Density estimation method. See estimate_density(). method_auc Area Curve (AUC) estimation method. See area_under_curve(). precision Number points density data. See n parameter density. extend Extend range x axis factor extend_scale. extend_scale Ratio range extend x axis. value 0.1 means x axis extended 1/10 range data. ... Currently used.","code":""},{"path":"https://easystats.github.io/bayestestR/reference/overlap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Overlap Coefficient — overlap","text":"","code":"library(bayestestR)  x <- distribution_normal(1000, 2, 0.5) y <- distribution_normal(1000, 0, 1)  overlap(x, y) #> # Overlap #>  #> 0.19 plot(overlap(x, y))"},{"path":"https://easystats.github.io/bayestestR/reference/p_direction.html","id":null,"dir":"Reference","previous_headings":"","what":"Probability of Direction (pd) — p_direction","title":"Probability of Direction (pd) — p_direction","text":"Compute Probability Direction (pd, also known Maximum Probability Effect - MPE). varies 50% 100% (.e., 0.5 1) can interpreted probability (expressed percentage) parameter (described posterior distribution) strictly positive negative (whichever probable). mathematically defined proportion posterior distribution median's sign. Although differently expressed, index fairly similar (.e., strongly correlated) frequentist p-value.  Note (rare) cases, especially used model averaged posteriors (see weighted_posteriors() brms::posterior_average), pd can smaller 0.5, reflecting high credibility 0.","code":""},{"path":"https://easystats.github.io/bayestestR/reference/p_direction.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Probability of Direction (pd) — p_direction","text":"","code":"p_direction(x, ...)  pd(x, ...)  # S3 method for numeric p_direction(x, method = \"direct\", null = 0, ...)  # S3 method for data.frame p_direction(x, method = \"direct\", null = 0, ...)  # S3 method for MCMCglmm p_direction(x, method = \"direct\", null = 0, ...)  # S3 method for emmGrid p_direction(x, method = \"direct\", null = 0, ...)  # S3 method for stanreg p_direction(   x,   effects = c(\"fixed\", \"random\", \"all\"),   component = c(\"location\", \"all\", \"conditional\", \"smooth_terms\", \"sigma\",     \"distributional\", \"auxiliary\"),   parameters = NULL,   method = \"direct\",   null = 0,   ... )  # S3 method for brmsfit p_direction(   x,   effects = c(\"fixed\", \"random\", \"all\"),   component = c(\"conditional\", \"zi\", \"zero_inflated\", \"all\"),   parameters = NULL,   method = \"direct\",   null = 0,   ... )  # S3 method for BFBayesFactor p_direction(x, method = \"direct\", null = 0, ...)"},{"path":"https://easystats.github.io/bayestestR/reference/p_direction.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Probability of Direction (pd) — p_direction","text":"x Vector representing posterior distribution. Can also Bayesian model (stanreg, brmsfit BayesFactor). ... Currently used. method Can \"direct\" one methods density estimation, \"kernel\", \"logspline\" \"KernSmooth\". \"direct\" (default), computation based raw ratio samples superior inferior 0. Else, result based Area Curve (AUC) estimated density function. null value considered \"null\" effect. Traditionally 0, also 1 case ratios. effects results fixed effects, random effects returned? applies mixed models. May abbreviated. component results parameters, parameters conditional model zero-inflated part model returned? May abbreviated. applies brms-models. parameters Regular expression pattern describes parameters returned. Meta-parameters (like lp__ prior_) filtered default, parameters typically appear summary() returned. Use parameters select specific parameters output.","code":""},{"path":"https://easystats.github.io/bayestestR/reference/p_direction.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Probability of Direction (pd) — p_direction","text":"Values 0.5 1 corresponding probability direction (pd). Note (rare) cases, especially used model averaged posteriors (see weighted_posteriors() brms::posterior_average), pd can smaller 0.5, reflecting high credibility 0. detect cases, method = \"direct\" must used.","code":""},{"path":[]},{"path":"https://easystats.github.io/bayestestR/reference/p_direction.html","id":"what-is-the-pd-","dir":"Reference","previous_headings":"","what":"What is the pd?","title":"Probability of Direction (pd) — p_direction","text":"Probability Direction (pd) index effect existence, ranging 50% 100%, representing certainty effect goes particular direction (.e., positive negative). Beyond simplicity interpretation, understanding computation, index also presents interesting properties: independent model: solely based posterior distributions require additional information data model. robust scale response variable predictors. strongly correlated frequentist p-value, can thus used draw parallels give reference readers non-familiar Bayesian statistics.","code":""},{"path":"https://easystats.github.io/bayestestR/reference/p_direction.html","id":"relationship-with-the-p-value","dir":"Reference","previous_headings":"","what":"Relationship with the p-value","title":"Probability of Direction (pd) — p_direction","text":"cases, seems pd direct correspondence frequentist one-sided p-value formula pone sided = 1 - p(d)/100 two-sided p-value (commonly reported one) formula ptwo sided = 2 * (1 - p(d)/100). Thus, two-sided p-value respectively .1, .05, .01 .001 correspond approximately pd 95%, 97.5%, 99.5% 99.95%. See also pd_to_p().","code":""},{"path":"https://easystats.github.io/bayestestR/reference/p_direction.html","id":"methods-of-computation","dir":"Reference","previous_headings":"","what":"Methods of computation","title":"Probability of Direction (pd) — p_direction","text":"simple direct way compute pd 1) look median's sign, 2) select portion posterior sign 3) compute percentage portion represents. \"simple\" method straightforward, precision directly tied number posterior draws. second approach relies density estimation. starts estimating density function (many methods available), computing area curve (AUC) density curve side 0.","code":""},{"path":"https://easystats.github.io/bayestestR/reference/p_direction.html","id":"strengths-and-limitations","dir":"Reference","previous_headings":"","what":"Strengths and Limitations","title":"Probability of Direction (pd) — p_direction","text":"Strengths: Straightforward computation interpretation. Objective property posterior distribution. 1:1 correspondence frequentist p-value. Limitations: Limited information favoring null hypothesis.","code":""},{"path":"https://easystats.github.io/bayestestR/reference/p_direction.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Probability of Direction (pd) — p_direction","text":"also plot()-method implemented see-package.","code":""},{"path":"https://easystats.github.io/bayestestR/reference/p_direction.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Probability of Direction (pd) — p_direction","text":"Makowski D, Ben-Shachar MS, Chen SHA, Lüdecke D (2019) Indices Effect Existence Significance Bayesian Framework. Frontiers Psychology 2019;10:2767. doi:10.3389/fpsyg.2019.02767","code":""},{"path":[]},{"path":"https://easystats.github.io/bayestestR/reference/p_direction.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Probability of Direction (pd) — p_direction","text":"","code":"library(bayestestR)  # Simulate a posterior distribution of mean 1 and SD 1 # ---------------------------------------------------- posterior <- rnorm(1000, mean = 1, sd = 1) p_direction(posterior) #> Probability of Direction: 0.87 p_direction(posterior, method = \"kernel\") #> Probability of Direction: 0.85  # Simulate a dataframe of posterior distributions # ----------------------------------------------- df <- data.frame(replicate(4, rnorm(100))) p_direction(df) #> Probability of Direction #>  #> Parameter |     pd #> ------------------ #> X1        | 52.00% #> X2        | 56.00% #> X3        | 61.00% #> X4        | 59.00% p_direction(df, method = \"kernel\") #> Probability of Direction #>  #> Parameter |     pd #> ------------------ #> X1        | 50.98% #> X2        | 51.95% #> X3        | 58.20% #> X4        | 56.33% # \\dontrun{ # rstanarm models # ----------------------------------------------- if (require(\"rstanarm\")) {   model <- rstanarm::stan_glm(mpg ~ wt + cyl,     data = mtcars,     chains = 2, refresh = 0   )   p_direction(model)   p_direction(model, method = \"kernel\") } #> Probability of Direction  #>  #> Parameter   |   pd #> ------------------ #> (Intercept) | 100% #> wt          | 100% #> cyl         | 100%  # emmeans # ----------------------------------------------- if (require(\"emmeans\")) {   p_direction(emtrends(model, ~1, \"wt\")) } #> Warning: Model has 0 prior weights, but we recovered 32 rows of data. #> So prior weights were ignored. #> Probability of Direction #>  #> Parameter |   pd #> ---------------- #> overall   | 100%  # brms models # ----------------------------------------------- if (require(\"brms\")) {   model <- brms::brm(mpg ~ wt + cyl, data = mtcars)   p_direction(model)   p_direction(model, method = \"kernel\") } #> Compiling Stan program... #> Start sampling #>  #> SAMPLING FOR MODEL '2d19b3a372313df641edf05db5e9f303' NOW (CHAIN 1). #> Chain 1:  #> Chain 1: Gradient evaluation took 9e-06 seconds #> Chain 1: 1000 transitions using 10 leapfrog steps per transition would take 0.09 seconds. #> Chain 1: Adjust your expectations accordingly! #> Chain 1:  #> Chain 1:  #> Chain 1: Iteration:    1 / 2000 [  0%]  (Warmup) #> Chain 1: Iteration:  200 / 2000 [ 10%]  (Warmup) #> Chain 1: Iteration:  400 / 2000 [ 20%]  (Warmup) #> Chain 1: Iteration:  600 / 2000 [ 30%]  (Warmup) #> Chain 1: Iteration:  800 / 2000 [ 40%]  (Warmup) #> Chain 1: Iteration: 1000 / 2000 [ 50%]  (Warmup) #> Chain 1: Iteration: 1001 / 2000 [ 50%]  (Sampling) #> Chain 1: Iteration: 1200 / 2000 [ 60%]  (Sampling) #> Chain 1: Iteration: 1400 / 2000 [ 70%]  (Sampling) #> Chain 1: Iteration: 1600 / 2000 [ 80%]  (Sampling) #> Chain 1: Iteration: 1800 / 2000 [ 90%]  (Sampling) #> Chain 1: Iteration: 2000 / 2000 [100%]  (Sampling) #> Chain 1:  #> Chain 1:  Elapsed Time: 0.026946 seconds (Warm-up) #> Chain 1:                0.029205 seconds (Sampling) #> Chain 1:                0.056151 seconds (Total) #> Chain 1:  #>  #> SAMPLING FOR MODEL '2d19b3a372313df641edf05db5e9f303' NOW (CHAIN 2). #> Chain 2:  #> Chain 2: Gradient evaluation took 6e-06 seconds #> Chain 2: 1000 transitions using 10 leapfrog steps per transition would take 0.06 seconds. #> Chain 2: Adjust your expectations accordingly! #> Chain 2:  #> Chain 2:  #> Chain 2: Iteration:    1 / 2000 [  0%]  (Warmup) #> Chain 2: Iteration:  200 / 2000 [ 10%]  (Warmup) #> Chain 2: Iteration:  400 / 2000 [ 20%]  (Warmup) #> Chain 2: Iteration:  600 / 2000 [ 30%]  (Warmup) #> Chain 2: Iteration:  800 / 2000 [ 40%]  (Warmup) #> Chain 2: Iteration: 1000 / 2000 [ 50%]  (Warmup) #> Chain 2: Iteration: 1001 / 2000 [ 50%]  (Sampling) #> Chain 2: Iteration: 1200 / 2000 [ 60%]  (Sampling) #> Chain 2: Iteration: 1400 / 2000 [ 70%]  (Sampling) #> Chain 2: Iteration: 1600 / 2000 [ 80%]  (Sampling) #> Chain 2: Iteration: 1800 / 2000 [ 90%]  (Sampling) #> Chain 2: Iteration: 2000 / 2000 [100%]  (Sampling) #> Chain 2:  #> Chain 2:  Elapsed Time: 0.028617 seconds (Warm-up) #> Chain 2:                0.024968 seconds (Sampling) #> Chain 2:                0.053585 seconds (Total) #> Chain 2:  #>  #> SAMPLING FOR MODEL '2d19b3a372313df641edf05db5e9f303' NOW (CHAIN 3). #> Chain 3:  #> Chain 3: Gradient evaluation took 6e-06 seconds #> Chain 3: 1000 transitions using 10 leapfrog steps per transition would take 0.06 seconds. #> Chain 3: Adjust your expectations accordingly! #> Chain 3:  #> Chain 3:  #> Chain 3: Iteration:    1 / 2000 [  0%]  (Warmup) #> Chain 3: Iteration:  200 / 2000 [ 10%]  (Warmup) #> Chain 3: Iteration:  400 / 2000 [ 20%]  (Warmup) #> Chain 3: Iteration:  600 / 2000 [ 30%]  (Warmup) #> Chain 3: Iteration:  800 / 2000 [ 40%]  (Warmup) #> Chain 3: Iteration: 1000 / 2000 [ 50%]  (Warmup) #> Chain 3: Iteration: 1001 / 2000 [ 50%]  (Sampling) #> Chain 3: Iteration: 1200 / 2000 [ 60%]  (Sampling) #> Chain 3: Iteration: 1400 / 2000 [ 70%]  (Sampling) #> Chain 3: Iteration: 1600 / 2000 [ 80%]  (Sampling) #> Chain 3: Iteration: 1800 / 2000 [ 90%]  (Sampling) #> Chain 3: Iteration: 2000 / 2000 [100%]  (Sampling) #> Chain 3:  #> Chain 3:  Elapsed Time: 0.028471 seconds (Warm-up) #> Chain 3:                0.028329 seconds (Sampling) #> Chain 3:                0.0568 seconds (Total) #> Chain 3:  #>  #> SAMPLING FOR MODEL '2d19b3a372313df641edf05db5e9f303' NOW (CHAIN 4). #> Chain 4:  #> Chain 4: Gradient evaluation took 6e-06 seconds #> Chain 4: 1000 transitions using 10 leapfrog steps per transition would take 0.06 seconds. #> Chain 4: Adjust your expectations accordingly! #> Chain 4:  #> Chain 4:  #> Chain 4: Iteration:    1 / 2000 [  0%]  (Warmup) #> Chain 4: Iteration:  200 / 2000 [ 10%]  (Warmup) #> Chain 4: Iteration:  400 / 2000 [ 20%]  (Warmup) #> Chain 4: Iteration:  600 / 2000 [ 30%]  (Warmup) #> Chain 4: Iteration:  800 / 2000 [ 40%]  (Warmup) #> Chain 4: Iteration: 1000 / 2000 [ 50%]  (Warmup) #> Chain 4: Iteration: 1001 / 2000 [ 50%]  (Sampling) #> Chain 4: Iteration: 1200 / 2000 [ 60%]  (Sampling) #> Chain 4: Iteration: 1400 / 2000 [ 70%]  (Sampling) #> Chain 4: Iteration: 1600 / 2000 [ 80%]  (Sampling) #> Chain 4: Iteration: 1800 / 2000 [ 90%]  (Sampling) #> Chain 4: Iteration: 2000 / 2000 [100%]  (Sampling) #> Chain 4:  #> Chain 4:  Elapsed Time: 0.028617 seconds (Warm-up) #> Chain 4:                0.028222 seconds (Sampling) #> Chain 4:                0.056839 seconds (Total) #> Chain 4:  #> Probability of Direction  #>  #> Parameter   |   pd #> ------------------ #> (Intercept) | 100% #> wt          | 100% #> cyl         | 100%  # BayesFactor objects # ----------------------------------------------- if (require(\"BayesFactor\")) {   bf <- ttestBF(x = rnorm(100, 1, 1))   p_direction(bf)   p_direction(bf, method = \"kernel\") } #> Probability of Direction #>  #> Parameter  |   pd #> ----------------- #> Difference | 100% # }"},{"path":"https://easystats.github.io/bayestestR/reference/p_map.html","id":null,"dir":"Reference","previous_headings":"","what":"Bayesian p-value based on the density at the Maximum A Posteriori (MAP) — p_map","title":"Bayesian p-value based on the density at the Maximum A Posteriori (MAP) — p_map","text":"Compute Bayesian equivalent p-value, related odds parameter (described posterior distribution) null hypothesis (h0) using Mills' (2014, 2017) Objective Bayesian Hypothesis Testing framework. corresponds density value null (e.g., 0) divided density Maximum Posteriori (MAP).","code":""},{"path":"https://easystats.github.io/bayestestR/reference/p_map.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Bayesian p-value based on the density at the Maximum A Posteriori (MAP) — p_map","text":"","code":"p_map(x, null = 0, precision = 2^10, method = \"kernel\", ...)  p_pointnull(x, null = 0, precision = 2^10, method = \"kernel\", ...)  # S3 method for stanreg p_map(   x,   null = 0,   precision = 2^10,   method = \"kernel\",   effects = c(\"fixed\", \"random\", \"all\"),   component = c(\"location\", \"all\", \"conditional\", \"smooth_terms\", \"sigma\",     \"distributional\", \"auxiliary\"),   parameters = NULL,   ... )  # S3 method for brmsfit p_map(   x,   null = 0,   precision = 2^10,   method = \"kernel\",   effects = c(\"fixed\", \"random\", \"all\"),   component = c(\"conditional\", \"zi\", \"zero_inflated\", \"all\"),   parameters = NULL,   ... )"},{"path":"https://easystats.github.io/bayestestR/reference/p_map.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Bayesian p-value based on the density at the Maximum A Posteriori (MAP) — p_map","text":"x Vector representing posterior distribution, data frame vectors. Can also Bayesian model. bayestestR supports wide range models (see, example, methods(\"hdi\")) documented 'Usage' section, methods classes mostly resemble arguments .numeric .data.framemethods. null value considered \"null\" effect. Traditionally 0, also 1 case ratios. precision Number points density data. See n parameter density. method Density estimation method. Can \"kernel\" (default), \"logspline\" \"KernSmooth\". ... Currently used. effects results fixed effects, random effects returned? applies mixed models. May abbreviated. component results parameters, parameters conditional model zero-inflated part model returned? May abbreviated. applies brms-models. parameters Regular expression pattern describes parameters returned. Meta-parameters (like lp__ prior_) filtered default, parameters typically appear summary() returned. Use parameters select specific parameters output.","code":""},{"path":"https://easystats.github.io/bayestestR/reference/p_map.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Bayesian p-value based on the density at the Maximum A Posteriori (MAP) — p_map","text":"Note method sensitive density estimation method (see section examples ).","code":""},{"path":"https://easystats.github.io/bayestestR/reference/p_map.html","id":"strengths-and-limitations","dir":"Reference","previous_headings":"","what":"Strengths and Limitations","title":"Bayesian p-value based on the density at the Maximum A Posteriori (MAP) — p_map","text":"Strengths: Straightforward computation. Objective property posterior distribution. Limitations: Limited information favoring null hypothesis. Relates density approximation. Indirect relationship mathematical definition interpretation. suitable weak / diffused priors.","code":""},{"path":"https://easystats.github.io/bayestestR/reference/p_map.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Bayesian p-value based on the density at the Maximum A Posteriori (MAP) — p_map","text":"Makowski D, Ben-Shachar MS, Chen SHA, Lüdecke D (2019) Indices Effect Existence Significance Bayesian Framework. Frontiers Psychology 2019;10:2767. doi:10.3389/fpsyg.2019.02767 Mills, J. . (2018). Objective Bayesian Precise Hypothesis Testing. University Cincinnati.","code":""},{"path":[]},{"path":"https://easystats.github.io/bayestestR/reference/p_map.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Bayesian p-value based on the density at the Maximum A Posteriori (MAP) — p_map","text":"","code":"library(bayestestR)  p_map(rnorm(1000, 0, 1)) #> MAP-based p-value: 0.99 p_map(rnorm(1000, 10, 1)) #> MAP-based p-value: 0.00 # \\dontrun{ library(rstanarm) model <- stan_glm(mpg ~ wt + gear, data = mtcars, chains = 2, iter = 200, refresh = 0) #> Warning: The largest R-hat is 1.09, indicating chains have not mixed. #> Running the chains for more iterations may help. See #> https://mc-stan.org/misc/warnings.html#r-hat #> Warning: Bulk Effective Samples Size (ESS) is too low, indicating posterior means and medians may be unreliable. #> Running the chains for more iterations may help. See #> https://mc-stan.org/misc/warnings.html#bulk-ess #> Warning: Tail Effective Samples Size (ESS) is too low, indicating posterior variances and tail quantiles may be unreliable. #> Running the chains for more iterations may help. See #> https://mc-stan.org/misc/warnings.html#tail-ess p_map(model) #> MAP-based p-value  #>  #> Parameter   | p (MAP) #> --------------------- #> (Intercept) |  < .001 #> wt          |  < .001 #> gear        |  0.979   library(emmeans) p_map(emtrends(model, ~1, \"wt\")) #> Warning: Model has 0 prior weights, but we recovered 32 rows of data. #> So prior weights were ignored. #> MAP-based p-value #>  #> Parameter | p (MAP) #> ------------------- #> overall   |  < .001  library(brms) model <- brms::brm(mpg ~ wt + cyl, data = mtcars) #> Compiling Stan program... #> Start sampling #>  #> SAMPLING FOR MODEL '2d19b3a372313df641edf05db5e9f303' NOW (CHAIN 1). #> Chain 1:  #> Chain 1: Gradient evaluation took 9e-06 seconds #> Chain 1: 1000 transitions using 10 leapfrog steps per transition would take 0.09 seconds. #> Chain 1: Adjust your expectations accordingly! #> Chain 1:  #> Chain 1:  #> Chain 1: Iteration:    1 / 2000 [  0%]  (Warmup) #> Chain 1: Iteration:  200 / 2000 [ 10%]  (Warmup) #> Chain 1: Iteration:  400 / 2000 [ 20%]  (Warmup) #> Chain 1: Iteration:  600 / 2000 [ 30%]  (Warmup) #> Chain 1: Iteration:  800 / 2000 [ 40%]  (Warmup) #> Chain 1: Iteration: 1000 / 2000 [ 50%]  (Warmup) #> Chain 1: Iteration: 1001 / 2000 [ 50%]  (Sampling) #> Chain 1: Iteration: 1200 / 2000 [ 60%]  (Sampling) #> Chain 1: Iteration: 1400 / 2000 [ 70%]  (Sampling) #> Chain 1: Iteration: 1600 / 2000 [ 80%]  (Sampling) #> Chain 1: Iteration: 1800 / 2000 [ 90%]  (Sampling) #> Chain 1: Iteration: 2000 / 2000 [100%]  (Sampling) #> Chain 1:  #> Chain 1:  Elapsed Time: 0.026148 seconds (Warm-up) #> Chain 1:                0.026498 seconds (Sampling) #> Chain 1:                0.052646 seconds (Total) #> Chain 1:  #>  #> SAMPLING FOR MODEL '2d19b3a372313df641edf05db5e9f303' NOW (CHAIN 2). #> Chain 2:  #> Chain 2: Gradient evaluation took 7e-06 seconds #> Chain 2: 1000 transitions using 10 leapfrog steps per transition would take 0.07 seconds. #> Chain 2: Adjust your expectations accordingly! #> Chain 2:  #> Chain 2:  #> Chain 2: Iteration:    1 / 2000 [  0%]  (Warmup) #> Chain 2: Iteration:  200 / 2000 [ 10%]  (Warmup) #> Chain 2: Iteration:  400 / 2000 [ 20%]  (Warmup) #> Chain 2: Iteration:  600 / 2000 [ 30%]  (Warmup) #> Chain 2: Iteration:  800 / 2000 [ 40%]  (Warmup) #> Chain 2: Iteration: 1000 / 2000 [ 50%]  (Warmup) #> Chain 2: Iteration: 1001 / 2000 [ 50%]  (Sampling) #> Chain 2: Iteration: 1200 / 2000 [ 60%]  (Sampling) #> Chain 2: Iteration: 1400 / 2000 [ 70%]  (Sampling) #> Chain 2: Iteration: 1600 / 2000 [ 80%]  (Sampling) #> Chain 2: Iteration: 1800 / 2000 [ 90%]  (Sampling) #> Chain 2: Iteration: 2000 / 2000 [100%]  (Sampling) #> Chain 2:  #> Chain 2:  Elapsed Time: 0.027252 seconds (Warm-up) #> Chain 2:                0.026669 seconds (Sampling) #> Chain 2:                0.053921 seconds (Total) #> Chain 2:  #>  #> SAMPLING FOR MODEL '2d19b3a372313df641edf05db5e9f303' NOW (CHAIN 3). #> Chain 3:  #> Chain 3: Gradient evaluation took 6e-06 seconds #> Chain 3: 1000 transitions using 10 leapfrog steps per transition would take 0.06 seconds. #> Chain 3: Adjust your expectations accordingly! #> Chain 3:  #> Chain 3:  #> Chain 3: Iteration:    1 / 2000 [  0%]  (Warmup) #> Chain 3: Iteration:  200 / 2000 [ 10%]  (Warmup) #> Chain 3: Iteration:  400 / 2000 [ 20%]  (Warmup) #> Chain 3: Iteration:  600 / 2000 [ 30%]  (Warmup) #> Chain 3: Iteration:  800 / 2000 [ 40%]  (Warmup) #> Chain 3: Iteration: 1000 / 2000 [ 50%]  (Warmup) #> Chain 3: Iteration: 1001 / 2000 [ 50%]  (Sampling) #> Chain 3: Iteration: 1200 / 2000 [ 60%]  (Sampling) #> Chain 3: Iteration: 1400 / 2000 [ 70%]  (Sampling) #> Chain 3: Iteration: 1600 / 2000 [ 80%]  (Sampling) #> Chain 3: Iteration: 1800 / 2000 [ 90%]  (Sampling) #> Chain 3: Iteration: 2000 / 2000 [100%]  (Sampling) #> Chain 3:  #> Chain 3:  Elapsed Time: 0.027274 seconds (Warm-up) #> Chain 3:                0.024838 seconds (Sampling) #> Chain 3:                0.052112 seconds (Total) #> Chain 3:  #>  #> SAMPLING FOR MODEL '2d19b3a372313df641edf05db5e9f303' NOW (CHAIN 4). #> Chain 4:  #> Chain 4: Gradient evaluation took 6e-06 seconds #> Chain 4: 1000 transitions using 10 leapfrog steps per transition would take 0.06 seconds. #> Chain 4: Adjust your expectations accordingly! #> Chain 4:  #> Chain 4:  #> Chain 4: Iteration:    1 / 2000 [  0%]  (Warmup) #> Chain 4: Iteration:  200 / 2000 [ 10%]  (Warmup) #> Chain 4: Iteration:  400 / 2000 [ 20%]  (Warmup) #> Chain 4: Iteration:  600 / 2000 [ 30%]  (Warmup) #> Chain 4: Iteration:  800 / 2000 [ 40%]  (Warmup) #> Chain 4: Iteration: 1000 / 2000 [ 50%]  (Warmup) #> Chain 4: Iteration: 1001 / 2000 [ 50%]  (Sampling) #> Chain 4: Iteration: 1200 / 2000 [ 60%]  (Sampling) #> Chain 4: Iteration: 1400 / 2000 [ 70%]  (Sampling) #> Chain 4: Iteration: 1600 / 2000 [ 80%]  (Sampling) #> Chain 4: Iteration: 1800 / 2000 [ 90%]  (Sampling) #> Chain 4: Iteration: 2000 / 2000 [100%]  (Sampling) #> Chain 4:  #> Chain 4:  Elapsed Time: 0.028484 seconds (Warm-up) #> Chain 4:                0.025983 seconds (Sampling) #> Chain 4:                0.054467 seconds (Total) #> Chain 4:  p_map(model) #> MAP-based p-value  #>  #> Parameter   | p (MAP) #> --------------------- #> (Intercept) |  < .001 #> wt          |  < .001 #> cyl         |  0.004   library(BayesFactor) bf <- ttestBF(x = rnorm(100, 1, 1)) p_map(bf) #> MAP-based p-value #>  #> Parameter  | p (MAP) #> -------------------- #> Difference |  < .001  # --------------------------------------- # Robustness to density estimation method set.seed(333) data <- data.frame() for (iteration in 1:250) {   x <- rnorm(1000, 1, 1)   result <- data.frame(     \"Kernel\" = p_map(x, method = \"kernel\"),     \"KernSmooth\" = p_map(x, method = \"KernSmooth\"),     \"logspline\" = p_map(x, method = \"logspline\")   )   data <- rbind(data, result) } data$KernSmooth <- data$Kernel - data$KernSmooth data$logspline <- data$Kernel - data$logspline  summary(data$KernSmooth) #>      Min.   1st Qu.    Median      Mean   3rd Qu.      Max.  #> -0.039649 -0.007867 -0.003854 -0.005315 -0.001114  0.056255  summary(data$logspline) #>      Min.   1st Qu.    Median      Mean   3rd Qu.      Max.  #> -0.092188 -0.008992  0.022235  0.026989  0.066329  0.166891  boxplot(data[c(\"KernSmooth\", \"logspline\")])  # }"},{"path":"https://easystats.github.io/bayestestR/reference/p_rope.html","id":null,"dir":"Reference","previous_headings":"","what":"Probability of being in the ROPE — p_rope","title":"Probability of being in the ROPE — p_rope","text":"Compute proportion whole posterior distribution lie within region practical equivalence (ROPE). equivalent running rope(..., ci = 1).","code":""},{"path":"https://easystats.github.io/bayestestR/reference/p_rope.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Probability of being in the ROPE — p_rope","text":"","code":"p_rope(x, ...)  # S3 method for numeric p_rope(x, range = \"default\", ...)  # S3 method for stanreg p_rope(   x,   range = \"default\",   effects = c(\"fixed\", \"random\", \"all\"),   component = c(\"location\", \"all\", \"conditional\", \"smooth_terms\", \"sigma\",     \"distributional\", \"auxiliary\"),   parameters = NULL,   ... )  # S3 method for brmsfit p_rope(   x,   range = \"default\",   effects = c(\"fixed\", \"random\", \"all\"),   component = c(\"conditional\", \"zi\", \"zero_inflated\", \"all\"),   parameters = NULL,   ... )"},{"path":"https://easystats.github.io/bayestestR/reference/p_rope.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Probability of being in the ROPE — p_rope","text":"x Vector representing posterior distribution. Can also stanreg brmsfit model. ... Currently used. range ROPE's lower higher bounds. \"default\" depending number outcome variables vector list. models one response, range vector length two (e.g., c(-0.1, 0.1)). multivariate models, range list numeric vectors response variable. Vector names correspond name response variables. \"default\" input vector, range set c(-0.1, 0.1). \"default\" input Bayesian model, rope_range() used. effects results fixed effects, random effects returned? applies mixed models. May abbreviated. component results parameters, parameters conditional model zero-inflated part model returned? May abbreviated. applies brms-models. parameters Regular expression pattern describes parameters returned. Meta-parameters (like lp__ prior_) filtered default, parameters typically appear summary() returned. Use parameters select specific parameters output.","code":""},{"path":"https://easystats.github.io/bayestestR/reference/p_rope.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Probability of being in the ROPE — p_rope","text":"","code":"library(bayestestR)  p_rope(x = rnorm(1000, 0, 0.01), range = c(-0.1, 0.1)) #> Proportion of samples inside the ROPE [-0.10, 0.10]: > .999 p_rope(x = mtcars, range = c(-0.1, 0.1)) #> Proportion of samples inside the ROPE [-0.10, 0.10] #>  #> Parameter | p (ROPE) #> -------------------- #> mpg       |   < .001 #> cyl       |   < .001 #> disp      |   < .001 #> hp        |   < .001 #> drat      |   < .001 #> wt        |   < .001 #> qsec      |   < .001 #> vs        |   0.562  #> am        |   0.594  #> gear      |   < .001 #> carb      |   < .001"},{"path":"https://easystats.github.io/bayestestR/reference/p_significance.html","id":null,"dir":"Reference","previous_headings":"","what":"Practical Significance (ps) — p_significance","title":"Practical Significance (ps) — p_significance","text":"Compute probability Practical Significance (ps), can conceptualized unidirectional equivalence test. returns probability effect given threshold corresponding negligible effect median's direction. Mathematically, defined proportion posterior distribution median sign threshold.","code":""},{"path":"https://easystats.github.io/bayestestR/reference/p_significance.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Practical Significance (ps) — p_significance","text":"","code":"p_significance(x, ...)  # S3 method for numeric p_significance(x, threshold = \"default\", ...)  # S3 method for stanreg p_significance(   x,   threshold = \"default\",   effects = c(\"fixed\", \"random\", \"all\"),   component = c(\"location\", \"all\", \"conditional\", \"smooth_terms\", \"sigma\",     \"distributional\", \"auxiliary\"),   parameters = NULL,   verbose = TRUE,   ... )  # S3 method for brmsfit p_significance(   x,   threshold = \"default\",   effects = c(\"fixed\", \"random\", \"all\"),   component = c(\"conditional\", \"zi\", \"zero_inflated\", \"all\"),   parameters = NULL,   verbose = TRUE,   ... )"},{"path":"https://easystats.github.io/bayestestR/reference/p_significance.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Practical Significance (ps) — p_significance","text":"x Vector representing posterior distribution. Can also stanreg brmsfit model. ... Currently used. threshold threshold value separates significant negligible effect. \"default\", range set 0.1 input vector, based rope_range() Bayesian model provided. effects results fixed effects, random effects returned? applies mixed models. May abbreviated. component results parameters, parameters conditional model zero-inflated part model returned? May abbreviated. applies brms-models. parameters Regular expression pattern describes parameters returned. Meta-parameters (like lp__ prior_) filtered default, parameters typically appear summary() returned. Use parameters select specific parameters output. verbose Toggle warnings.","code":""},{"path":"https://easystats.github.io/bayestestR/reference/p_significance.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Practical Significance (ps) — p_significance","text":"Values 0 1 corresponding probability practical significance (ps).","code":""},{"path":"https://easystats.github.io/bayestestR/reference/p_significance.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Practical Significance (ps) — p_significance","text":"p_significance() returns proportion probability distribution (x) outside certain range (negligible effect, ROPE, see argument threshold). values distribution ROPE, p_significance() returns higher probability value outside ROPE. Typically, value larger 0.5 indicate practical significance. However, range negligible effect rather large compared range probability distribution x, p_significance() less 0.5, indicates clear practical significance.","code":""},{"path":"https://easystats.github.io/bayestestR/reference/p_significance.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Practical Significance (ps) — p_significance","text":"also plot()-method implemented see-package.","code":""},{"path":"https://easystats.github.io/bayestestR/reference/p_significance.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Practical Significance (ps) — p_significance","text":"","code":"library(bayestestR)  # Simulate a posterior distribution of mean 1 and SD 1 # ---------------------------------------------------- posterior <- rnorm(1000, mean = 1, sd = 1) p_significance(posterior) #> Practical Significance (threshold: 0.10): 0.80  # Simulate a dataframe of posterior distributions # ----------------------------------------------- df <- data.frame(replicate(4, rnorm(100))) p_significance(df) #> Practical Significance (threshold: 0.10) #>  #> Parameter |   ps #> ---------------- #> X1        | 0.51 #> X2        | 0.55 #> X3        | 0.47 #> X4        | 0.47 # \\dontrun{ # rstanarm models # ----------------------------------------------- if (require(\"rstanarm\")) {   model <- rstanarm::stan_glm(mpg ~ wt + cyl,     data = mtcars,     chains = 2, refresh = 0   )   p_significance(model) } #> Practical Significance (threshold: 0.60)  #>  #> Parameter   |   ps #> ------------------ #> (Intercept) | 1.00 #> wt          | 1.00 #> cyl         | 0.98 # }"},{"path":"https://easystats.github.io/bayestestR/reference/p_to_bf.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert p-values to (pseudo) Bayes Factors — p_to_bf","title":"Convert p-values to (pseudo) Bayes Factors — p_to_bf","text":"Convert p-values (pseudo) Bayes Factors. transformation suggested Wagenmakers (2022), based vast amount assumptions. might therefore reliable. Use risks. accurate approximate Bayes factors, use bic_to_bf() instead.","code":""},{"path":"https://easystats.github.io/bayestestR/reference/p_to_bf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert p-values to (pseudo) Bayes Factors — p_to_bf","text":"","code":"p_to_bf(x, log = FALSE, ...)  # S3 method for numeric p_to_bf(x, log = FALSE, n_obs = NULL, ...)  # S3 method for default p_to_bf(x, log = FALSE, ...)"},{"path":"https://easystats.github.io/bayestestR/reference/p_to_bf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert p-values to (pseudo) Bayes Factors — p_to_bf","text":"x (frequentist) model object, (numeric) vector p-values. log Wether return log Bayes Factors. Note: print() method always shows BF - \"log_BF\" column accessible returned data frame. ... arguments passed (used now). n_obs Number observations. Either length 1, length p.","code":""},{"path":"https://easystats.github.io/bayestestR/reference/p_to_bf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert p-values to (pseudo) Bayes Factors — p_to_bf","text":"data frame p-values pseudo-Bayes factors (null).","code":""},{"path":"https://easystats.github.io/bayestestR/reference/p_to_bf.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Convert p-values to (pseudo) Bayes Factors — p_to_bf","text":"Wagenmakers, E.J. (2022). Approximate objective Bayes factors p-values sample size: 3p(sqrt(n)) rule. Preprint available ArXiv: https://psyarxiv.com/egydq","code":""},{"path":[]},{"path":"https://easystats.github.io/bayestestR/reference/p_to_bf.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert p-values to (pseudo) Bayes Factors — p_to_bf","text":"","code":"if (requireNamespace(\"parameters\", quietly = TRUE)) {   data(iris)   model <- lm(Petal.Length ~ Sepal.Length + Species, data = iris)   p_to_bf(model)    # Examples that demonstrate comparison between   # BIC-approximated and pseudo BF   # --------------------------------------------   m0 <- lm(mpg ~ 1, mtcars)   m1 <- lm(mpg ~ am, mtcars)   m2 <- lm(mpg ~ factor(cyl), mtcars)    # In this first example, BIC-approximated BF and   # pseudo-BF based on p-values are close...    # BIC-approximated BF, m1 against null model   bic_to_bf(BIC(m1), denominator = BIC(m0))    # pseudo-BF based on p-values - dropping intercept   p_to_bf(m1)[-1, ]    # The second example shows that results from pseudo-BF are less accurate   # and should be handled wit caution!   bic_to_bf(BIC(m2), denominator = BIC(m0))   p_to_bf(anova(m2), n_obs = nrow(mtcars)) } #> Pseudo-BF (against NULL) #>  #> Parameter   |      p |       BF #> ------------------------------- #> factor(cyl) | < .001 | 1.18e+07"},{"path":"https://easystats.github.io/bayestestR/reference/pd_to_p.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert between Probability of Direction (pd) and p-value. — pd_to_p","title":"Convert between Probability of Direction (pd) and p-value. — pd_to_p","text":"Enables conversion Probability Direction (pd) p-value.","code":""},{"path":"https://easystats.github.io/bayestestR/reference/pd_to_p.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert between Probability of Direction (pd) and p-value. — pd_to_p","text":"","code":"pd_to_p(pd, direction = \"two-sided\", ...)  p_to_pd(p, direction = \"two-sided\", ...)  convert_p_to_pd(p, direction = \"two-sided\", ...)  convert_pd_to_p(pd, direction = \"two-sided\", ...)"},{"path":"https://easystats.github.io/bayestestR/reference/pd_to_p.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert between Probability of Direction (pd) and p-value. — pd_to_p","text":"pd Probability Direction (pd) value (0 1). direction type p-value requested provided. Can \"two-sided\" (default, two tailed) \"one-sided\" (one tailed). ... Arguments passed methods. p p-value.","code":""},{"path":"https://easystats.github.io/bayestestR/reference/pd_to_p.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert between Probability of Direction (pd) and p-value. — pd_to_p","text":"","code":"pd_to_p(pd = 0.95) #> [1] 0.1 pd_to_p(pd = 0.95, direction = \"one-sided\") #> [1] 0.05"},{"path":"https://easystats.github.io/bayestestR/reference/point_estimate.html","id":null,"dir":"Reference","previous_headings":"","what":"Point-estimates of posterior distributions — point_estimate","title":"Point-estimates of posterior distributions — point_estimate","text":"Compute various point-estimates, mean, median MAP, describe posterior distributions.","code":""},{"path":"https://easystats.github.io/bayestestR/reference/point_estimate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Point-estimates of posterior distributions — point_estimate","text":"","code":"point_estimate(x, ...)  # S3 method for numeric point_estimate(x, centrality = \"all\", dispersion = FALSE, threshold = 0.1, ...)  # S3 method for stanreg point_estimate(   x,   centrality = \"all\",   dispersion = FALSE,   effects = c(\"fixed\", \"random\", \"all\"),   component = c(\"location\", \"all\", \"conditional\", \"smooth_terms\", \"sigma\",     \"distributional\", \"auxiliary\"),   parameters = NULL,   ... )  # S3 method for brmsfit point_estimate(   x,   centrality = \"all\",   dispersion = FALSE,   effects = c(\"fixed\", \"random\", \"all\"),   component = c(\"conditional\", \"zi\", \"zero_inflated\", \"all\"),   parameters = NULL,   ... )  # S3 method for BFBayesFactor point_estimate(x, centrality = \"all\", dispersion = FALSE, ...)"},{"path":"https://easystats.github.io/bayestestR/reference/point_estimate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Point-estimates of posterior distributions — point_estimate","text":"x Vector representing posterior distribution, data frame vectors. Can also Bayesian model. bayestestR supports wide range models (see, example, methods(\"hdi\")) documented 'Usage' section, methods classes mostly resemble arguments .numeric .data.framemethods. ... Additional arguments passed methods. centrality point-estimates (centrality indices) compute.  Character (vector) list one options: \"median\", \"mean\", \"MAP\" \"\". dispersion Logical, TRUE, computes indices dispersion related estimate(s) (SD MAD mean median, respectively). threshold centrality = \"trimmed\" (.e. trimmed mean), indicates fraction (0 0.5) observations trimmed end vector mean computed. effects results fixed effects, random effects returned? applies mixed models. May abbreviated. component results parameters, parameters conditional model zero-inflated part model returned? May abbreviated. applies brms-models. parameters Regular expression pattern describes parameters returned. Meta-parameters (like lp__ prior_) filtered default, parameters typically appear summary() returned. Use parameters select specific parameters output.","code":""},{"path":"https://easystats.github.io/bayestestR/reference/point_estimate.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Point-estimates of posterior distributions — point_estimate","text":"also plot()-method implemented see-package.","code":""},{"path":"https://easystats.github.io/bayestestR/reference/point_estimate.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Point-estimates of posterior distributions — point_estimate","text":"Makowski, D., Ben-Shachar, M. S., Chen, S. H. ., Lüdecke, D. (2019). Indices Effect Existence Significance Bayesian Framework. Frontiers Psychology 2019;10:2767. doi:10.3389/fpsyg.2019.02767","code":""},{"path":"https://easystats.github.io/bayestestR/reference/point_estimate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Point-estimates of posterior distributions — point_estimate","text":"","code":"library(bayestestR)  point_estimate(rnorm(1000)) #> Point Estimate #>  #> Median   | Mean |  MAP #> ---------------------- #> 5.58e-03 | 0.01 | 0.03 point_estimate(rnorm(1000), centrality = \"all\", dispersion = TRUE) #> Point Estimate #>  #> Median |  MAD |      Mean |   SD |  MAP #> --------------------------------------- #> -0.02  | 0.97 | -5.33e-03 | 1.00 | 0.05 point_estimate(rnorm(1000), centrality = c(\"median\", \"MAP\")) #> Point Estimate #>  #> Median |   MAP #> -------------- #> 0.03   | -0.07  df <- data.frame(replicate(4, rnorm(100))) point_estimate(df, centrality = \"all\", dispersion = TRUE) #> Point Estimate #>  #> Parameter | Median |  MAD |  Mean |   SD |   MAP #> ------------------------------------------------ #> X1        |  -0.02 | 1.21 |  0.02 | 1.12 |  0.85 #> X2        |  -0.07 | 1.07 | -0.10 | 1.00 | -0.18 #> X3        |  -0.29 | 1.02 | -0.33 | 0.89 | -0.10 #> X4        |  -0.08 | 0.90 | -0.14 | 0.89 |  0.11 point_estimate(df, centrality = c(\"median\", \"MAP\")) #> Point Estimate #>  #> Parameter | Median |   MAP #> -------------------------- #> X1        |  -0.02 |  0.85 #> X2        |  -0.07 | -0.18 #> X3        |  -0.29 | -0.10 #> X4        |  -0.08 |  0.11 # \\dontrun{ # rstanarm models # ----------------------------------------------- library(rstanarm) model <- rstanarm::stan_glm(mpg ~ wt + cyl, data = mtcars) #>  #> SAMPLING FOR MODEL 'continuous' NOW (CHAIN 1). #> Chain 1:  #> Chain 1: Gradient evaluation took 2e-05 seconds #> Chain 1: 1000 transitions using 10 leapfrog steps per transition would take 0.2 seconds. #> Chain 1: Adjust your expectations accordingly! #> Chain 1:  #> Chain 1:  #> Chain 1: Iteration:    1 / 2000 [  0%]  (Warmup) #> Chain 1: Iteration:  200 / 2000 [ 10%]  (Warmup) #> Chain 1: Iteration:  400 / 2000 [ 20%]  (Warmup) #> Chain 1: Iteration:  600 / 2000 [ 30%]  (Warmup) #> Chain 1: Iteration:  800 / 2000 [ 40%]  (Warmup) #> Chain 1: Iteration: 1000 / 2000 [ 50%]  (Warmup) #> Chain 1: Iteration: 1001 / 2000 [ 50%]  (Sampling) #> Chain 1: Iteration: 1200 / 2000 [ 60%]  (Sampling) #> Chain 1: Iteration: 1400 / 2000 [ 70%]  (Sampling) #> Chain 1: Iteration: 1600 / 2000 [ 80%]  (Sampling) #> Chain 1: Iteration: 1800 / 2000 [ 90%]  (Sampling) #> Chain 1: Iteration: 2000 / 2000 [100%]  (Sampling) #> Chain 1:  #> Chain 1:  Elapsed Time: 0.056 seconds (Warm-up) #> Chain 1:                0.053 seconds (Sampling) #> Chain 1:                0.109 seconds (Total) #> Chain 1:  #>  #> SAMPLING FOR MODEL 'continuous' NOW (CHAIN 2). #> Chain 2:  #> Chain 2: Gradient evaluation took 1.2e-05 seconds #> Chain 2: 1000 transitions using 10 leapfrog steps per transition would take 0.12 seconds. #> Chain 2: Adjust your expectations accordingly! #> Chain 2:  #> Chain 2:  #> Chain 2: Iteration:    1 / 2000 [  0%]  (Warmup) #> Chain 2: Iteration:  200 / 2000 [ 10%]  (Warmup) #> Chain 2: Iteration:  400 / 2000 [ 20%]  (Warmup) #> Chain 2: Iteration:  600 / 2000 [ 30%]  (Warmup) #> Chain 2: Iteration:  800 / 2000 [ 40%]  (Warmup) #> Chain 2: Iteration: 1000 / 2000 [ 50%]  (Warmup) #> Chain 2: Iteration: 1001 / 2000 [ 50%]  (Sampling) #> Chain 2: Iteration: 1200 / 2000 [ 60%]  (Sampling) #> Chain 2: Iteration: 1400 / 2000 [ 70%]  (Sampling) #> Chain 2: Iteration: 1600 / 2000 [ 80%]  (Sampling) #> Chain 2: Iteration: 1800 / 2000 [ 90%]  (Sampling) #> Chain 2: Iteration: 2000 / 2000 [100%]  (Sampling) #> Chain 2:  #> Chain 2:  Elapsed Time: 0.057 seconds (Warm-up) #> Chain 2:                0.051 seconds (Sampling) #> Chain 2:                0.108 seconds (Total) #> Chain 2:  #>  #> SAMPLING FOR MODEL 'continuous' NOW (CHAIN 3). #> Chain 3:  #> Chain 3: Gradient evaluation took 1.1e-05 seconds #> Chain 3: 1000 transitions using 10 leapfrog steps per transition would take 0.11 seconds. #> Chain 3: Adjust your expectations accordingly! #> Chain 3:  #> Chain 3:  #> Chain 3: Iteration:    1 / 2000 [  0%]  (Warmup) #> Chain 3: Iteration:  200 / 2000 [ 10%]  (Warmup) #> Chain 3: Iteration:  400 / 2000 [ 20%]  (Warmup) #> Chain 3: Iteration:  600 / 2000 [ 30%]  (Warmup) #> Chain 3: Iteration:  800 / 2000 [ 40%]  (Warmup) #> Chain 3: Iteration: 1000 / 2000 [ 50%]  (Warmup) #> Chain 3: Iteration: 1001 / 2000 [ 50%]  (Sampling) #> Chain 3: Iteration: 1200 / 2000 [ 60%]  (Sampling) #> Chain 3: Iteration: 1400 / 2000 [ 70%]  (Sampling) #> Chain 3: Iteration: 1600 / 2000 [ 80%]  (Sampling) #> Chain 3: Iteration: 1800 / 2000 [ 90%]  (Sampling) #> Chain 3: Iteration: 2000 / 2000 [100%]  (Sampling) #> Chain 3:  #> Chain 3:  Elapsed Time: 0.056 seconds (Warm-up) #> Chain 3:                0.063 seconds (Sampling) #> Chain 3:                0.119 seconds (Total) #> Chain 3:  #>  #> SAMPLING FOR MODEL 'continuous' NOW (CHAIN 4). #> Chain 4:  #> Chain 4: Gradient evaluation took 1.1e-05 seconds #> Chain 4: 1000 transitions using 10 leapfrog steps per transition would take 0.11 seconds. #> Chain 4: Adjust your expectations accordingly! #> Chain 4:  #> Chain 4:  #> Chain 4: Iteration:    1 / 2000 [  0%]  (Warmup) #> Chain 4: Iteration:  200 / 2000 [ 10%]  (Warmup) #> Chain 4: Iteration:  400 / 2000 [ 20%]  (Warmup) #> Chain 4: Iteration:  600 / 2000 [ 30%]  (Warmup) #> Chain 4: Iteration:  800 / 2000 [ 40%]  (Warmup) #> Chain 4: Iteration: 1000 / 2000 [ 50%]  (Warmup) #> Chain 4: Iteration: 1001 / 2000 [ 50%]  (Sampling) #> Chain 4: Iteration: 1200 / 2000 [ 60%]  (Sampling) #> Chain 4: Iteration: 1400 / 2000 [ 70%]  (Sampling) #> Chain 4: Iteration: 1600 / 2000 [ 80%]  (Sampling) #> Chain 4: Iteration: 1800 / 2000 [ 90%]  (Sampling) #> Chain 4: Iteration: 2000 / 2000 [100%]  (Sampling) #> Chain 4:  #> Chain 4:  Elapsed Time: 0.058 seconds (Warm-up) #> Chain 4:                0.053 seconds (Sampling) #> Chain 4:                0.111 seconds (Total) #> Chain 4:  point_estimate(model, centrality = \"all\", dispersion = TRUE) #> Point Estimate  #>  #> Parameter   | Median |  MAD |  Mean |   SD |   MAP #> -------------------------------------------------- #> (Intercept) |  39.65 | 1.86 | 39.69 | 1.84 | 39.57 #> wt          |  -3.19 | 0.81 | -3.18 | 0.82 | -3.19 #> cyl         |  -1.51 | 0.44 | -1.52 | 0.44 | -1.54 point_estimate(model, centrality = c(\"median\", \"MAP\")) #> Point Estimate  #>  #> Parameter   | Median |   MAP #> ---------------------------- #> (Intercept) |  39.65 | 39.57 #> wt          |  -3.19 | -3.19 #> cyl         |  -1.51 | -1.54   # emmeans estimates # ----------------------------------------------- library(emmeans) point_estimate(emtrends(model, ~1, \"wt\"), centrality = c(\"median\", \"MAP\")) #> Warning: Model has 0 prior weights, but we recovered 32 rows of data. #> So prior weights were ignored. #> Point Estimate #>  #> Parameter | Median |   MAP #> -------------------------- #> overall   |  -3.19 | -3.19  # brms models # ----------------------------------------------- library(brms) model <- brms::brm(mpg ~ wt + cyl, data = mtcars) #> Compiling Stan program... #> Start sampling #>  #> SAMPLING FOR MODEL '2d19b3a372313df641edf05db5e9f303' NOW (CHAIN 1). #> Chain 1:  #> Chain 1: Gradient evaluation took 1.1e-05 seconds #> Chain 1: 1000 transitions using 10 leapfrog steps per transition would take 0.11 seconds. #> Chain 1: Adjust your expectations accordingly! #> Chain 1:  #> Chain 1:  #> Chain 1: Iteration:    1 / 2000 [  0%]  (Warmup) #> Chain 1: Iteration:  200 / 2000 [ 10%]  (Warmup) #> Chain 1: Iteration:  400 / 2000 [ 20%]  (Warmup) #> Chain 1: Iteration:  600 / 2000 [ 30%]  (Warmup) #> Chain 1: Iteration:  800 / 2000 [ 40%]  (Warmup) #> Chain 1: Iteration: 1000 / 2000 [ 50%]  (Warmup) #> Chain 1: Iteration: 1001 / 2000 [ 50%]  (Sampling) #> Chain 1: Iteration: 1200 / 2000 [ 60%]  (Sampling) #> Chain 1: Iteration: 1400 / 2000 [ 70%]  (Sampling) #> Chain 1: Iteration: 1600 / 2000 [ 80%]  (Sampling) #> Chain 1: Iteration: 1800 / 2000 [ 90%]  (Sampling) #> Chain 1: Iteration: 2000 / 2000 [100%]  (Sampling) #> Chain 1:  #> Chain 1:  Elapsed Time: 0.028798 seconds (Warm-up) #> Chain 1:                0.025042 seconds (Sampling) #> Chain 1:                0.05384 seconds (Total) #> Chain 1:  #>  #> SAMPLING FOR MODEL '2d19b3a372313df641edf05db5e9f303' NOW (CHAIN 2). #> Chain 2:  #> Chain 2: Gradient evaluation took 7e-06 seconds #> Chain 2: 1000 transitions using 10 leapfrog steps per transition would take 0.07 seconds. #> Chain 2: Adjust your expectations accordingly! #> Chain 2:  #> Chain 2:  #> Chain 2: Iteration:    1 / 2000 [  0%]  (Warmup) #> Chain 2: Iteration:  200 / 2000 [ 10%]  (Warmup) #> Chain 2: Iteration:  400 / 2000 [ 20%]  (Warmup) #> Chain 2: Iteration:  600 / 2000 [ 30%]  (Warmup) #> Chain 2: Iteration:  800 / 2000 [ 40%]  (Warmup) #> Chain 2: Iteration: 1000 / 2000 [ 50%]  (Warmup) #> Chain 2: Iteration: 1001 / 2000 [ 50%]  (Sampling) #> Chain 2: Iteration: 1200 / 2000 [ 60%]  (Sampling) #> Chain 2: Iteration: 1400 / 2000 [ 70%]  (Sampling) #> Chain 2: Iteration: 1600 / 2000 [ 80%]  (Sampling) #> Chain 2: Iteration: 1800 / 2000 [ 90%]  (Sampling) #> Chain 2: Iteration: 2000 / 2000 [100%]  (Sampling) #> Chain 2:  #> Chain 2:  Elapsed Time: 0.030106 seconds (Warm-up) #> Chain 2:                0.026625 seconds (Sampling) #> Chain 2:                0.056731 seconds (Total) #> Chain 2:  #>  #> SAMPLING FOR MODEL '2d19b3a372313df641edf05db5e9f303' NOW (CHAIN 3). #> Chain 3:  #> Chain 3: Gradient evaluation took 6e-06 seconds #> Chain 3: 1000 transitions using 10 leapfrog steps per transition would take 0.06 seconds. #> Chain 3: Adjust your expectations accordingly! #> Chain 3:  #> Chain 3:  #> Chain 3: Iteration:    1 / 2000 [  0%]  (Warmup) #> Chain 3: Iteration:  200 / 2000 [ 10%]  (Warmup) #> Chain 3: Iteration:  400 / 2000 [ 20%]  (Warmup) #> Chain 3: Iteration:  600 / 2000 [ 30%]  (Warmup) #> Chain 3: Iteration:  800 / 2000 [ 40%]  (Warmup) #> Chain 3: Iteration: 1000 / 2000 [ 50%]  (Warmup) #> Chain 3: Iteration: 1001 / 2000 [ 50%]  (Sampling) #> Chain 3: Iteration: 1200 / 2000 [ 60%]  (Sampling) #> Chain 3: Iteration: 1400 / 2000 [ 70%]  (Sampling) #> Chain 3: Iteration: 1600 / 2000 [ 80%]  (Sampling) #> Chain 3: Iteration: 1800 / 2000 [ 90%]  (Sampling) #> Chain 3: Iteration: 2000 / 2000 [100%]  (Sampling) #> Chain 3:  #> Chain 3:  Elapsed Time: 0.026705 seconds (Warm-up) #> Chain 3:                0.027565 seconds (Sampling) #> Chain 3:                0.05427 seconds (Total) #> Chain 3:  #>  #> SAMPLING FOR MODEL '2d19b3a372313df641edf05db5e9f303' NOW (CHAIN 4). #> Chain 4:  #> Chain 4: Gradient evaluation took 6e-06 seconds #> Chain 4: 1000 transitions using 10 leapfrog steps per transition would take 0.06 seconds. #> Chain 4: Adjust your expectations accordingly! #> Chain 4:  #> Chain 4:  #> Chain 4: Iteration:    1 / 2000 [  0%]  (Warmup) #> Chain 4: Iteration:  200 / 2000 [ 10%]  (Warmup) #> Chain 4: Iteration:  400 / 2000 [ 20%]  (Warmup) #> Chain 4: Iteration:  600 / 2000 [ 30%]  (Warmup) #> Chain 4: Iteration:  800 / 2000 [ 40%]  (Warmup) #> Chain 4: Iteration: 1000 / 2000 [ 50%]  (Warmup) #> Chain 4: Iteration: 1001 / 2000 [ 50%]  (Sampling) #> Chain 4: Iteration: 1200 / 2000 [ 60%]  (Sampling) #> Chain 4: Iteration: 1400 / 2000 [ 70%]  (Sampling) #> Chain 4: Iteration: 1600 / 2000 [ 80%]  (Sampling) #> Chain 4: Iteration: 1800 / 2000 [ 90%]  (Sampling) #> Chain 4: Iteration: 2000 / 2000 [100%]  (Sampling) #> Chain 4:  #> Chain 4:  Elapsed Time: 0.027375 seconds (Warm-up) #> Chain 4:                0.034038 seconds (Sampling) #> Chain 4:                0.061413 seconds (Total) #> Chain 4:  point_estimate(model, centrality = \"all\", dispersion = TRUE) #> Point Estimate  #>  #> Parameter   | Median |  MAD |  Mean |   SD |   MAP #> -------------------------------------------------- #> (Intercept) |  39.66 | 1.73 | 39.69 | 1.80 | 39.44 #> wt          |  -3.20 | 0.78 | -3.20 | 0.79 | -3.18 #> cyl         |  -1.50 | 0.43 | -1.50 | 0.44 | -1.47 point_estimate(model, centrality = c(\"median\", \"MAP\")) #> Point Estimate  #>  #> Parameter   | Median |   MAP #> ---------------------------- #> (Intercept) |  39.66 | 39.44 #> wt          |  -3.20 | -3.18 #> cyl         |  -1.50 | -1.47  # BayesFactor objects # ----------------------------------------------- library(BayesFactor) bf <- ttestBF(x = rnorm(100, 1, 1)) point_estimate(bf, centrality = \"all\", dispersion = TRUE) #> Point Estimate #>  #> Parameter  | Median |  MAD | Mean |   SD |  MAP #> ----------------------------------------------- #> Difference |   1.03 | 0.11 | 1.03 | 0.11 | 1.02 point_estimate(bf, centrality = c(\"median\", \"MAP\")) #> Point Estimate #>  #> Parameter  | Median |  MAP #> -------------------------- #> Difference |   1.03 | 1.04 # }"},{"path":"https://easystats.github.io/bayestestR/reference/reexports.html","id":null,"dir":"Reference","previous_headings":"","what":"Objects exported from other packages — reexports","title":"Objects exported from other packages — reexports","text":"objects imported packages. Follow links see documentation. insight print_html, print_md","code":""},{"path":"https://easystats.github.io/bayestestR/reference/reshape_iterations.html","id":null,"dir":"Reference","previous_headings":"","what":"Reshape estimations with multiple iterations (draws) to long format — reshape_iterations","title":"Reshape estimations with multiple iterations (draws) to long format — reshape_iterations","text":"Reshape wide data.frame iterations (posterior draws bootsrapped samples) columns long format. Instead iterations columns (e.g., iter_1, iter_2, ...), return 3 columns \\*_index (previous index row), \\*_group (iteration number) \\*_value (value said iteration).","code":""},{"path":"https://easystats.github.io/bayestestR/reference/reshape_iterations.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reshape estimations with multiple iterations (draws) to long format — reshape_iterations","text":"","code":"reshape_iterations(x, prefix = c(\"draw\", \"iter\", \"iteration\", \"sim\"))  reshape_draws(x, prefix = c(\"draw\", \"iter\", \"iteration\", \"sim\"))"},{"path":"https://easystats.github.io/bayestestR/reference/reshape_iterations.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reshape estimations with multiple iterations (draws) to long format — reshape_iterations","text":"x data.frame containing posterior draws obtained estimate_response estimate_link. prefix prefix draws (instance, \"iter_\" columns named iter_1, iter_2, iter_3). one provided, search first one matches.","code":""},{"path":"https://easystats.github.io/bayestestR/reference/reshape_iterations.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reshape estimations with multiple iterations (draws) to long format — reshape_iterations","text":"Data frame reshaped draws long format.","code":""},{"path":"https://easystats.github.io/bayestestR/reference/reshape_iterations.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Reshape estimations with multiple iterations (draws) to long format — reshape_iterations","text":"","code":"# \\donttest{ if (require(\"rstanarm\")) {   model <- stan_glm(mpg ~ am, data = mtcars, refresh = 0)   draws <- insight::get_predicted(model)   long_format <- reshape_iterations(draws)   head(long_format) } #>   Predicted iter_index iter_group iter_value #> 1  24.38890          1          1   24.05244 #> 2  24.38890          2          1   24.05244 #> 3  24.38890          3          1   24.05244 #> 4  17.14047          4          1   17.27725 #> 5  17.14047          5          1   17.27725 #> 6  17.14047          6          1   17.27725 # }"},{"path":"https://easystats.github.io/bayestestR/reference/rope.html","id":null,"dir":"Reference","previous_headings":"","what":"Region of Practical Equivalence (ROPE) — rope","title":"Region of Practical Equivalence (ROPE) — rope","text":"Compute proportion HDI (default 89% HDI) posterior distribution lies within region practical equivalence.","code":""},{"path":"https://easystats.github.io/bayestestR/reference/rope.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Region of Practical Equivalence (ROPE) — rope","text":"","code":"rope(x, ...)  # S3 method for numeric rope(x, range = \"default\", ci = 0.95, ci_method = \"ETI\", verbose = TRUE, ...)  # S3 method for stanreg rope(   x,   range = \"default\",   ci = 0.95,   ci_method = \"ETI\",   effects = c(\"fixed\", \"random\", \"all\"),   component = c(\"location\", \"all\", \"conditional\", \"smooth_terms\", \"sigma\",     \"distributional\", \"auxiliary\"),   parameters = NULL,   verbose = TRUE,   ... )  # S3 method for brmsfit rope(   x,   range = \"default\",   ci = 0.95,   ci_method = \"ETI\",   effects = c(\"fixed\", \"random\", \"all\"),   component = c(\"conditional\", \"zi\", \"zero_inflated\", \"all\"),   parameters = NULL,   verbose = TRUE,   ... )"},{"path":"https://easystats.github.io/bayestestR/reference/rope.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Region of Practical Equivalence (ROPE) — rope","text":"x Vector representing posterior distribution. Can also stanreg brmsfit model. ... Currently used. range ROPE's lower higher bounds. \"default\" depending number outcome variables vector list. models one response, range vector length two (e.g., c(-0.1, 0.1)). multivariate models, range list numeric vectors response variable. Vector names correspond name response variables. \"default\" input vector, range set c(-0.1, 0.1). \"default\" input Bayesian model, rope_range() used. ci Credible Interval (CI) probability, corresponding proportion HDI, use percentage ROPE. ci_method type interval use quantify percentage ROPE. Can 'HDI' (default) 'ETI'. See ci(). verbose Toggle warnings. effects results fixed effects, random effects returned? applies mixed models. May abbreviated. component results parameters, parameters conditional model zero-inflated part model returned? May abbreviated. applies brms-models. parameters Regular expression pattern describes parameters returned. Meta-parameters (like lp__ prior_) filtered default, parameters typically appear summary() returned. Use parameters select specific parameters output.","code":""},{"path":[]},{"path":"https://easystats.github.io/bayestestR/reference/rope.html","id":"rope","dir":"Reference","previous_headings":"","what":"ROPE","title":"Region of Practical Equivalence (ROPE) — rope","text":"Statistically, probability posterior distribution different 0 make much sense (probability single value null hypothesis continuous distribution 0). Therefore, idea underlining ROPE let user define area around null value enclosing values equivalent null value practical purposes (Kruschke 2010, 2011, 2014).  Kruschke (2018) suggests null value set, default, -0.1 0.1 range standardized parameter (negligible effect size according Cohen, 1988). generalized: instance, linear models, ROPE set 0 +/- .1 * sd(y). ROPE range can automatically computed models using rope_range function.  Kruschke (2010, 2011, 2014) suggests using proportion  95% (89%, considered stable) HDI falls within ROPE index \"null-hypothesis\" testing (understood Bayesian framework, see equivalence_test()).","code":""},{"path":"https://easystats.github.io/bayestestR/reference/rope.html","id":"sensitivity-to-parameter-s-scale","dir":"Reference","previous_headings":"","what":"Sensitivity to parameter's scale","title":"Region of Practical Equivalence (ROPE) — rope","text":"important consider unit (.e., scale) predictors using index based ROPE, correct interpretation ROPE representing region practical equivalence zero dependent scale predictors. Indeed, percentage ROPE depend unit parameter. words, ROPE represents fixed portion response's scale, proximity coefficient depends scale coefficient .","code":""},{"path":"https://easystats.github.io/bayestestR/reference/rope.html","id":"multicollinearity-non-independent-covariates","dir":"Reference","previous_headings":"","what":"Multicollinearity: Non-independent covariates","title":"Region of Practical Equivalence (ROPE) — rope","text":"parameters show strong correlations, .e. covariates independent, joint parameter distributions may shift towards away ROPE. Collinearity invalidates ROPE hypothesis testing based univariate marginals, probabilities conditional independence. problematic parameters partial overlap ROPE region. case collinearity, (joint) distributions parameters may either get increased decreased ROPE, means inferences based rope() inappropriate (Kruschke 2014, 340f). rope() performs simple check pairwise correlations parameters, can collinearity two variables, first step check assumptions hypothesis testing look different pair plots. even sophisticated check projection predictive variable selection (Piironen Vehtari 2017).","code":""},{"path":"https://easystats.github.io/bayestestR/reference/rope.html","id":"strengths-and-limitations","dir":"Reference","previous_headings":"","what":"Strengths and Limitations","title":"Region of Practical Equivalence (ROPE) — rope","text":"Strengths: Provides information related practical relevance effects. Limitations: ROPE range needs arbitrarily defined. Sensitive scale (unit) predictors. sensitive highly significant effects.","code":""},{"path":"https://easystats.github.io/bayestestR/reference/rope.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Region of Practical Equivalence (ROPE) — rope","text":"also plot()-method implemented see-package.","code":""},{"path":"https://easystats.github.io/bayestestR/reference/rope.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Region of Practical Equivalence (ROPE) — rope","text":"Cohen, J. (1988). Statistical power analysis behavioural sciences. Kruschke, J. K. (2010). believe: Bayesian methods data analysis. Trends cognitive sciences, 14(7), 293-300. doi:10.1016/j.tics.2010.05.001 . Kruschke, J. K. (2011). Bayesian assessment null values via parameter estimation model comparison. Perspectives Psychological Science, 6(3), 299-312. doi:10.1177/1745691611406925 . Kruschke, J. K. (2014). Bayesian data analysis: tutorial R, JAGS, Stan. Academic Press. doi:10.1177/2515245918771304 . Kruschke, J. K. (2018). Rejecting accepting parameter values Bayesian estimation. Advances Methods Practices Psychological Science, 1(2), 270-280. doi:10.1177/2515245918771304 . Makowski D, Ben-Shachar MS, Chen SHA, Lüdecke D (2019) Indices Effect Existence Significance Bayesian Framework. Frontiers Psychology 2019;10:2767. doi:10.3389/fpsyg.2019.02767 Piironen, J., & Vehtari, . (2017). Comparison Bayesian predictive methods model selection. Statistics Computing, 27(3), 711–735. doi:10.1007/s11222-016-9649-y","code":""},{"path":"https://easystats.github.io/bayestestR/reference/rope.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Region of Practical Equivalence (ROPE) — rope","text":"","code":"library(bayestestR)  rope(x = rnorm(1000, 0, 0.01), range = c(-0.1, 0.1)) #> # Proportion of samples inside the ROPE [-0.10, 0.10]: #>  #> inside ROPE #> ----------- #> 100.00 %    #>  rope(x = rnorm(1000, 0, 1), range = c(-0.1, 0.1)) #> # Proportion of samples inside the ROPE [-0.10, 0.10]: #>  #> inside ROPE #> ----------- #> 8.32 %      #>  rope(x = rnorm(1000, 1, 0.01), range = c(-0.1, 0.1)) #> # Proportion of samples inside the ROPE [-0.10, 0.10]: #>  #> inside ROPE #> ----------- #> 0.00 %      #>  rope(x = rnorm(1000, 1, 1), ci = c(.90, .95)) #> # Proportions of samples inside the ROPE [-0.10, 0.10]: #>  #> ROPE for the 90% HDI: #>  #> inside ROPE #> ----------- #> 4.89 %      #>  #>  #> ROPE for the 95% HDI: #>  #> inside ROPE #> ----------- #> 4.63 %      #>  #>  # \\dontrun{ library(rstanarm) model <- stan_glm(mpg ~ wt + gear, data = mtcars, chains = 2, iter = 200, refresh = 0) #> Warning: Bulk Effective Samples Size (ESS) is too low, indicating posterior means and medians may be unreliable. #> Running the chains for more iterations may help. See #> https://mc-stan.org/misc/warnings.html#bulk-ess #> Warning: Tail Effective Samples Size (ESS) is too low, indicating posterior variances and tail quantiles may be unreliable. #> Running the chains for more iterations may help. See #> https://mc-stan.org/misc/warnings.html#tail-ess rope(model) #> # Proportion of samples inside the ROPE [-0.60, 0.60]: #>  #> Parameter   | inside ROPE #> ------------------------- #> (Intercept) |      0.00 % #> wt          |      0.00 % #> gear        |     43.68 % #>  rope(model, ci = c(.90, .95)) #> # Proportions of samples inside the ROPE [-0.60, 0.60]: #>  #> ROPE for the 90% HDI: #>  #> Parameter   | inside ROPE #> ------------------------- #> (Intercept) |      0.00 % #> wt          |      0.00 % #> gear        |     46.11 % #>  #>  #> ROPE for the 95% HDI: #>  #> Parameter   | inside ROPE #> ------------------------- #> (Intercept) |      0.00 % #> wt          |      0.00 % #> gear        |     43.68 % #>  #>   library(emmeans) rope(emtrends(model, ~1, \"wt\"), ci = c(.90, .95)) #> Warning: Model has 0 prior weights, but we recovered 32 rows of data. #> So prior weights were ignored. #> # Proportions of samples inside the ROPE [-0.10, 0.10]: #>  #> ROPE for the 90% HDI: #>  #> Parameter | inside ROPE #> ----------------------- #> overall   |      0.00 % #>  #>  #> ROPE for the 95% HDI: #>  #> Parameter | inside ROPE #> ----------------------- #> overall   |      0.00 % #>  #>   library(brms) model <- brms::brm(mpg ~ wt + cyl, data = mtcars) #> Compiling Stan program... #> Start sampling #>  #> SAMPLING FOR MODEL '2d19b3a372313df641edf05db5e9f303' NOW (CHAIN 1). #> Chain 1:  #> Chain 1: Gradient evaluation took 1e-05 seconds #> Chain 1: 1000 transitions using 10 leapfrog steps per transition would take 0.1 seconds. #> Chain 1: Adjust your expectations accordingly! #> Chain 1:  #> Chain 1:  #> Chain 1: Iteration:    1 / 2000 [  0%]  (Warmup) #> Chain 1: Iteration:  200 / 2000 [ 10%]  (Warmup) #> Chain 1: Iteration:  400 / 2000 [ 20%]  (Warmup) #> Chain 1: Iteration:  600 / 2000 [ 30%]  (Warmup) #> Chain 1: Iteration:  800 / 2000 [ 40%]  (Warmup) #> Chain 1: Iteration: 1000 / 2000 [ 50%]  (Warmup) #> Chain 1: Iteration: 1001 / 2000 [ 50%]  (Sampling) #> Chain 1: Iteration: 1200 / 2000 [ 60%]  (Sampling) #> Chain 1: Iteration: 1400 / 2000 [ 70%]  (Sampling) #> Chain 1: Iteration: 1600 / 2000 [ 80%]  (Sampling) #> Chain 1: Iteration: 1800 / 2000 [ 90%]  (Sampling) #> Chain 1: Iteration: 2000 / 2000 [100%]  (Sampling) #> Chain 1:  #> Chain 1:  Elapsed Time: 0.029131 seconds (Warm-up) #> Chain 1:                0.02529 seconds (Sampling) #> Chain 1:                0.054421 seconds (Total) #> Chain 1:  #>  #> SAMPLING FOR MODEL '2d19b3a372313df641edf05db5e9f303' NOW (CHAIN 2). #> Chain 2:  #> Chain 2: Gradient evaluation took 7e-06 seconds #> Chain 2: 1000 transitions using 10 leapfrog steps per transition would take 0.07 seconds. #> Chain 2: Adjust your expectations accordingly! #> Chain 2:  #> Chain 2:  #> Chain 2: Iteration:    1 / 2000 [  0%]  (Warmup) #> Chain 2: Iteration:  200 / 2000 [ 10%]  (Warmup) #> Chain 2: Iteration:  400 / 2000 [ 20%]  (Warmup) #> Chain 2: Iteration:  600 / 2000 [ 30%]  (Warmup) #> Chain 2: Iteration:  800 / 2000 [ 40%]  (Warmup) #> Chain 2: Iteration: 1000 / 2000 [ 50%]  (Warmup) #> Chain 2: Iteration: 1001 / 2000 [ 50%]  (Sampling) #> Chain 2: Iteration: 1200 / 2000 [ 60%]  (Sampling) #> Chain 2: Iteration: 1400 / 2000 [ 70%]  (Sampling) #> Chain 2: Iteration: 1600 / 2000 [ 80%]  (Sampling) #> Chain 2: Iteration: 1800 / 2000 [ 90%]  (Sampling) #> Chain 2: Iteration: 2000 / 2000 [100%]  (Sampling) #> Chain 2:  #> Chain 2:  Elapsed Time: 0.027314 seconds (Warm-up) #> Chain 2:                0.029079 seconds (Sampling) #> Chain 2:                0.056393 seconds (Total) #> Chain 2:  #>  #> SAMPLING FOR MODEL '2d19b3a372313df641edf05db5e9f303' NOW (CHAIN 3). #> Chain 3:  #> Chain 3: Gradient evaluation took 6e-06 seconds #> Chain 3: 1000 transitions using 10 leapfrog steps per transition would take 0.06 seconds. #> Chain 3: Adjust your expectations accordingly! #> Chain 3:  #> Chain 3:  #> Chain 3: Iteration:    1 / 2000 [  0%]  (Warmup) #> Chain 3: Iteration:  200 / 2000 [ 10%]  (Warmup) #> Chain 3: Iteration:  400 / 2000 [ 20%]  (Warmup) #> Chain 3: Iteration:  600 / 2000 [ 30%]  (Warmup) #> Chain 3: Iteration:  800 / 2000 [ 40%]  (Warmup) #> Chain 3: Iteration: 1000 / 2000 [ 50%]  (Warmup) #> Chain 3: Iteration: 1001 / 2000 [ 50%]  (Sampling) #> Chain 3: Iteration: 1200 / 2000 [ 60%]  (Sampling) #> Chain 3: Iteration: 1400 / 2000 [ 70%]  (Sampling) #> Chain 3: Iteration: 1600 / 2000 [ 80%]  (Sampling) #> Chain 3: Iteration: 1800 / 2000 [ 90%]  (Sampling) #> Chain 3: Iteration: 2000 / 2000 [100%]  (Sampling) #> Chain 3:  #> Chain 3:  Elapsed Time: 0.026713 seconds (Warm-up) #> Chain 3:                0.022825 seconds (Sampling) #> Chain 3:                0.049538 seconds (Total) #> Chain 3:  #>  #> SAMPLING FOR MODEL '2d19b3a372313df641edf05db5e9f303' NOW (CHAIN 4). #> Chain 4:  #> Chain 4: Gradient evaluation took 7e-06 seconds #> Chain 4: 1000 transitions using 10 leapfrog steps per transition would take 0.07 seconds. #> Chain 4: Adjust your expectations accordingly! #> Chain 4:  #> Chain 4:  #> Chain 4: Iteration:    1 / 2000 [  0%]  (Warmup) #> Chain 4: Iteration:  200 / 2000 [ 10%]  (Warmup) #> Chain 4: Iteration:  400 / 2000 [ 20%]  (Warmup) #> Chain 4: Iteration:  600 / 2000 [ 30%]  (Warmup) #> Chain 4: Iteration:  800 / 2000 [ 40%]  (Warmup) #> Chain 4: Iteration: 1000 / 2000 [ 50%]  (Warmup) #> Chain 4: Iteration: 1001 / 2000 [ 50%]  (Sampling) #> Chain 4: Iteration: 1200 / 2000 [ 60%]  (Sampling) #> Chain 4: Iteration: 1400 / 2000 [ 70%]  (Sampling) #> Chain 4: Iteration: 1600 / 2000 [ 80%]  (Sampling) #> Chain 4: Iteration: 1800 / 2000 [ 90%]  (Sampling) #> Chain 4: Iteration: 2000 / 2000 [100%]  (Sampling) #> Chain 4:  #> Chain 4:  Elapsed Time: 0.027597 seconds (Warm-up) #> Chain 4:                0.031094 seconds (Sampling) #> Chain 4:                0.058691 seconds (Total) #> Chain 4:  rope(model) #> Possible multicollinearity between b_cyl and b_wt (r = 0.78). This might lead to inappropriate results. See 'Details' in '?rope'. #> # Proportion of samples inside the ROPE [-0.60, 0.60]: #>  #> Parameter | inside ROPE #> ----------------------- #> Intercept |      0.00 % #> wt        |      0.00 % #> cyl       |      0.00 % #>  rope(model, ci = c(.90, .95)) #> Possible multicollinearity between b_cyl and b_wt (r = 0.78). This might lead to inappropriate results. See 'Details' in '?rope'. #> # Proportions of samples inside the ROPE [-0.60, 0.60]: #>  #> ROPE for the 90% HDI: #>  #> Parameter | inside ROPE #> ----------------------- #> Intercept |      0.00 % #> wt        |      0.00 % #> cyl       |      0.00 % #>  #>  #> ROPE for the 95% HDI: #>  #> Parameter | inside ROPE #> ----------------------- #> Intercept |      0.00 % #> wt        |      0.00 % #> cyl       |      0.00 % #>  #>   library(brms) model <- brms::brm(brms::mvbind(mpg, disp) ~ wt + cyl, data = mtcars) #> Setting 'rescor' to TRUE by default for this model #> Warning: In the future, 'rescor' will be set to FALSE by default for all models. It is thus recommended to explicitely set 'rescor' via 'set_rescor' instead of using the default. #> Compiling Stan program... #> Start sampling #>  #> SAMPLING FOR MODEL '9d9150ff544e4b0191bf4201f9c63f72' NOW (CHAIN 1). #> Chain 1:  #> Chain 1: Gradient evaluation took 5.8e-05 seconds #> Chain 1: 1000 transitions using 10 leapfrog steps per transition would take 0.58 seconds. #> Chain 1: Adjust your expectations accordingly! #> Chain 1:  #> Chain 1:  #> Chain 1: Iteration:    1 / 2000 [  0%]  (Warmup) #> Chain 1: Iteration:  200 / 2000 [ 10%]  (Warmup) #> Chain 1: Iteration:  400 / 2000 [ 20%]  (Warmup) #> Chain 1: Iteration:  600 / 2000 [ 30%]  (Warmup) #> Chain 1: Iteration:  800 / 2000 [ 40%]  (Warmup) #> Chain 1: Iteration: 1000 / 2000 [ 50%]  (Warmup) #> Chain 1: Iteration: 1001 / 2000 [ 50%]  (Sampling) #> Chain 1: Iteration: 1200 / 2000 [ 60%]  (Sampling) #> Chain 1: Iteration: 1400 / 2000 [ 70%]  (Sampling) #> Chain 1: Iteration: 1600 / 2000 [ 80%]  (Sampling) #> Chain 1: Iteration: 1800 / 2000 [ 90%]  (Sampling) #> Chain 1: Iteration: 2000 / 2000 [100%]  (Sampling) #> Chain 1:  #> Chain 1:  Elapsed Time: 0.670941 seconds (Warm-up) #> Chain 1:                0.314984 seconds (Sampling) #> Chain 1:                0.985925 seconds (Total) #> Chain 1:  #>  #> SAMPLING FOR MODEL '9d9150ff544e4b0191bf4201f9c63f72' NOW (CHAIN 2). #> Chain 2:  #> Chain 2: Gradient evaluation took 4.5e-05 seconds #> Chain 2: 1000 transitions using 10 leapfrog steps per transition would take 0.45 seconds. #> Chain 2: Adjust your expectations accordingly! #> Chain 2:  #> Chain 2:  #> Chain 2: Iteration:    1 / 2000 [  0%]  (Warmup) #> Chain 2: Iteration:  200 / 2000 [ 10%]  (Warmup) #> Chain 2: Iteration:  400 / 2000 [ 20%]  (Warmup) #> Chain 2: Iteration:  600 / 2000 [ 30%]  (Warmup) #> Chain 2: Iteration:  800 / 2000 [ 40%]  (Warmup) #> Chain 2: Iteration: 1000 / 2000 [ 50%]  (Warmup) #> Chain 2: Iteration: 1001 / 2000 [ 50%]  (Sampling) #> Chain 2: Iteration: 1200 / 2000 [ 60%]  (Sampling) #> Chain 2: Iteration: 1400 / 2000 [ 70%]  (Sampling) #> Chain 2: Iteration: 1600 / 2000 [ 80%]  (Sampling) #> Chain 2: Iteration: 1800 / 2000 [ 90%]  (Sampling) #> Chain 2: Iteration: 2000 / 2000 [100%]  (Sampling) #> Chain 2:  #> Chain 2:  Elapsed Time: 0.572161 seconds (Warm-up) #> Chain 2:                0.331896 seconds (Sampling) #> Chain 2:                0.904057 seconds (Total) #> Chain 2:  #>  #> SAMPLING FOR MODEL '9d9150ff544e4b0191bf4201f9c63f72' NOW (CHAIN 3). #> Chain 3:  #> Chain 3: Gradient evaluation took 4.2e-05 seconds #> Chain 3: 1000 transitions using 10 leapfrog steps per transition would take 0.42 seconds. #> Chain 3: Adjust your expectations accordingly! #> Chain 3:  #> Chain 3:  #> Chain 3: Iteration:    1 / 2000 [  0%]  (Warmup) #> Chain 3: Iteration:  200 / 2000 [ 10%]  (Warmup) #> Chain 3: Iteration:  400 / 2000 [ 20%]  (Warmup) #> Chain 3: Iteration:  600 / 2000 [ 30%]  (Warmup) #> Chain 3: Iteration:  800 / 2000 [ 40%]  (Warmup) #> Chain 3: Iteration: 1000 / 2000 [ 50%]  (Warmup) #> Chain 3: Iteration: 1001 / 2000 [ 50%]  (Sampling) #> Chain 3: Iteration: 1200 / 2000 [ 60%]  (Sampling) #> Chain 3: Iteration: 1400 / 2000 [ 70%]  (Sampling) #> Chain 3: Iteration: 1600 / 2000 [ 80%]  (Sampling) #> Chain 3: Iteration: 1800 / 2000 [ 90%]  (Sampling) #> Chain 3: Iteration: 2000 / 2000 [100%]  (Sampling) #> Chain 3:  #> Chain 3:  Elapsed Time: 0.559946 seconds (Warm-up) #> Chain 3:                0.315277 seconds (Sampling) #> Chain 3:                0.875223 seconds (Total) #> Chain 3:  #>  #> SAMPLING FOR MODEL '9d9150ff544e4b0191bf4201f9c63f72' NOW (CHAIN 4). #> Chain 4:  #> Chain 4: Gradient evaluation took 4.2e-05 seconds #> Chain 4: 1000 transitions using 10 leapfrog steps per transition would take 0.42 seconds. #> Chain 4: Adjust your expectations accordingly! #> Chain 4:  #> Chain 4:  #> Chain 4: Iteration:    1 / 2000 [  0%]  (Warmup) #> Chain 4: Iteration:  200 / 2000 [ 10%]  (Warmup) #> Chain 4: Iteration:  400 / 2000 [ 20%]  (Warmup) #> Chain 4: Iteration:  600 / 2000 [ 30%]  (Warmup) #> Chain 4: Iteration:  800 / 2000 [ 40%]  (Warmup) #> Chain 4: Iteration: 1000 / 2000 [ 50%]  (Warmup) #> Chain 4: Iteration: 1001 / 2000 [ 50%]  (Sampling) #> Chain 4: Iteration: 1200 / 2000 [ 60%]  (Sampling) #> Chain 4: Iteration: 1400 / 2000 [ 70%]  (Sampling) #> Chain 4: Iteration: 1600 / 2000 [ 80%]  (Sampling) #> Chain 4: Iteration: 1800 / 2000 [ 90%]  (Sampling) #> Chain 4: Iteration: 2000 / 2000 [100%]  (Sampling) #> Chain 4:  #> Chain 4:  Elapsed Time: 0.578793 seconds (Warm-up) #> Chain 4:                0.316469 seconds (Sampling) #> Chain 4:                0.895262 seconds (Total) #> Chain 4:  rope(model) #> Possible multicollinearity between b_mpg_cyl and b_mpg_wt (r = 0.79), b_disp_cyl and b_disp_wt (r = 0.78). This might lead to inappropriate results. See 'Details' in '?rope'. #> # Proportion of samples inside the ROPE. #> ROPE with depends on outcome variable. #>  #> Parameter      | inside ROPE |      ROPE width #> ---------------------------------------------- #> mpg_Intercept  |      0.00 % |   [-0.60, 0.60] #> mpg_wt         |      0.00 % |   [-0.60, 0.60] #> mpg_cyl        |      0.00 % |   [-0.60, 0.60] #> disp_Intercept |      0.00 % | [-12.39, 12.39] #> disp_wt        |      0.00 % | [-12.39, 12.39] #> disp_cyl       |      0.00 % | [-12.39, 12.39] #>  rope(model, ci = c(.90, .95)) #> Possible multicollinearity between b_mpg_cyl and b_mpg_wt (r = 0.79), b_disp_cyl and b_disp_wt (r = 0.78). This might lead to inappropriate results. See 'Details' in '?rope'. #> # Proportions of samples inside the ROPE. #> ROPE with depends on outcome variable. #>  #> ROPE for the 90% HDI: #>  #> Parameter      | inside ROPE |      ROPE width #> ---------------------------------------------- #> mpg_Intercept  |      0.00 % |   [-0.60, 0.60] #> mpg_wt         |      0.00 % |   [-0.60, 0.60] #> mpg_cyl        |      0.00 % |   [-0.60, 0.60] #> disp_Intercept |      0.00 % | [-12.39, 12.39] #> disp_wt        |      0.00 % | [-12.39, 12.39] #> disp_cyl       |      0.00 % | [-12.39, 12.39] #>  #>  #> ROPE for the 95% HDI: #>  #> Parameter      | inside ROPE |      ROPE width #> ---------------------------------------------- #> mpg_Intercept  |      0.00 % |   [-0.60, 0.60] #> mpg_wt         |      0.00 % |   [-0.60, 0.60] #> mpg_cyl        |      0.00 % |   [-0.60, 0.60] #> disp_Intercept |      0.00 % | [-12.39, 12.39] #> disp_wt        |      0.00 % | [-12.39, 12.39] #> disp_cyl       |      0.00 % | [-12.39, 12.39] #>  #>   library(BayesFactor) bf <- ttestBF(x = rnorm(100, 1, 1)) rope(bf) #> # Proportion of samples inside the ROPE [-0.10, 0.10]: #>  #> Parameter  | inside ROPE #> ------------------------ #> Difference |      0.00 % #>  rope(bf, ci = c(.90, .95)) #> # Proportions of samples inside the ROPE [-0.10, 0.10]: #>  #> ROPE for the 90% HDI: #>  #> Parameter  | inside ROPE #> ------------------------ #> Difference |      0.00 % #>  #>  #> ROPE for the 95% HDI: #>  #> Parameter  | inside ROPE #> ------------------------ #> Difference |      0.00 % #>  #>  # }"},{"path":"https://easystats.github.io/bayestestR/reference/rope_range.html","id":null,"dir":"Reference","previous_headings":"","what":"Find Default Equivalence (ROPE) Region Bounds — rope_range","title":"Find Default Equivalence (ROPE) Region Bounds — rope_range","text":"function attempts automatically finding suitable \"default\" values Region Practical Equivalence (ROPE).","code":""},{"path":"https://easystats.github.io/bayestestR/reference/rope_range.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find Default Equivalence (ROPE) Region Bounds — rope_range","text":"","code":"rope_range(x, ...)  # S3 method for default rope_range(x, verbose = TRUE, ...)"},{"path":"https://easystats.github.io/bayestestR/reference/rope_range.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find Default Equivalence (ROPE) Region Bounds — rope_range","text":"x stanreg, brmsfit BFBayesFactor object. ... Currently used. verbose Toggle warnings.","code":""},{"path":"https://easystats.github.io/bayestestR/reference/rope_range.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Find Default Equivalence (ROPE) Region Bounds — rope_range","text":"Kruschke (2018) suggests region practical equivalence set, default, range -0.1 0.1 standardized parameter (negligible effect size according Cohen, 1988). linear models (lm), can generalised -0.1 * SDy, 0.1 *     SDy.","code":"\\item For **logistic models**, the parameters expressed in log odds ratio can be converted to standardized difference through the formula \\ifelse{html}{\\out{&pi;/&radic;(3)}}{\\eqn{\\pi/\\sqrt{3}}}, resulting in a range of `-0.18` to `0.18`.  \\item For other models with **binary outcome**, it is strongly recommended to manually specify the rope argument. Currently, the same default is applied that for logistic models.  \\item For models from **count data**, the residual variance is used. This is a rather experimental threshold and is probably often similar to `-0.1, 0.1`, but should be used with care!  \\item For **t-tests**, the standard deviation of the response is used, similarly to linear models (see above).  \\item For **correlations**, `-0.05, 0.05` is used, i.e., half the value of a negligible correlation as suggested by Cohen's (1988) rules of thumb.  \\item For all other models, `-0.1, 0.1` is used to determine the ROPE limits, but it is strongly advised to specify it manually."},{"path":"https://easystats.github.io/bayestestR/reference/rope_range.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Find Default Equivalence (ROPE) Region Bounds — rope_range","text":"Kruschke, J. K. (2018). Rejecting accepting parameter values Bayesian estimation. Advances Methods Practices Psychological Science, 1(2), 270-280. doi:10.1177/2515245918771304 .","code":""},{"path":"https://easystats.github.io/bayestestR/reference/rope_range.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find Default Equivalence (ROPE) Region Bounds — rope_range","text":"","code":"# \\dontrun{ if (require(\"rstanarm\")) {   model <- stan_glm(     mpg ~ wt + gear,     data = mtcars,     chains = 2,     iter = 200,     refresh = 0   )   rope_range(model)    model <- stan_glm(vs ~ mpg, data = mtcars, family = \"binomial\", refresh = 0)   rope_range(model) } #> Warning: The largest R-hat is 1.1, indicating chains have not mixed. #> Running the chains for more iterations may help. See #> https://mc-stan.org/misc/warnings.html#r-hat #> Warning: Bulk Effective Samples Size (ESS) is too low, indicating posterior means and medians may be unreliable. #> Running the chains for more iterations may help. See #> https://mc-stan.org/misc/warnings.html#bulk-ess #> Warning: Tail Effective Samples Size (ESS) is too low, indicating posterior variances and tail quantiles may be unreliable. #> Running the chains for more iterations may help. See #> https://mc-stan.org/misc/warnings.html#tail-ess #> Warning: Markov chains did not converge! Do not analyze results! #> [1] -0.1813799  0.1813799  if (require(\"brms\")) {   model <- brm(mpg ~ wt + cyl, data = mtcars)   rope_range(model) } #> Compiling Stan program... #> Start sampling #>  #> SAMPLING FOR MODEL '2d19b3a372313df641edf05db5e9f303' NOW (CHAIN 1). #> Chain 1:  #> Chain 1: Gradient evaluation took 1e-05 seconds #> Chain 1: 1000 transitions using 10 leapfrog steps per transition would take 0.1 seconds. #> Chain 1: Adjust your expectations accordingly! #> Chain 1:  #> Chain 1:  #> Chain 1: Iteration:    1 / 2000 [  0%]  (Warmup) #> Chain 1: Iteration:  200 / 2000 [ 10%]  (Warmup) #> Chain 1: Iteration:  400 / 2000 [ 20%]  (Warmup) #> Chain 1: Iteration:  600 / 2000 [ 30%]  (Warmup) #> Chain 1: Iteration:  800 / 2000 [ 40%]  (Warmup) #> Chain 1: Iteration: 1000 / 2000 [ 50%]  (Warmup) #> Chain 1: Iteration: 1001 / 2000 [ 50%]  (Sampling) #> Chain 1: Iteration: 1200 / 2000 [ 60%]  (Sampling) #> Chain 1: Iteration: 1400 / 2000 [ 70%]  (Sampling) #> Chain 1: Iteration: 1600 / 2000 [ 80%]  (Sampling) #> Chain 1: Iteration: 1800 / 2000 [ 90%]  (Sampling) #> Chain 1: Iteration: 2000 / 2000 [100%]  (Sampling) #> Chain 1:  #> Chain 1:  Elapsed Time: 0.028189 seconds (Warm-up) #> Chain 1:                0.029495 seconds (Sampling) #> Chain 1:                0.057684 seconds (Total) #> Chain 1:  #>  #> SAMPLING FOR MODEL '2d19b3a372313df641edf05db5e9f303' NOW (CHAIN 2). #> Chain 2:  #> Chain 2: Gradient evaluation took 7e-06 seconds #> Chain 2: 1000 transitions using 10 leapfrog steps per transition would take 0.07 seconds. #> Chain 2: Adjust your expectations accordingly! #> Chain 2:  #> Chain 2:  #> Chain 2: Iteration:    1 / 2000 [  0%]  (Warmup) #> Chain 2: Iteration:  200 / 2000 [ 10%]  (Warmup) #> Chain 2: Iteration:  400 / 2000 [ 20%]  (Warmup) #> Chain 2: Iteration:  600 / 2000 [ 30%]  (Warmup) #> Chain 2: Iteration:  800 / 2000 [ 40%]  (Warmup) #> Chain 2: Iteration: 1000 / 2000 [ 50%]  (Warmup) #> Chain 2: Iteration: 1001 / 2000 [ 50%]  (Sampling) #> Chain 2: Iteration: 1200 / 2000 [ 60%]  (Sampling) #> Chain 2: Iteration: 1400 / 2000 [ 70%]  (Sampling) #> Chain 2: Iteration: 1600 / 2000 [ 80%]  (Sampling) #> Chain 2: Iteration: 1800 / 2000 [ 90%]  (Sampling) #> Chain 2: Iteration: 2000 / 2000 [100%]  (Sampling) #> Chain 2:  #> Chain 2:  Elapsed Time: 0.02803 seconds (Warm-up) #> Chain 2:                0.029408 seconds (Sampling) #> Chain 2:                0.057438 seconds (Total) #> Chain 2:  #>  #> SAMPLING FOR MODEL '2d19b3a372313df641edf05db5e9f303' NOW (CHAIN 3). #> Chain 3:  #> Chain 3: Gradient evaluation took 7e-06 seconds #> Chain 3: 1000 transitions using 10 leapfrog steps per transition would take 0.07 seconds. #> Chain 3: Adjust your expectations accordingly! #> Chain 3:  #> Chain 3:  #> Chain 3: Iteration:    1 / 2000 [  0%]  (Warmup) #> Chain 3: Iteration:  200 / 2000 [ 10%]  (Warmup) #> Chain 3: Iteration:  400 / 2000 [ 20%]  (Warmup) #> Chain 3: Iteration:  600 / 2000 [ 30%]  (Warmup) #> Chain 3: Iteration:  800 / 2000 [ 40%]  (Warmup) #> Chain 3: Iteration: 1000 / 2000 [ 50%]  (Warmup) #> Chain 3: Iteration: 1001 / 2000 [ 50%]  (Sampling) #> Chain 3: Iteration: 1200 / 2000 [ 60%]  (Sampling) #> Chain 3: Iteration: 1400 / 2000 [ 70%]  (Sampling) #> Chain 3: Iteration: 1600 / 2000 [ 80%]  (Sampling) #> Chain 3: Iteration: 1800 / 2000 [ 90%]  (Sampling) #> Chain 3: Iteration: 2000 / 2000 [100%]  (Sampling) #> Chain 3:  #> Chain 3:  Elapsed Time: 0.027913 seconds (Warm-up) #> Chain 3:                0.026888 seconds (Sampling) #> Chain 3:                0.054801 seconds (Total) #> Chain 3:  #>  #> SAMPLING FOR MODEL '2d19b3a372313df641edf05db5e9f303' NOW (CHAIN 4). #> Chain 4:  #> Chain 4: Gradient evaluation took 6e-06 seconds #> Chain 4: 1000 transitions using 10 leapfrog steps per transition would take 0.06 seconds. #> Chain 4: Adjust your expectations accordingly! #> Chain 4:  #> Chain 4:  #> Chain 4: Iteration:    1 / 2000 [  0%]  (Warmup) #> Chain 4: Iteration:  200 / 2000 [ 10%]  (Warmup) #> Chain 4: Iteration:  400 / 2000 [ 20%]  (Warmup) #> Chain 4: Iteration:  600 / 2000 [ 30%]  (Warmup) #> Chain 4: Iteration:  800 / 2000 [ 40%]  (Warmup) #> Chain 4: Iteration: 1000 / 2000 [ 50%]  (Warmup) #> Chain 4: Iteration: 1001 / 2000 [ 50%]  (Sampling) #> Chain 4: Iteration: 1200 / 2000 [ 60%]  (Sampling) #> Chain 4: Iteration: 1400 / 2000 [ 70%]  (Sampling) #> Chain 4: Iteration: 1600 / 2000 [ 80%]  (Sampling) #> Chain 4: Iteration: 1800 / 2000 [ 90%]  (Sampling) #> Chain 4: Iteration: 2000 / 2000 [100%]  (Sampling) #> Chain 4:  #> Chain 4:  Elapsed Time: 0.029556 seconds (Warm-up) #> Chain 4:                0.026422 seconds (Sampling) #> Chain 4:                0.055978 seconds (Total) #> Chain 4:  #> [1] -0.6026948  0.6026948  if (require(\"BayesFactor\")) {   model <- ttestBF(mtcars[mtcars$vs == 1, \"mpg\"], mtcars[mtcars$vs == 0, \"mpg\"])   rope_range(model)    model <- lmBF(mpg ~ vs, data = mtcars)   rope_range(model) } #> [1] -0.6026948  0.6026948 # }"},{"path":"https://easystats.github.io/bayestestR/reference/sensitivity_to_prior.html","id":null,"dir":"Reference","previous_headings":"","what":"Sensitivity to Prior — sensitivity_to_prior","title":"Sensitivity to Prior — sensitivity_to_prior","text":"Computes sensitivity priors specification. represents proportion change indices model fitted antagonistic prior (prior shape located opposite effect).","code":""},{"path":"https://easystats.github.io/bayestestR/reference/sensitivity_to_prior.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sensitivity to Prior — sensitivity_to_prior","text":"","code":"sensitivity_to_prior(model, index = \"Median\", magnitude = 10, ...)"},{"path":"https://easystats.github.io/bayestestR/reference/sensitivity_to_prior.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sensitivity to Prior — sensitivity_to_prior","text":"model Bayesian model (stanreg brmsfit). index indices compute sensitivity. Can one multiple names columns returned describe_posterior. case important (e.g., write 'Median' instead 'median'). magnitude represent magnitude shift antagonistic prior (test sensitivity). instance, magnitude 10 (default) means mode wil updated prior located 10 standard deviations original location. ... Arguments passed methods.","code":""},{"path":[]},{"path":"https://easystats.github.io/bayestestR/reference/sensitivity_to_prior.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sensitivity to Prior — sensitivity_to_prior","text":"","code":"# \\dontrun{ library(bayestestR)  # rstanarm models # ----------------------------------------------- if (require(\"rstanarm\")) {   model <- rstanarm::stan_glm(mpg ~ wt, data = mtcars)   sensitivity_to_prior(model)    model <- rstanarm::stan_glm(mpg ~ wt + cyl, data = mtcars)   sensitivity_to_prior(model, index = c(\"Median\", \"MAP\")) } #>  #> SAMPLING FOR MODEL 'continuous' NOW (CHAIN 1). #> Chain 1:  #> Chain 1: Gradient evaluation took 1.9e-05 seconds #> Chain 1: 1000 transitions using 10 leapfrog steps per transition would take 0.19 seconds. #> Chain 1: Adjust your expectations accordingly! #> Chain 1:  #> Chain 1:  #> Chain 1: Iteration:    1 / 2000 [  0%]  (Warmup) #> Chain 1: Iteration:  200 / 2000 [ 10%]  (Warmup) #> Chain 1: Iteration:  400 / 2000 [ 20%]  (Warmup) #> Chain 1: Iteration:  600 / 2000 [ 30%]  (Warmup) #> Chain 1: Iteration:  800 / 2000 [ 40%]  (Warmup) #> Chain 1: Iteration: 1000 / 2000 [ 50%]  (Warmup) #> Chain 1: Iteration: 1001 / 2000 [ 50%]  (Sampling) #> Chain 1: Iteration: 1200 / 2000 [ 60%]  (Sampling) #> Chain 1: Iteration: 1400 / 2000 [ 70%]  (Sampling) #> Chain 1: Iteration: 1600 / 2000 [ 80%]  (Sampling) #> Chain 1: Iteration: 1800 / 2000 [ 90%]  (Sampling) #> Chain 1: Iteration: 2000 / 2000 [100%]  (Sampling) #> Chain 1:  #> Chain 1:  Elapsed Time: 0.039 seconds (Warm-up) #> Chain 1:                0.035 seconds (Sampling) #> Chain 1:                0.074 seconds (Total) #> Chain 1:  #>  #> SAMPLING FOR MODEL 'continuous' NOW (CHAIN 2). #> Chain 2:  #> Chain 2: Gradient evaluation took 1.1e-05 seconds #> Chain 2: 1000 transitions using 10 leapfrog steps per transition would take 0.11 seconds. #> Chain 2: Adjust your expectations accordingly! #> Chain 2:  #> Chain 2:  #> Chain 2: Iteration:    1 / 2000 [  0%]  (Warmup) #> Chain 2: Iteration:  200 / 2000 [ 10%]  (Warmup) #> Chain 2: Iteration:  400 / 2000 [ 20%]  (Warmup) #> Chain 2: Iteration:  600 / 2000 [ 30%]  (Warmup) #> Chain 2: Iteration:  800 / 2000 [ 40%]  (Warmup) #> Chain 2: Iteration: 1000 / 2000 [ 50%]  (Warmup) #> Chain 2: Iteration: 1001 / 2000 [ 50%]  (Sampling) #> Chain 2: Iteration: 1200 / 2000 [ 60%]  (Sampling) #> Chain 2: Iteration: 1400 / 2000 [ 70%]  (Sampling) #> Chain 2: Iteration: 1600 / 2000 [ 80%]  (Sampling) #> Chain 2: Iteration: 1800 / 2000 [ 90%]  (Sampling) #> Chain 2: Iteration: 2000 / 2000 [100%]  (Sampling) #> Chain 2:  #> Chain 2:  Elapsed Time: 0.048 seconds (Warm-up) #> Chain 2:                0.036 seconds (Sampling) #> Chain 2:                0.084 seconds (Total) #> Chain 2:  #>  #> SAMPLING FOR MODEL 'continuous' NOW (CHAIN 3). #> Chain 3:  #> Chain 3: Gradient evaluation took 1.1e-05 seconds #> Chain 3: 1000 transitions using 10 leapfrog steps per transition would take 0.11 seconds. #> Chain 3: Adjust your expectations accordingly! #> Chain 3:  #> Chain 3:  #> Chain 3: Iteration:    1 / 2000 [  0%]  (Warmup) #> Chain 3: Iteration:  200 / 2000 [ 10%]  (Warmup) #> Chain 3: Iteration:  400 / 2000 [ 20%]  (Warmup) #> Chain 3: Iteration:  600 / 2000 [ 30%]  (Warmup) #> Chain 3: Iteration:  800 / 2000 [ 40%]  (Warmup) #> Chain 3: Iteration: 1000 / 2000 [ 50%]  (Warmup) #> Chain 3: Iteration: 1001 / 2000 [ 50%]  (Sampling) #> Chain 3: Iteration: 1200 / 2000 [ 60%]  (Sampling) #> Chain 3: Iteration: 1400 / 2000 [ 70%]  (Sampling) #> Chain 3: Iteration: 1600 / 2000 [ 80%]  (Sampling) #> Chain 3: Iteration: 1800 / 2000 [ 90%]  (Sampling) #> Chain 3: Iteration: 2000 / 2000 [100%]  (Sampling) #> Chain 3:  #> Chain 3:  Elapsed Time: 0.034 seconds (Warm-up) #> Chain 3:                0.036 seconds (Sampling) #> Chain 3:                0.07 seconds (Total) #> Chain 3:  #>  #> SAMPLING FOR MODEL 'continuous' NOW (CHAIN 4). #> Chain 4:  #> Chain 4: Gradient evaluation took 1e-05 seconds #> Chain 4: 1000 transitions using 10 leapfrog steps per transition would take 0.1 seconds. #> Chain 4: Adjust your expectations accordingly! #> Chain 4:  #> Chain 4:  #> Chain 4: Iteration:    1 / 2000 [  0%]  (Warmup) #> Chain 4: Iteration:  200 / 2000 [ 10%]  (Warmup) #> Chain 4: Iteration:  400 / 2000 [ 20%]  (Warmup) #> Chain 4: Iteration:  600 / 2000 [ 30%]  (Warmup) #> Chain 4: Iteration:  800 / 2000 [ 40%]  (Warmup) #> Chain 4: Iteration: 1000 / 2000 [ 50%]  (Warmup) #> Chain 4: Iteration: 1001 / 2000 [ 50%]  (Sampling) #> Chain 4: Iteration: 1200 / 2000 [ 60%]  (Sampling) #> Chain 4: Iteration: 1400 / 2000 [ 70%]  (Sampling) #> Chain 4: Iteration: 1600 / 2000 [ 80%]  (Sampling) #> Chain 4: Iteration: 1800 / 2000 [ 90%]  (Sampling) #> Chain 4: Iteration: 2000 / 2000 [100%]  (Sampling) #> Chain 4:  #> Chain 4:  Elapsed Time: 0.037 seconds (Warm-up) #> Chain 4:                0.04 seconds (Sampling) #> Chain 4:                0.077 seconds (Total) #> Chain 4:  #>  #> SAMPLING FOR MODEL 'continuous' NOW (CHAIN 1). #> Chain 1:  #> Chain 1: Gradient evaluation took 1.8e-05 seconds #> Chain 1: 1000 transitions using 10 leapfrog steps per transition would take 0.18 seconds. #> Chain 1: Adjust your expectations accordingly! #> Chain 1:  #> Chain 1:  #> Chain 1: Iteration:    1 / 2000 [  0%]  (Warmup) #> Chain 1: Iteration:  200 / 2000 [ 10%]  (Warmup) #> Chain 1: Iteration:  400 / 2000 [ 20%]  (Warmup) #> Chain 1: Iteration:  600 / 2000 [ 30%]  (Warmup) #> Chain 1: Iteration:  800 / 2000 [ 40%]  (Warmup) #> Chain 1: Iteration: 1000 / 2000 [ 50%]  (Warmup) #> Chain 1: Iteration: 1001 / 2000 [ 50%]  (Sampling) #> Chain 1: Iteration: 1200 / 2000 [ 60%]  (Sampling) #> Chain 1: Iteration: 1400 / 2000 [ 70%]  (Sampling) #> Chain 1: Iteration: 1600 / 2000 [ 80%]  (Sampling) #> Chain 1: Iteration: 1800 / 2000 [ 90%]  (Sampling) #> Chain 1: Iteration: 2000 / 2000 [100%]  (Sampling) #> Chain 1:  #> Chain 1:  Elapsed Time: 0.054 seconds (Warm-up) #> Chain 1:                0.056 seconds (Sampling) #> Chain 1:                0.11 seconds (Total) #> Chain 1:  #>  #> SAMPLING FOR MODEL 'continuous' NOW (CHAIN 2). #> Chain 2:  #> Chain 2: Gradient evaluation took 1.2e-05 seconds #> Chain 2: 1000 transitions using 10 leapfrog steps per transition would take 0.12 seconds. #> Chain 2: Adjust your expectations accordingly! #> Chain 2:  #> Chain 2:  #> Chain 2: Iteration:    1 / 2000 [  0%]  (Warmup) #> Chain 2: Iteration:  200 / 2000 [ 10%]  (Warmup) #> Chain 2: Iteration:  400 / 2000 [ 20%]  (Warmup) #> Chain 2: Iteration:  600 / 2000 [ 30%]  (Warmup) #> Chain 2: Iteration:  800 / 2000 [ 40%]  (Warmup) #> Chain 2: Iteration: 1000 / 2000 [ 50%]  (Warmup) #> Chain 2: Iteration: 1001 / 2000 [ 50%]  (Sampling) #> Chain 2: Iteration: 1200 / 2000 [ 60%]  (Sampling) #> Chain 2: Iteration: 1400 / 2000 [ 70%]  (Sampling) #> Chain 2: Iteration: 1600 / 2000 [ 80%]  (Sampling) #> Chain 2: Iteration: 1800 / 2000 [ 90%]  (Sampling) #> Chain 2: Iteration: 2000 / 2000 [100%]  (Sampling) #> Chain 2:  #> Chain 2:  Elapsed Time: 0.057 seconds (Warm-up) #> Chain 2:                0.052 seconds (Sampling) #> Chain 2:                0.109 seconds (Total) #> Chain 2:  #>  #> SAMPLING FOR MODEL 'continuous' NOW (CHAIN 3). #> Chain 3:  #> Chain 3: Gradient evaluation took 1.2e-05 seconds #> Chain 3: 1000 transitions using 10 leapfrog steps per transition would take 0.12 seconds. #> Chain 3: Adjust your expectations accordingly! #> Chain 3:  #> Chain 3:  #> Chain 3: Iteration:    1 / 2000 [  0%]  (Warmup) #> Chain 3: Iteration:  200 / 2000 [ 10%]  (Warmup) #> Chain 3: Iteration:  400 / 2000 [ 20%]  (Warmup) #> Chain 3: Iteration:  600 / 2000 [ 30%]  (Warmup) #> Chain 3: Iteration:  800 / 2000 [ 40%]  (Warmup) #> Chain 3: Iteration: 1000 / 2000 [ 50%]  (Warmup) #> Chain 3: Iteration: 1001 / 2000 [ 50%]  (Sampling) #> Chain 3: Iteration: 1200 / 2000 [ 60%]  (Sampling) #> Chain 3: Iteration: 1400 / 2000 [ 70%]  (Sampling) #> Chain 3: Iteration: 1600 / 2000 [ 80%]  (Sampling) #> Chain 3: Iteration: 1800 / 2000 [ 90%]  (Sampling) #> Chain 3: Iteration: 2000 / 2000 [100%]  (Sampling) #> Chain 3:  #> Chain 3:  Elapsed Time: 0.058 seconds (Warm-up) #> Chain 3:                0.056 seconds (Sampling) #> Chain 3:                0.114 seconds (Total) #> Chain 3:  #>  #> SAMPLING FOR MODEL 'continuous' NOW (CHAIN 4). #> Chain 4:  #> Chain 4: Gradient evaluation took 1.2e-05 seconds #> Chain 4: 1000 transitions using 10 leapfrog steps per transition would take 0.12 seconds. #> Chain 4: Adjust your expectations accordingly! #> Chain 4:  #> Chain 4:  #> Chain 4: Iteration:    1 / 2000 [  0%]  (Warmup) #> Chain 4: Iteration:  200 / 2000 [ 10%]  (Warmup) #> Chain 4: Iteration:  400 / 2000 [ 20%]  (Warmup) #> Chain 4: Iteration:  600 / 2000 [ 30%]  (Warmup) #> Chain 4: Iteration:  800 / 2000 [ 40%]  (Warmup) #> Chain 4: Iteration: 1000 / 2000 [ 50%]  (Warmup) #> Chain 4: Iteration: 1001 / 2000 [ 50%]  (Sampling) #> Chain 4: Iteration: 1200 / 2000 [ 60%]  (Sampling) #> Chain 4: Iteration: 1400 / 2000 [ 70%]  (Sampling) #> Chain 4: Iteration: 1600 / 2000 [ 80%]  (Sampling) #> Chain 4: Iteration: 1800 / 2000 [ 90%]  (Sampling) #> Chain 4: Iteration: 2000 / 2000 [100%]  (Sampling) #> Chain 4:  #> Chain 4:  Elapsed Time: 0.059 seconds (Warm-up) #> Chain 4:                0.047 seconds (Sampling) #> Chain 4:                0.106 seconds (Total) #> Chain 4:  #>   Parameter Sensitivity_Median Sensitivity_MAP #> 1        wt         0.03314381     0.009531386 #> 2       cyl         0.02201956     0.034765109  # brms models # ----------------------------------------------- if (require(\"brms\")) {   model <- brms::brm(mpg ~ wt + cyl, data = mtcars)   # sensitivity_to_prior(model) } #> Compiling Stan program... #> Start sampling #>  #> SAMPLING FOR MODEL '2d19b3a372313df641edf05db5e9f303' NOW (CHAIN 1). #> Chain 1:  #> Chain 1: Gradient evaluation took 1e-05 seconds #> Chain 1: 1000 transitions using 10 leapfrog steps per transition would take 0.1 seconds. #> Chain 1: Adjust your expectations accordingly! #> Chain 1:  #> Chain 1:  #> Chain 1: Iteration:    1 / 2000 [  0%]  (Warmup) #> Chain 1: Iteration:  200 / 2000 [ 10%]  (Warmup) #> Chain 1: Iteration:  400 / 2000 [ 20%]  (Warmup) #> Chain 1: Iteration:  600 / 2000 [ 30%]  (Warmup) #> Chain 1: Iteration:  800 / 2000 [ 40%]  (Warmup) #> Chain 1: Iteration: 1000 / 2000 [ 50%]  (Warmup) #> Chain 1: Iteration: 1001 / 2000 [ 50%]  (Sampling) #> Chain 1: Iteration: 1200 / 2000 [ 60%]  (Sampling) #> Chain 1: Iteration: 1400 / 2000 [ 70%]  (Sampling) #> Chain 1: Iteration: 1600 / 2000 [ 80%]  (Sampling) #> Chain 1: Iteration: 1800 / 2000 [ 90%]  (Sampling) #> Chain 1: Iteration: 2000 / 2000 [100%]  (Sampling) #> Chain 1:  #> Chain 1:  Elapsed Time: 0.02831 seconds (Warm-up) #> Chain 1:                0.029287 seconds (Sampling) #> Chain 1:                0.057597 seconds (Total) #> Chain 1:  #>  #> SAMPLING FOR MODEL '2d19b3a372313df641edf05db5e9f303' NOW (CHAIN 2). #> Chain 2:  #> Chain 2: Gradient evaluation took 8e-06 seconds #> Chain 2: 1000 transitions using 10 leapfrog steps per transition would take 0.08 seconds. #> Chain 2: Adjust your expectations accordingly! #> Chain 2:  #> Chain 2:  #> Chain 2: Iteration:    1 / 2000 [  0%]  (Warmup) #> Chain 2: Iteration:  200 / 2000 [ 10%]  (Warmup) #> Chain 2: Iteration:  400 / 2000 [ 20%]  (Warmup) #> Chain 2: Iteration:  600 / 2000 [ 30%]  (Warmup) #> Chain 2: Iteration:  800 / 2000 [ 40%]  (Warmup) #> Chain 2: Iteration: 1000 / 2000 [ 50%]  (Warmup) #> Chain 2: Iteration: 1001 / 2000 [ 50%]  (Sampling) #> Chain 2: Iteration: 1200 / 2000 [ 60%]  (Sampling) #> Chain 2: Iteration: 1400 / 2000 [ 70%]  (Sampling) #> Chain 2: Iteration: 1600 / 2000 [ 80%]  (Sampling) #> Chain 2: Iteration: 1800 / 2000 [ 90%]  (Sampling) #> Chain 2: Iteration: 2000 / 2000 [100%]  (Sampling) #> Chain 2:  #> Chain 2:  Elapsed Time: 0.028439 seconds (Warm-up) #> Chain 2:                0.02166 seconds (Sampling) #> Chain 2:                0.050099 seconds (Total) #> Chain 2:  #>  #> SAMPLING FOR MODEL '2d19b3a372313df641edf05db5e9f303' NOW (CHAIN 3). #> Chain 3:  #> Chain 3: Gradient evaluation took 7e-06 seconds #> Chain 3: 1000 transitions using 10 leapfrog steps per transition would take 0.07 seconds. #> Chain 3: Adjust your expectations accordingly! #> Chain 3:  #> Chain 3:  #> Chain 3: Iteration:    1 / 2000 [  0%]  (Warmup) #> Chain 3: Iteration:  200 / 2000 [ 10%]  (Warmup) #> Chain 3: Iteration:  400 / 2000 [ 20%]  (Warmup) #> Chain 3: Iteration:  600 / 2000 [ 30%]  (Warmup) #> Chain 3: Iteration:  800 / 2000 [ 40%]  (Warmup) #> Chain 3: Iteration: 1000 / 2000 [ 50%]  (Warmup) #> Chain 3: Iteration: 1001 / 2000 [ 50%]  (Sampling) #> Chain 3: Iteration: 1200 / 2000 [ 60%]  (Sampling) #> Chain 3: Iteration: 1400 / 2000 [ 70%]  (Sampling) #> Chain 3: Iteration: 1600 / 2000 [ 80%]  (Sampling) #> Chain 3: Iteration: 1800 / 2000 [ 90%]  (Sampling) #> Chain 3: Iteration: 2000 / 2000 [100%]  (Sampling) #> Chain 3:  #> Chain 3:  Elapsed Time: 0.028717 seconds (Warm-up) #> Chain 3:                0.026825 seconds (Sampling) #> Chain 3:                0.055542 seconds (Total) #> Chain 3:  #>  #> SAMPLING FOR MODEL '2d19b3a372313df641edf05db5e9f303' NOW (CHAIN 4). #> Chain 4:  #> Chain 4: Gradient evaluation took 6e-06 seconds #> Chain 4: 1000 transitions using 10 leapfrog steps per transition would take 0.06 seconds. #> Chain 4: Adjust your expectations accordingly! #> Chain 4:  #> Chain 4:  #> Chain 4: Iteration:    1 / 2000 [  0%]  (Warmup) #> Chain 4: Iteration:  200 / 2000 [ 10%]  (Warmup) #> Chain 4: Iteration:  400 / 2000 [ 20%]  (Warmup) #> Chain 4: Iteration:  600 / 2000 [ 30%]  (Warmup) #> Chain 4: Iteration:  800 / 2000 [ 40%]  (Warmup) #> Chain 4: Iteration: 1000 / 2000 [ 50%]  (Warmup) #> Chain 4: Iteration: 1001 / 2000 [ 50%]  (Sampling) #> Chain 4: Iteration: 1200 / 2000 [ 60%]  (Sampling) #> Chain 4: Iteration: 1400 / 2000 [ 70%]  (Sampling) #> Chain 4: Iteration: 1600 / 2000 [ 80%]  (Sampling) #> Chain 4: Iteration: 1800 / 2000 [ 90%]  (Sampling) #> Chain 4: Iteration: 2000 / 2000 [100%]  (Sampling) #> Chain 4:  #> Chain 4:  Elapsed Time: 0.027631 seconds (Warm-up) #> Chain 4:                0.02746 seconds (Sampling) #> Chain 4:                0.055091 seconds (Total) #> Chain 4:  # }"},{"path":"https://easystats.github.io/bayestestR/reference/sexit.html","id":null,"dir":"Reference","previous_headings":"","what":"Sequential Effect eXistence and sIgnificance Testing (SEXIT) — sexit","title":"Sequential Effect eXistence and sIgnificance Testing (SEXIT) — sexit","text":"SEXIT new framework describe Bayesian effects, guiding indices use. Accordingly, sexit() function returns minimal (optimal) required information describe models' parameters Bayesian framework. includes following indices: Centrality: median posterior distribution. probabilistic terms, 50% probability effect higher lower. See point_estimate(). Uncertainty: 95% Highest Density Interval (HDI). probabilistic terms, 95% probability effect within confidence interval. See ci(). Existence: probability direction allows quantify certainty effect positive negative. critical index show effect manipulation harmful (instance clinical studies) assess direction link. See p_direction(). Significance: existence demonstrated high certainty, can assess whether effect sufficient size considered significant (.e., negligible). useful index determine effects actually important worthy discussion given process. See p_significance(). Size: Finally, index gives idea strength effect. However, beware, studies shown big effect size can also suggestive low statistical power (see details section).","code":""},{"path":"https://easystats.github.io/bayestestR/reference/sexit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sequential Effect eXistence and sIgnificance Testing (SEXIT) — sexit","text":"","code":"sexit(x, significant = \"default\", large = \"default\", ci = 0.95, ...)"},{"path":"https://easystats.github.io/bayestestR/reference/sexit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sequential Effect eXistence and sIgnificance Testing (SEXIT) — sexit","text":"x Vector representing posterior distribution. Can also Bayesian model (stanreg, brmsfit BayesFactor). significant, large threshold values use significant large probabilities. left 'default', selected sexit_thresholds(). See details section . ci Value vector probability (credible) interval - CI (0 1) estimated. Default .95 (95%). ... Currently used.","code":""},{"path":"https://easystats.github.io/bayestestR/reference/sexit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sequential Effect eXistence and sIgnificance Testing (SEXIT) — sexit","text":"dataframe text attribute.","code":""},{"path":[]},{"path":"https://easystats.github.io/bayestestR/reference/sexit.html","id":"rationale","dir":"Reference","previous_headings":"","what":"Rationale","title":"Sequential Effect eXistence and sIgnificance Testing (SEXIT) — sexit","text":"assessment \"significance\" (broadest meaning) pervasive issue science, historical index, p-value, strongly criticized deemed played important role replicability crisis. reaction, scientists tuned Bayesian methods, offering alternative set tools answer questions. However, Bayesian framework offers wide variety possible indices related \"significance\", debate raging index best, one report. situation can lead mindless reporting possible indices (hopes reader satisfied), often without writer understanding interpreting . indeed complicated juggle many indices complicated definitions subtle differences. SEXIT aims offering practical framework Bayesian effects reporting, focus put intuitiveness, explicitness usefulness indices' interpretation. end, suggest system description parameters intuitive, easy learn apply, mathematically accurate useful taking decision. thresholds significance (.e., ROPE) one \"large\" effect explicitly defined, SEXIT framework make interpretation, .e., label effects, just sequentially gives 3 probabilities (direction, significance large, respectively) -top characteristics posterior (using median HDI centrality uncertainty description). Thus, provides lot information posterior distribution (mass different 'sections' posterior) clear meaningful way.","code":""},{"path":"https://easystats.github.io/bayestestR/reference/sexit.html","id":"threshold-selection","dir":"Reference","previous_headings":"","what":"Threshold selection","title":"Sequential Effect eXistence and sIgnificance Testing (SEXIT) — sexit","text":"One important thing SEXIT framework relies two \"arbitrary\" thresholds (.e., absolute meaning). ones related effect size (inherently subjective notion), namely thresholds significant large effects. set, default, 0.05 0.3 standard deviation outcome variable (tiny large effect sizes correlations according Funder Ozer, 2019). However, defaults chosen lack better option, might adapted case. Thus, handled care, chosen thresholds always explicitly reported justified. linear models (lm), can generalised 0.05 * SDy 0.3 * SDy significant large effects, respectively. logistic models, parameters expressed log odds ratio can converted standardized difference formula π/√(3), resulting threshold 0.09 0.54. models binary outcome, strongly recommended manually specify rope argument. Currently, default applied logistic models. models count data, residual variance used. rather experimental threshold probably often similar 0.05 0.3, used care! t-tests, standard deviation response used, similarly linear models (see ). correlations,0.05 0.3 used. models, 0.05 0.3 used, strongly advised specify manually.","code":""},{"path":"https://easystats.github.io/bayestestR/reference/sexit.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sequential Effect eXistence and sIgnificance Testing (SEXIT) — sexit","text":"three values existence, significance size provide useful description posterior distribution effects. possible scenarios include: probability existence low, probability large high: suggests posterior wide (covering large territories side 0). statistical power might low, warrant confident conclusion. probability existence significance high, probability large small: suggests effect , high confidence, large (posterior mostly contained significance large thresholds). 3 indices low: suggests effect null high confidence (posterior closely centred around 0).","code":""},{"path":"https://easystats.github.io/bayestestR/reference/sexit.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Sequential Effect eXistence and sIgnificance Testing (SEXIT) — sexit","text":"Makowski, D., Ben-Shachar, M. S., & Lüdecke, D. (2019). bayestestR: Describing Effects Uncertainty, Existence Significance within Bayesian Framework. Journal Open Source Software, 4(40), 1541. doi:10.21105/joss.01541 Makowski D, Ben-Shachar MS, Chen SHA, Lüdecke D (2019) Indices Effect Existence Significance Bayesian Framework. Frontiers Psychology 2019;10:2767. doi:10.3389/fpsyg.2019.02767","code":""},{"path":"https://easystats.github.io/bayestestR/reference/sexit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sequential Effect eXistence and sIgnificance Testing (SEXIT) — sexit","text":"","code":"# \\dontrun{ library(bayestestR)  s <- sexit(rnorm(1000, -1, 1)) s #> # Following the Sequential Effect eXistence and sIgnificance Testing (SEXIT) framework, we report the median of the posterior distribution and its 95% CI (Highest Density Interval), along the probability of direction (pd), the probability of significance and the probability of being large. The thresholds beyond which the effect is considered as significant (i.e., non-negligible) and large are |0.05| and |0.30|. #>  #> The effect (Median = -0.96, 95% CI [-3.06, 0.91]) has a 83.20% probability of being negative (< 0), 82.30% of being significant (< -0.05), and 74.50% of being large (< -0.30) #>  #> Median |        95% CI | Direction | Significance (> |0.05|) | Large (> |0.30|) #> ------------------------------------------------------------------------------- #>  -0.96 | [-3.06, 0.91] |      0.83 |                    0.82 |             0.74 #>  print(s, summary = TRUE) #> # The thresholds beyond which the effect is considered as significant (i.e., non-negligible) and large are |0.05| and |0.30|. #>  #> The effect (Median = -0.96, 95% CI [-3.06, 0.91]) has 83.20%, 82.30% and 74.50% probability of being negative (< 0), significant (< -0.05) and large (< -0.30)  s <- sexit(iris) s #> # Following the Sequential Effect eXistence and sIgnificance Testing (SEXIT) framework, we report the median of the posterior distribution and its 95% CI (Highest Density Interval), along the probability of direction (pd), the probability of significance and the probability of being large. The thresholds beyond which the effect is considered as significant (i.e., non-negligible) and large are |0.05| and |0.30|. #>  #> - Sepal.Length (Median = 5.80, 95% CI [4.47, 7.70]) has a 100.00% probability of being positive (> 0), 100.00% of being significant (> 0.05), and 100.00% of being large (> 0.30) #> - Sepal.Width (Median = 3.00, 95% CI [2.27, 3.93]) has a 100.00% probability of being positive (> 0), 100.00% of being significant (> 0.05), and 100.00% of being large (> 0.30) #> - Petal.Length (Median = 4.35, 95% CI [1.27, 6.46]) has a 100.00% probability of being positive (> 0), 100.00% of being significant (> 0.05), and 100.00% of being large (> 0.30) #> - Petal.Width (Median = 1.30, 95% CI [0.10, 2.40]) has a 100.00% probability of being positive (> 0), 100.00% of being significant (> 0.05), and 72.67% of being large (> 0.30) #>  #> Parameter    | Median |       95% CI | Direction | Significance (> |0.05|) | Large (> |0.30|) #> --------------------------------------------------------------------------------------------- #> Sepal.Length |   5.80 | [4.47, 7.70] |         1 |                       1 |             1.00 #> Sepal.Width  |   3.00 | [2.27, 3.93] |         1 |                       1 |             1.00 #> Petal.Length |   4.35 | [1.27, 6.46] |         1 |                       1 |             1.00 #> Petal.Width  |   1.30 | [0.10, 2.40] |         1 |                       1 |             0.73 #>  print(s, summary = TRUE) #> # The thresholds beyond which the effect is considered as significant (i.e., non-negligible) and large are |0.05| and |0.30|. #>  #> - Sepal.Length (Median = 5.80, 95% CI [4.47, 7.70]) has 100.00%, 100.00% and 100.00% probability of being positive (> 0), significant (> 0.05) and large (> 0.30) #> - Sepal.Width (Median = 3.00, 95% CI [2.27, 3.93]) has 100.00%, 100.00% and 100.00% probability of being positive (> 0), significant (> 0.05) and large (> 0.30) #> - Petal.Length (Median = 4.35, 95% CI [1.27, 6.46]) has 100.00%, 100.00% and 100.00% probability of being positive (> 0), significant (> 0.05) and large (> 0.30) #> - Petal.Width (Median = 1.30, 95% CI [0.10, 2.40]) has 100.00%, 100.00% and 72.67% probability of being positive (> 0), significant (> 0.05) and large (> 0.30)  if (require(\"rstanarm\")) {   model <- rstanarm::stan_glm(mpg ~ wt * cyl,     data = mtcars,     iter = 400, refresh = 0   )   s <- sexit(model)   s   print(s, summary = TRUE) } #> Warning: Bulk Effective Samples Size (ESS) is too low, indicating posterior means and medians may be unreliable. #> Running the chains for more iterations may help. See #> https://mc-stan.org/misc/warnings.html#bulk-ess #> Warning: Tail Effective Samples Size (ESS) is too low, indicating posterior variances and tail quantiles may be unreliable. #> Running the chains for more iterations may help. See #> https://mc-stan.org/misc/warnings.html#tail-ess #> # The thresholds beyond which the effect is considered as significant (i.e., non-negligible) and large are |0.30| and |1.81|. #>  #> - (Intercept) (Median = 53.40, 95% CI [40.41, 66.32]) has 100.00%, 100.00% and 100.00% probability of being positive (> 0), significant (> 0.30) and large (> 1.81) #> - wt (Median = -8.25, 95% CI [-13.29, -3.45]) has 100.00%, 100.00% and 99.62% probability of being negative (< 0), significant (< -0.30) and large (< -1.81) #> - cyl (Median = -3.66, 95% CI [-5.78, -1.61]) has 100.00%, 100.00% and 95.38% probability of being negative (< 0), significant (< -0.30) and large (< -1.81) #> - wt:cyl (Median = 0.75, 95% CI [0.06, 1.47]) has 98.38%, 91.12% and 0.00% probability of being positive (> 0), significant (> 0.30) and large (> 1.81) # }"},{"path":"https://easystats.github.io/bayestestR/reference/sexit_thresholds.html","id":null,"dir":"Reference","previous_headings":"","what":"Find Effect Size Thresholds — sexit_thresholds","title":"Find Effect Size Thresholds — sexit_thresholds","text":"function attempts automatically finding suitable default values \"significant\" (.e., non-negligible) \"large\" effect. used care, chosen threshold always explicitly reported justified. See detail section sexit() information.","code":""},{"path":"https://easystats.github.io/bayestestR/reference/sexit_thresholds.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find Effect Size Thresholds — sexit_thresholds","text":"","code":"sexit_thresholds(x, ...)"},{"path":"https://easystats.github.io/bayestestR/reference/sexit_thresholds.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find Effect Size Thresholds — sexit_thresholds","text":"x Vector representing posterior distribution. Can also stanreg brmsfit model. ... Currently used.","code":""},{"path":"https://easystats.github.io/bayestestR/reference/sexit_thresholds.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Find Effect Size Thresholds — sexit_thresholds","text":"Kruschke, J. K. (2018). Rejecting accepting parameter values Bayesian estimation. Advances Methods Practices Psychological Science, 1(2), 270-280. doi:10.1177/2515245918771304 .","code":""},{"path":"https://easystats.github.io/bayestestR/reference/sexit_thresholds.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find Effect Size Thresholds — sexit_thresholds","text":"","code":"sexit_thresholds(rnorm(1000)) #> [1] 0.05 0.30 # \\dontrun{ if (require(\"rstanarm\")) {   model <- stan_glm(     mpg ~ wt + gear,     data = mtcars,     chains = 2,     iter = 200,     refresh = 0   )   sexit_thresholds(model)    model <- stan_glm(vs ~ mpg, data = mtcars, family = \"binomial\", refresh = 0)   sexit_thresholds(model) } #> Warning: The largest R-hat is 1.08, indicating chains have not mixed. #> Running the chains for more iterations may help. See #> https://mc-stan.org/misc/warnings.html#r-hat #> Warning: Bulk Effective Samples Size (ESS) is too low, indicating posterior means and medians may be unreliable. #> Running the chains for more iterations may help. See #> https://mc-stan.org/misc/warnings.html#bulk-ess #> Warning: Tail Effective Samples Size (ESS) is too low, indicating posterior variances and tail quantiles may be unreliable. #> Running the chains for more iterations may help. See #> https://mc-stan.org/misc/warnings.html#tail-ess #> [1] 0.09068997 0.54413981  if (require(\"brms\")) {   model <- brm(mpg ~ wt + cyl, data = mtcars)   sexit_thresholds(model) } #> Compiling Stan program... #> Start sampling #>  #> SAMPLING FOR MODEL '2d19b3a372313df641edf05db5e9f303' NOW (CHAIN 1). #> Chain 1:  #> Chain 1: Gradient evaluation took 9e-06 seconds #> Chain 1: 1000 transitions using 10 leapfrog steps per transition would take 0.09 seconds. #> Chain 1: Adjust your expectations accordingly! #> Chain 1:  #> Chain 1:  #> Chain 1: Iteration:    1 / 2000 [  0%]  (Warmup) #> Chain 1: Iteration:  200 / 2000 [ 10%]  (Warmup) #> Chain 1: Iteration:  400 / 2000 [ 20%]  (Warmup) #> Chain 1: Iteration:  600 / 2000 [ 30%]  (Warmup) #> Chain 1: Iteration:  800 / 2000 [ 40%]  (Warmup) #> Chain 1: Iteration: 1000 / 2000 [ 50%]  (Warmup) #> Chain 1: Iteration: 1001 / 2000 [ 50%]  (Sampling) #> Chain 1: Iteration: 1200 / 2000 [ 60%]  (Sampling) #> Chain 1: Iteration: 1400 / 2000 [ 70%]  (Sampling) #> Chain 1: Iteration: 1600 / 2000 [ 80%]  (Sampling) #> Chain 1: Iteration: 1800 / 2000 [ 90%]  (Sampling) #> Chain 1: Iteration: 2000 / 2000 [100%]  (Sampling) #> Chain 1:  #> Chain 1:  Elapsed Time: 0.029021 seconds (Warm-up) #> Chain 1:                0.026644 seconds (Sampling) #> Chain 1:                0.055665 seconds (Total) #> Chain 1:  #>  #> SAMPLING FOR MODEL '2d19b3a372313df641edf05db5e9f303' NOW (CHAIN 2). #> Chain 2:  #> Chain 2: Gradient evaluation took 7e-06 seconds #> Chain 2: 1000 transitions using 10 leapfrog steps per transition would take 0.07 seconds. #> Chain 2: Adjust your expectations accordingly! #> Chain 2:  #> Chain 2:  #> Chain 2: Iteration:    1 / 2000 [  0%]  (Warmup) #> Chain 2: Iteration:  200 / 2000 [ 10%]  (Warmup) #> Chain 2: Iteration:  400 / 2000 [ 20%]  (Warmup) #> Chain 2: Iteration:  600 / 2000 [ 30%]  (Warmup) #> Chain 2: Iteration:  800 / 2000 [ 40%]  (Warmup) #> Chain 2: Iteration: 1000 / 2000 [ 50%]  (Warmup) #> Chain 2: Iteration: 1001 / 2000 [ 50%]  (Sampling) #> Chain 2: Iteration: 1200 / 2000 [ 60%]  (Sampling) #> Chain 2: Iteration: 1400 / 2000 [ 70%]  (Sampling) #> Chain 2: Iteration: 1600 / 2000 [ 80%]  (Sampling) #> Chain 2: Iteration: 1800 / 2000 [ 90%]  (Sampling) #> Chain 2: Iteration: 2000 / 2000 [100%]  (Sampling) #> Chain 2:  #> Chain 2:  Elapsed Time: 0.027763 seconds (Warm-up) #> Chain 2:                0.023998 seconds (Sampling) #> Chain 2:                0.051761 seconds (Total) #> Chain 2:  #>  #> SAMPLING FOR MODEL '2d19b3a372313df641edf05db5e9f303' NOW (CHAIN 3). #> Chain 3:  #> Chain 3: Gradient evaluation took 7e-06 seconds #> Chain 3: 1000 transitions using 10 leapfrog steps per transition would take 0.07 seconds. #> Chain 3: Adjust your expectations accordingly! #> Chain 3:  #> Chain 3:  #> Chain 3: Iteration:    1 / 2000 [  0%]  (Warmup) #> Chain 3: Iteration:  200 / 2000 [ 10%]  (Warmup) #> Chain 3: Iteration:  400 / 2000 [ 20%]  (Warmup) #> Chain 3: Iteration:  600 / 2000 [ 30%]  (Warmup) #> Chain 3: Iteration:  800 / 2000 [ 40%]  (Warmup) #> Chain 3: Iteration: 1000 / 2000 [ 50%]  (Warmup) #> Chain 3: Iteration: 1001 / 2000 [ 50%]  (Sampling) #> Chain 3: Iteration: 1200 / 2000 [ 60%]  (Sampling) #> Chain 3: Iteration: 1400 / 2000 [ 70%]  (Sampling) #> Chain 3: Iteration: 1600 / 2000 [ 80%]  (Sampling) #> Chain 3: Iteration: 1800 / 2000 [ 90%]  (Sampling) #> Chain 3: Iteration: 2000 / 2000 [100%]  (Sampling) #> Chain 3:  #> Chain 3:  Elapsed Time: 0.029341 seconds (Warm-up) #> Chain 3:                0.029821 seconds (Sampling) #> Chain 3:                0.059162 seconds (Total) #> Chain 3:  #>  #> SAMPLING FOR MODEL '2d19b3a372313df641edf05db5e9f303' NOW (CHAIN 4). #> Chain 4:  #> Chain 4: Gradient evaluation took 6e-06 seconds #> Chain 4: 1000 transitions using 10 leapfrog steps per transition would take 0.06 seconds. #> Chain 4: Adjust your expectations accordingly! #> Chain 4:  #> Chain 4:  #> Chain 4: Iteration:    1 / 2000 [  0%]  (Warmup) #> Chain 4: Iteration:  200 / 2000 [ 10%]  (Warmup) #> Chain 4: Iteration:  400 / 2000 [ 20%]  (Warmup) #> Chain 4: Iteration:  600 / 2000 [ 30%]  (Warmup) #> Chain 4: Iteration:  800 / 2000 [ 40%]  (Warmup) #> Chain 4: Iteration: 1000 / 2000 [ 50%]  (Warmup) #> Chain 4: Iteration: 1001 / 2000 [ 50%]  (Sampling) #> Chain 4: Iteration: 1200 / 2000 [ 60%]  (Sampling) #> Chain 4: Iteration: 1400 / 2000 [ 70%]  (Sampling) #> Chain 4: Iteration: 1600 / 2000 [ 80%]  (Sampling) #> Chain 4: Iteration: 1800 / 2000 [ 90%]  (Sampling) #> Chain 4: Iteration: 2000 / 2000 [100%]  (Sampling) #> Chain 4:  #> Chain 4:  Elapsed Time: 0.028085 seconds (Warm-up) #> Chain 4:                0.031023 seconds (Sampling) #> Chain 4:                0.059108 seconds (Total) #> Chain 4:  #> [1] 0.3013474 1.8080844  if (require(\"BayesFactor\")) {   bf <- ttestBF(x = rnorm(100, 1, 1))   sexit_thresholds(bf) } #> [1] 0.04872446 0.29234676 # }"},{"path":"https://easystats.github.io/bayestestR/reference/si.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute Support Intervals — si","title":"Compute Support Intervals — si","text":"support interval contains values parameter predict observed data better average, degree k; values parameter associated updating factor greater equal k. perspective Savage-Dickey Bayes factor, testing point null hypothesis value within support interval yield Bayes factor smaller 1/k. info, particular specifying correct priors factors 2 levels, see Bayes factors vignette.","code":""},{"path":"https://easystats.github.io/bayestestR/reference/si.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute Support Intervals — si","text":"","code":"si(posterior, prior = NULL, BF = 1, verbose = TRUE, ...)  # S3 method for numeric si(posterior, prior = NULL, BF = 1, verbose = TRUE, ...)  # S3 method for stanreg si(   posterior,   prior = NULL,   BF = 1,   verbose = TRUE,   effects = c(\"fixed\", \"random\", \"all\"),   component = c(\"location\", \"conditional\", \"all\", \"smooth_terms\", \"sigma\", \"auxiliary\",     \"distributional\"),   parameters = NULL,   ... )  # S3 method for brmsfit si(   posterior,   prior = NULL,   BF = 1,   verbose = TRUE,   effects = c(\"fixed\", \"random\", \"all\"),   component = c(\"location\", \"conditional\", \"all\", \"smooth_terms\", \"sigma\", \"auxiliary\",     \"distributional\"),   parameters = NULL,   ... )  # S3 method for blavaan si(   posterior,   prior = NULL,   BF = 1,   verbose = TRUE,   effects = c(\"fixed\", \"random\", \"all\"),   component = c(\"location\", \"conditional\", \"all\", \"smooth_terms\", \"sigma\", \"auxiliary\",     \"distributional\"),   parameters = NULL,   ... )  # S3 method for emmGrid si(posterior, prior = NULL, BF = 1, verbose = TRUE, ...)  # S3 method for data.frame si(posterior, prior = NULL, BF = 1, verbose = TRUE, ...)"},{"path":"https://easystats.github.io/bayestestR/reference/si.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute Support Intervals — si","text":"posterior numerical vector, stanreg / brmsfit object, emmGrid data frame - representing posterior distribution(s) (see 'Details'). prior object representing prior distribution (see 'Details'). BF amount support required included support interval. verbose Toggle warnings. ... Arguments passed methods. (Can used pass arguments internal logspline::logspline().) effects results fixed effects, random effects returned? applies mixed models. May abbreviated. component results parameters, parameters conditional model zero-inflated part model returned? May abbreviated. applies brms-models. parameters Regular expression pattern describes parameters returned. Meta-parameters (like lp__ prior_) filtered default, parameters typically appear summary() returned. Use parameters select specific parameters output.","code":""},{"path":"https://easystats.github.io/bayestestR/reference/si.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute Support Intervals — si","text":"data frame containing lower upper bounds SI. Note level requested support higher observed data, interval [NA,NA].","code":""},{"path":"https://easystats.github.io/bayestestR/reference/si.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute Support Intervals — si","text":"method used compute support intervals based prior posterior distributions. computation support intervals, model priors must proper priors (least flat, preferable informative - note default, brms::brm() uses flat priors fixed-effects; see example ).","code":""},{"path":"https://easystats.github.io/bayestestR/reference/si.html","id":"choosing-a-value-of-bf","dir":"Reference","previous_headings":"","what":"Choosing a value of BF","title":"Compute Support Intervals — si","text":"choice BF (level support) depends want interval represent: BF = 1 contains values whose credibility decreased observing data. BF > 1 contains values received impressive support data. BF < 1 contains values whose credibility impressively decreased observing data. Testing values outside interval produce Bayes factor larger 1/BF support alternative. E.g., SI (BF = 1/3) excludes 0, Bayes factor point-null larger 3.","code":""},{"path":"https://easystats.github.io/bayestestR/reference/si.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Compute Support Intervals — si","text":"also plot()-method implemented see-package.","code":""},{"path":"https://easystats.github.io/bayestestR/reference/si.html","id":"setting-the-correct-prior","dir":"Reference","previous_headings":"","what":"Setting the correct prior","title":"Compute Support Intervals — si","text":"computation Bayes factors, model priors must proper priors (least flat, preferable informative); priors alternative get wider, likelihood null value(s) increases, extreme completely flat priors null infinitely favorable alternative (called Jeffreys-Lindley-Bartlett paradox). Thus, ever try (want) compute Bayes factor informed prior.  (Note default, brms::brm() uses flat priors fixed-effects; See example .)  important provide correct prior meaningful results. posterior numerical vector, prior also numerical vector. posterior data.frame, prior also data.frame, matching column order. posterior stanreg, brmsfit supported Bayesian model: prior can set NULL, case prior samples drawn internally. prior can also model equivalent posterior samples priors . See unupdate(). Note: posterior brmsfit_multiple model, prior must provided. posterior emmGrid / emm_list object: prior also emmGrid / emm_list object equivalent posterior created model priors samples . See unupdate(). prior can also original (posterior) model. , function try update emmGrid / emm_list use unupdate()d prior-model. (done brmsfit models.) Note: emmGrid undergone transformations (\"log\", \"response\", etc.), regriding, prior must emmGrid object, stated .","code":""},{"path":"https://easystats.github.io/bayestestR/reference/si.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Compute Support Intervals — si","text":"Wagenmakers, E., Gronau, Q. F., Dablander, F., & Etz, . (2018, November 22). Support Interval. doi:10.31234/osf.io/zwnxb","code":""},{"path":[]},{"path":"https://easystats.github.io/bayestestR/reference/si.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute Support Intervals — si","text":"","code":"library(bayestestR)  prior <- distribution_normal(1000, mean = 0, sd = 1) posterior <- distribution_normal(1000, mean = .5, sd = .3)  si(posterior, prior) #> Warning: Support intervals might not be precise. #>   For precise support intervals, sampling at least 40,000 posterior #>   samples is recommended. #> BF = 1 SI: [0.04, 1.04] # \\dontrun{ # rstanarm models # --------------- library(rstanarm) contrasts(sleep$group) <- contr.equalprior_pairs # see vignette stan_model <- stan_lmer(extra ~ group + (1 | ID), data = sleep) #>  #> SAMPLING FOR MODEL 'continuous' NOW (CHAIN 1). #> Chain 1:  #> Chain 1: Gradient evaluation took 2.8e-05 seconds #> Chain 1: 1000 transitions using 10 leapfrog steps per transition would take 0.28 seconds. #> Chain 1: Adjust your expectations accordingly! #> Chain 1:  #> Chain 1:  #> Chain 1: Iteration:    1 / 2000 [  0%]  (Warmup) #> Chain 1: Iteration:  200 / 2000 [ 10%]  (Warmup) #> Chain 1: Iteration:  400 / 2000 [ 20%]  (Warmup) #> Chain 1: Iteration:  600 / 2000 [ 30%]  (Warmup) #> Chain 1: Iteration:  800 / 2000 [ 40%]  (Warmup) #> Chain 1: Iteration: 1000 / 2000 [ 50%]  (Warmup) #> Chain 1: Iteration: 1001 / 2000 [ 50%]  (Sampling) #> Chain 1: Iteration: 1200 / 2000 [ 60%]  (Sampling) #> Chain 1: Iteration: 1400 / 2000 [ 70%]  (Sampling) #> Chain 1: Iteration: 1600 / 2000 [ 80%]  (Sampling) #> Chain 1: Iteration: 1800 / 2000 [ 90%]  (Sampling) #> Chain 1: Iteration: 2000 / 2000 [100%]  (Sampling) #> Chain 1:  #> Chain 1:  Elapsed Time: 0.28 seconds (Warm-up) #> Chain 1:                0.297 seconds (Sampling) #> Chain 1:                0.577 seconds (Total) #> Chain 1:  #>  #> SAMPLING FOR MODEL 'continuous' NOW (CHAIN 2). #> Chain 2:  #> Chain 2: Gradient evaluation took 2.1e-05 seconds #> Chain 2: 1000 transitions using 10 leapfrog steps per transition would take 0.21 seconds. #> Chain 2: Adjust your expectations accordingly! #> Chain 2:  #> Chain 2:  #> Chain 2: Iteration:    1 / 2000 [  0%]  (Warmup) #> Chain 2: Iteration:  200 / 2000 [ 10%]  (Warmup) #> Chain 2: Iteration:  400 / 2000 [ 20%]  (Warmup) #> Chain 2: Iteration:  600 / 2000 [ 30%]  (Warmup) #> Chain 2: Iteration:  800 / 2000 [ 40%]  (Warmup) #> Chain 2: Iteration: 1000 / 2000 [ 50%]  (Warmup) #> Chain 2: Iteration: 1001 / 2000 [ 50%]  (Sampling) #> Chain 2: Iteration: 1200 / 2000 [ 60%]  (Sampling) #> Chain 2: Iteration: 1400 / 2000 [ 70%]  (Sampling) #> Chain 2: Iteration: 1600 / 2000 [ 80%]  (Sampling) #> Chain 2: Iteration: 1800 / 2000 [ 90%]  (Sampling) #> Chain 2: Iteration: 2000 / 2000 [100%]  (Sampling) #> Chain 2:  #> Chain 2:  Elapsed Time: 0.251 seconds (Warm-up) #> Chain 2:                0.209 seconds (Sampling) #> Chain 2:                0.46 seconds (Total) #> Chain 2:  #>  #> SAMPLING FOR MODEL 'continuous' NOW (CHAIN 3). #> Chain 3:  #> Chain 3: Gradient evaluation took 1.8e-05 seconds #> Chain 3: 1000 transitions using 10 leapfrog steps per transition would take 0.18 seconds. #> Chain 3: Adjust your expectations accordingly! #> Chain 3:  #> Chain 3:  #> Chain 3: Iteration:    1 / 2000 [  0%]  (Warmup) #> Chain 3: Iteration:  200 / 2000 [ 10%]  (Warmup) #> Chain 3: Iteration:  400 / 2000 [ 20%]  (Warmup) #> Chain 3: Iteration:  600 / 2000 [ 30%]  (Warmup) #> Chain 3: Iteration:  800 / 2000 [ 40%]  (Warmup) #> Chain 3: Iteration: 1000 / 2000 [ 50%]  (Warmup) #> Chain 3: Iteration: 1001 / 2000 [ 50%]  (Sampling) #> Chain 3: Iteration: 1200 / 2000 [ 60%]  (Sampling) #> Chain 3: Iteration: 1400 / 2000 [ 70%]  (Sampling) #> Chain 3: Iteration: 1600 / 2000 [ 80%]  (Sampling) #> Chain 3: Iteration: 1800 / 2000 [ 90%]  (Sampling) #> Chain 3: Iteration: 2000 / 2000 [100%]  (Sampling) #> Chain 3:  #> Chain 3:  Elapsed Time: 0.278 seconds (Warm-up) #> Chain 3:                0.205 seconds (Sampling) #> Chain 3:                0.483 seconds (Total) #> Chain 3:  #>  #> SAMPLING FOR MODEL 'continuous' NOW (CHAIN 4). #> Chain 4:  #> Chain 4: Gradient evaluation took 1.8e-05 seconds #> Chain 4: 1000 transitions using 10 leapfrog steps per transition would take 0.18 seconds. #> Chain 4: Adjust your expectations accordingly! #> Chain 4:  #> Chain 4:  #> Chain 4: Iteration:    1 / 2000 [  0%]  (Warmup) #> Chain 4: Iteration:  200 / 2000 [ 10%]  (Warmup) #> Chain 4: Iteration:  400 / 2000 [ 20%]  (Warmup) #> Chain 4: Iteration:  600 / 2000 [ 30%]  (Warmup) #> Chain 4: Iteration:  800 / 2000 [ 40%]  (Warmup) #> Chain 4: Iteration: 1000 / 2000 [ 50%]  (Warmup) #> Chain 4: Iteration: 1001 / 2000 [ 50%]  (Sampling) #> Chain 4: Iteration: 1200 / 2000 [ 60%]  (Sampling) #> Chain 4: Iteration: 1400 / 2000 [ 70%]  (Sampling) #> Chain 4: Iteration: 1600 / 2000 [ 80%]  (Sampling) #> Chain 4: Iteration: 1800 / 2000 [ 90%]  (Sampling) #> Chain 4: Iteration: 2000 / 2000 [100%]  (Sampling) #> Chain 4:  #> Chain 4:  Elapsed Time: 0.293 seconds (Warm-up) #> Chain 4:                0.229 seconds (Sampling) #> Chain 4:                0.522 seconds (Total) #> Chain 4:  si(stan_model) #> Sampling priors, please wait... #> Warning: Support intervals might not be precise. #>   For precise support intervals, sampling at least 40,000 posterior #>   samples is recommended. #> Support Interval #>  #> Parameter   |    BF = 1 SI | Effects |   Component #> -------------------------------------------------- #> (Intercept) | [0.41, 2.74] |   fixed | conditional #> group1      | [0.42, 2.74] |   fixed | conditional si(stan_model, BF = 3) #> Sampling priors, please wait... #> Warning: Support intervals might not be precise. #>   For precise support intervals, sampling at least 40,000 posterior #>   samples is recommended. #> Support Interval #>  #> Parameter   |    BF = 3 SI | Effects |   Component #> -------------------------------------------------- #> (Intercept) | [0.80, 2.34] |   fixed | conditional #> group1      | [0.66, 2.43] |   fixed | conditional  # emmGrid objects # --------------- library(emmeans) group_diff <- pairs(emmeans(stan_model, ~group)) #> Warning: Model has 0 prior weights, but we recovered 20 rows of data. #> So prior weights were ignored. si(group_diff, prior = stan_model) #> Sampling priors, please wait... #> Warning: Model has 0 prior weights, but we recovered 20 rows of data. #> So prior weights were ignored. #> Warning: Support intervals might not be precise. #>   For precise support intervals, sampling at least 40,000 posterior #>   samples is recommended. #> Support Interval #>  #> Parameter       |      BF = 1 SI #> -------------------------------- #> group1 - group2 | [-2.73, -0.43]  # brms models # ----------- library(brms) contrasts(sleep$group) <- contr.equalprior_pairs # see vingette my_custom_priors <-   set_prior(\"student_t(3, 0, 1)\", class = \"b\") +   set_prior(\"student_t(3, 0, 1)\", class = \"sd\", group = \"ID\")  brms_model <- suppressWarnings(brm(extra ~ group + (1 | ID),   data = sleep,   prior = my_custom_priors,   refresh = 0 )) #> Compiling Stan program... #> Start sampling si(brms_model) #> Sampling priors, please wait... #> Warning: Support intervals might not be precise. #>   For precise support intervals, sampling at least 40,000 posterior #>   samples is recommended. #> Support Interval #>  #> Parameter   |    BF = 1 SI | Effects |   Component #> -------------------------------------------------- #> b_Intercept | [0.52, 2.48] |   fixed | conditional #> b_group1    | [0.72, 2.41] |   fixed | conditional # }"},{"path":"https://easystats.github.io/bayestestR/reference/simulate_correlation.html","id":null,"dir":"Reference","previous_headings":"","what":"Data Simulation — simulate_correlation","title":"Data Simulation — simulate_correlation","text":"Simulate data specific characteristics.","code":""},{"path":"https://easystats.github.io/bayestestR/reference/simulate_correlation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Data Simulation — simulate_correlation","text":"","code":"simulate_correlation(n = 100, r = 0.5, mean = 0, sd = 1, names = NULL, ...)  simulate_ttest(n = 100, d = 0.5, names = NULL, ...)  simulate_difference(n = 100, d = 0.5, names = NULL, ...)"},{"path":"https://easystats.github.io/bayestestR/reference/simulate_correlation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Data Simulation — simulate_correlation","text":"n number observations generated. r value vector corresponding desired correlation coefficients. mean value vector corresponding mean variables. sd value vector corresponding SD variables. names character vector desired variable names. ... Arguments passed methods. d value vector corresponding desired difference groups.","code":""},{"path":"https://easystats.github.io/bayestestR/reference/simulate_correlation.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Data Simulation — simulate_correlation","text":"","code":"# Correlation -------------------------------- data <- simulate_correlation(r = 0.5) plot(data$V1, data$V2)  cor.test(data$V1, data$V2) #>  #> \tPearson's product-moment correlation #>  #> data:  data$V1 and data$V2 #> t = 5.7155, df = 98, p-value = 1.18e-07 #> alternative hypothesis: true correlation is not equal to 0 #> 95 percent confidence interval: #>  0.3366433 0.6341398 #> sample estimates: #> cor  #> 0.5  #>  summary(lm(V2 ~ V1, data = data)) #>  #> Call: #> lm(formula = V2 ~ V1, data = data) #>  #> Residuals: #>      Min       1Q   Median       3Q      Max  #> -2.16918 -0.49767 -0.06732  0.45637  2.15963  #>  #> Coefficients: #>               Estimate Std. Error t value Pr(>|t|)     #> (Intercept) -7.345e-18  8.704e-02   0.000        1     #> V1           5.000e-01  8.748e-02   5.715 1.18e-07 *** #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> Residual standard error: 0.8704 on 98 degrees of freedom #> Multiple R-squared:   0.25,\tAdjusted R-squared:  0.2423  #> F-statistic: 32.67 on 1 and 98 DF,  p-value: 1.18e-07 #>   # Specify mean and SD data <- simulate_correlation(r = 0.5, n = 50, mean = c(0, 1), sd = c(0.7, 1.7)) cor.test(data$V1, data$V2) #>  #> \tPearson's product-moment correlation #>  #> data:  data$V1 and data$V2 #> t = 4, df = 48, p-value = 0.000218 #> alternative hypothesis: true correlation is not equal to 0 #> 95 percent confidence interval: #>  0.2574879 0.6832563 #> sample estimates: #> cor  #> 0.5  #>  round(c(mean(data$V1), sd(data$V1)), 1) #> [1] 0.0 0.7 round(c(mean(data$V2), sd(data$V2)), 1) #> [1] 1.0 1.7 summary(lm(V2 ~ V1, data = data)) #>  #> Call: #> lm(formula = V2 ~ V1, data = data) #>  #> Residuals: #>     Min      1Q  Median      3Q     Max  #> -2.9078 -0.9438 -0.1638  0.8995  3.9841  #>  #> Coefficients: #>             Estimate Std. Error t value Pr(>|t|)     #> (Intercept)   1.0000     0.2104   4.754 1.86e-05 *** #> V1            1.2143     0.3036   4.000 0.000218 *** #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> Residual standard error: 1.487 on 48 degrees of freedom #> Multiple R-squared:   0.25,\tAdjusted R-squared:  0.2344  #> F-statistic:    16 on 1 and 48 DF,  p-value: 0.000218 #>   # Generate multiple variables cor_matrix <- matrix(   c(     1.0, 0.2, 0.4,     0.2, 1.0, 0.3,     0.4, 0.3, 1.0   ),   nrow = 3 )  data <- simulate_correlation(r = cor_matrix, names = c(\"y\", \"x1\", \"x2\")) cor(data) #>      y  x1  x2 #> y  1.0 0.2 0.4 #> x1 0.2 1.0 0.3 #> x2 0.4 0.3 1.0 summary(lm(y ~ x1, data = data)) #>  #> Call: #> lm(formula = y ~ x1, data = data) #>  #> Residuals: #>      Min       1Q   Median       3Q      Max  #> -3.00408 -0.57695 -0.04957  0.69355  2.61495  #>  #> Coefficients: #>               Estimate Std. Error t value Pr(>|t|)   #> (Intercept) -9.652e-18  9.848e-02   0.000    1.000   #> x1           2.000e-01  9.897e-02   2.021    0.046 * #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> Residual standard error: 0.9848 on 98 degrees of freedom #> Multiple R-squared:   0.04,\tAdjusted R-squared:  0.0302  #> F-statistic: 4.083 on 1 and 98 DF,  p-value: 0.04604 #>   # t-test -------------------------------- data <- simulate_ttest(n = 30, d = 0.3) plot(data$V1, data$V0)  round(c(mean(data$V1), sd(data$V1)), 1) #> [1] 0 1 diff(t.test(data$V1 ~ data$V0)$estimate) #> mean in group 1  #>      0.04575124  summary(lm(V1 ~ V0, data = data)) #>  #> Call: #> lm(formula = V1 ~ V0, data = data) #>  #> Residuals: #>      Min       1Q   Median       3Q      Max  #> -2.10517 -0.66055 -0.02288  0.63767  2.15092  #>  #> Coefficients: #>             Estimate Std. Error t value Pr(>|t|) #> (Intercept) -0.02288    0.26160  -0.087    0.931 #> V01          0.04575    0.36996   0.124    0.902 #>  #> Residual standard error: 1.013 on 28 degrees of freedom #> Multiple R-squared:  0.0005459,\tAdjusted R-squared:  -0.03515  #> F-statistic: 0.01529 on 1 and 28 DF,  p-value: 0.9025 #>  summary(glm(V0 ~ V1, data = data, family = \"binomial\")) #>  #> Call: #> glm(formula = V0 ~ V1, family = \"binomial\", data = data) #>  #> Coefficients: #>               Estimate Std. Error z value Pr(>|z|) #> (Intercept) -5.752e-17  3.652e-01   0.000    1.000 #> V1           4.775e-02  3.732e-01   0.128    0.898 #>  #> (Dispersion parameter for binomial family taken to be 1) #>  #>     Null deviance: 41.589  on 29  degrees of freedom #> Residual deviance: 41.572  on 28  degrees of freedom #> AIC: 45.572 #>  #> Number of Fisher Scoring iterations: 3 #>   # Difference -------------------------------- data <- simulate_difference(n = 30, d = 0.3) plot(data$V1, data$V0)  round(c(mean(data$V1), sd(data$V1)), 1) #> [1] 0 1 diff(t.test(data$V1 ~ data$V0)$estimate) #> mean in group 1  #>             0.3  summary(lm(V1 ~ V0, data = data)) #>  #> Call: #> lm(formula = V1 ~ V0, data = data) #>  #> Residuals: #>    Min     1Q Median     3Q    Max  #> -1.834 -0.677  0.000  0.677  1.834  #>  #> Coefficients: #>             Estimate Std. Error t value Pr(>|t|) #> (Intercept)  -0.1500     0.2562  -0.586    0.563 #> V01           0.3000     0.3623   0.828    0.415 #>  #> Residual standard error: 0.9922 on 28 degrees of freedom #> Multiple R-squared:  0.0239,\tAdjusted R-squared:  -0.01096  #> F-statistic: 0.6857 on 1 and 28 DF,  p-value: 0.4146 #>  summary(glm(V0 ~ V1, data = data, family = \"binomial\")) #>  #> Call: #> glm(formula = V0 ~ V1, family = \"binomial\", data = data) #>  #> Coefficients: #>              Estimate Std. Error z value Pr(>|z|) #> (Intercept) 2.221e-16  3.696e-01   0.000    1.000 #> V1          3.251e-01  3.877e-01   0.839    0.402 #>  #> (Dispersion parameter for binomial family taken to be 1) #>  #>     Null deviance: 41.589  on 29  degrees of freedom #> Residual deviance: 40.865  on 28  degrees of freedom #> AIC: 44.865 #>  #> Number of Fisher Scoring iterations: 4 #>"},{"path":"https://easystats.github.io/bayestestR/reference/simulate_prior.html","id":null,"dir":"Reference","previous_headings":"","what":"Returns Priors of a Model as Empirical Distributions — simulate_prior","title":"Returns Priors of a Model as Empirical Distributions — simulate_prior","text":"Transforms priors information actual distributions.","code":""},{"path":"https://easystats.github.io/bayestestR/reference/simulate_prior.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Returns Priors of a Model as Empirical Distributions — simulate_prior","text":"","code":"simulate_prior(model, n = 1000, ...)"},{"path":"https://easystats.github.io/bayestestR/reference/simulate_prior.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Returns Priors of a Model as Empirical Distributions — simulate_prior","text":"model stanreg, stanfit, brmsfit, blavaan, MCMCglmm object. n Size simulated prior distributions. ... Currently used.","code":""},{"path":[]},{"path":"https://easystats.github.io/bayestestR/reference/simulate_prior.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Returns Priors of a Model as Empirical Distributions — simulate_prior","text":"","code":"# \\dontrun{ library(bayestestR) if (require(\"rstanarm\")) {   model <- stan_glm(mpg ~ wt + am, data = mtcars, chains = 1, refresh = 0)   simulate_prior(model) } #>       (Intercept)           wt           am #> 1    -29.48895919 -50.67117077 -99.35969268 #> 2    -24.62538077 -45.70051165 -89.61286514 #> 3    -22.20399176 -43.22581126 -84.76029381 #> 4    -20.54372566 -41.52899133 -81.43304669 #> 5    -19.26616155 -40.22329926 -78.87275136 #> 6    -18.22115924 -39.15528929 -76.77852025 #> 7    -17.33324626 -38.24782726 -74.99910312 #> 8    -16.55893057 -37.45646357 -73.44734004 #> 9    -15.87078383 -36.75316600 -72.06826334 #> 10   -15.25035829 -36.11908064 -70.82490296 #> 11   -14.68463134 -35.54089816 -69.69116098 #> 12   -14.16405635 -35.00886175 -68.64790554 #> 13   -13.68141951 -34.51559876 -67.68067983 #> 14   -13.23113238 -34.05539773 -66.77828439 #> 15   -12.80877469 -33.62374105 -65.93186079 #> 16   -12.41078784 -33.21699178 -65.13427743 #> 17   -12.03426309 -32.83217714 -64.37970508 #> 18   -11.67679137 -32.46683501 -63.66331584 #> 19   -11.33635417 -32.11890246 -62.98106456 #> 20   -11.01124290 -31.78663325 -62.32952709 #> 21   -10.69999799 -31.46853572 -61.70577846 #> 22   -10.40136247 -31.16332518 -61.10729958 #> 23   -10.11424576 -30.86988706 -60.53190492 #> 24    -9.83769537 -30.58724790 -59.97768563 #> 25    -9.57087431 -30.31455229 -59.44296437 #> 26    -9.31304305 -30.05104439 -58.92625904 #> 27    -9.06354475 -29.79605292 -58.42625335 #> 28    -8.82179333 -29.54897890 -57.94177276 #> 29    -8.58726358 -29.30928553 -57.47176469 #> 30    -8.35948289 -29.07648983 -57.01528205 #> 31    -8.13802443 -28.85015555 -56.57146946 #> 32    -7.92250139 -28.62988737 -56.13955169 #> 33    -7.71256203 -28.41532581 -55.71882387 #> 34    -7.50788557 -28.20614302 -55.30864314 #> 35    -7.30817862 -28.00203915 -54.90842153 #> 36    -7.11317211 -27.80273920 -54.51761980 #> 37    -6.92261864 -27.60799035 -54.13574218 #> 38    -6.73629024 -27.41755958 -53.76233176 #> 39    -6.55397631 -27.23123167 -53.39696653 #> 40    -6.37548191 -27.04880738 -53.03925581 #> 41    -6.20062624 -26.87010194 -52.68883727 #> 42    -6.02924127 -26.69494362 -52.34537417 #> 43    -5.86117058 -26.52317254 -52.00855303 #> 44    -5.69626827 -26.35463960 -51.67808147 #> 45    -5.53439806 -26.18920551 -51.35368636 #> 46    -5.37543243 -26.02673996 -51.03511216 #> 47    -5.21925189 -25.86712082 -50.72211942 #> 48    -5.06574433 -25.71023350 -50.41448343 #> 49    -4.91480437 -25.55597032 -50.11199304 #> 50    -4.76633288 -25.40422995 -49.81444956 #> 51    -4.62023645 -25.25491694 -49.52166582 #> 52    -4.47642699 -25.10794124 -49.23346526 #> 53    -4.33482129 -24.96321783 -48.94968113 #> 54    -4.19534069 -24.82066630 -48.67015580 #> 55    -4.05791074 -24.68021059 -48.39474008 #> 56    -3.92246092 -24.54177859 -48.12329261 #> 57    -3.78892433 -24.40530194 -47.85567935 #> 58    -3.65723748 -24.27071576 -47.59177303 #> 59    -3.52734003 -24.13795837 -47.33145276 #> 60    -3.39917460 -24.00697114 -47.07460353 #> 61    -3.27268657 -23.87769825 -46.82111591 #> 62    -3.14782393 -23.75008652 -46.57088562 #> 63    -3.02453707 -23.62408527 -46.32381326 #> 64    -2.90277865 -23.49964612 -46.07980397 #> 65    -2.78250349 -23.37672287 -45.83876719 #> 66    -2.66366839 -23.25527140 -45.60061638 #> 67    -2.54623207 -23.13524951 -45.36526877 #> 68    -2.43015501 -23.01661679 -45.13264517 #> 69    -2.31539937 -22.89933459 -44.90266975 #> 70    -2.20192888 -22.78336584 -44.67526985 #> 71    -2.08970880 -22.66867502 -44.45037581 #> 72    -1.97870577 -22.55522805 -44.22792080 #> 73    -1.86888777 -22.44299221 -44.00784065 #> 74    -1.76022407 -22.33193608 -43.79007376 #> 75    -1.65268511 -22.22202945 -43.57456090 #> 76    -1.54624248 -22.11324328 -43.36124513 #> 77    -1.44086885 -22.00554966 -43.15007168 #> 78    -1.33653790 -21.89892167 -42.94098782 #> 79    -1.23322430 -21.79333343 -42.73394277 #> 80    -1.13090363 -21.68875998 -42.52888760 #> 81    -1.02955236 -21.58517727 -42.32577514 #> 82    -0.92914779 -21.48256211 -42.12455992 #> 83    -0.82966803 -21.38089212 -41.92519805 #> 84    -0.73109193 -21.28014568 -41.72764716 #> 85    -0.63339908 -21.18030194 -41.53186634 #> 86    -0.53656976 -21.08134074 -41.33781607 #> 87    -0.44058490 -20.98324260 -41.14545815 #> 88    -0.34542608 -20.88598868 -40.95475563 #> 89    -0.25107546 -20.78956076 -40.76567280 #> 90    -0.15751581 -20.69394121 -40.57817509 #> 91    -0.06473041 -20.59911297 -40.39222901 #> 92     0.02729691 -20.50505950 -40.20780218 #> 93     0.11858180 -20.41176480 -40.02486319 #> 94     0.20913946 -20.31921335 -39.84338162 #> 95     0.29898459 -20.22739012 -39.66332799 #> 96     0.38813146 -20.13628051 -39.48467368 #> 97     0.47659393 -20.04587038 -39.30739097 #> 98     0.56438541 -19.95614600 -39.13145293 #> 99     0.65151895 -19.86709405 -38.95683343 #> 100    0.73800722 -19.77870159 -38.78350711 #> 101    0.82386249 -19.69095605 -38.61144932 #> 102    0.90909672 -19.60384523 -38.44063612 #> 103    0.99372152 -19.51735726 -38.27104425 #> 104    1.07774818 -19.43148060 -38.10265110 #> 105    1.16118766 -19.34620404 -37.93543467 #> 106    1.24405064 -19.26151668 -37.76937357 #> 107    1.32634750 -19.17740790 -37.60444700 #> 108    1.40808835 -19.09386737 -37.44063469 #> 109    1.48928303 -19.01088505 -37.27791695 #> 110    1.56994110 -18.92845114 -37.11627458 #> 111    1.65007191 -18.84655610 -36.95568888 #> 112    1.72968453 -18.76519066 -36.79614165 #> 113    1.80878781 -18.68434577 -36.63761514 #> 114    1.88739040 -18.60401260 -36.48009207 #> 115    1.96550069 -18.52418257 -36.32355557 #> 116    2.04312689 -18.44484728 -36.16798921 #> 117    2.12027700 -18.36599857 -36.01337696 #> 118    2.19695882 -18.28762846 -35.85970318 #> 119    2.27317996 -18.20972917 -35.70695262 #> 120    2.34894785 -18.13229310 -35.55511039 #> 121    2.42426975 -18.05531285 -35.40416195 #> 122    2.49915274 -17.97878118 -35.25409312 #> 123    2.57360372 -17.90269102 -35.10489004 #> 124    2.64762945 -17.82703547 -34.95653917 #> 125    2.72123654 -17.75180779 -34.80902730 #> 126    2.79443142 -17.67700139 -34.66234151 #> 127    2.86722039 -17.60260984 -34.51646917 #> 128    2.93960961 -17.52862683 -34.37139794 #> 129    3.01160511 -17.45504622 -34.22711577 #> 130    3.08321276 -17.38186199 -34.08361085 #> 131    3.15443832 -17.30906827 -33.94087165 #> 132    3.22528743 -17.23665928 -33.79888689 #> 133    3.29576559 -17.16462942 -33.65764552 #> 134    3.36587820 -17.09297315 -33.51713674 #> 135    3.43563052 -17.02168511 -33.37734998 #> 136    3.50502772 -16.95075999 -33.23827490 #> 137    3.57407486 -16.88019266 -33.09990136 #> 138    3.64277688 -16.80997803 -32.96221945 #> 139    3.71113864 -16.74011116 -32.82521945 #> 140    3.77916488 -16.67058720 -32.68889184 #> 141    3.84686025 -16.60140139 -32.55322731 #> 142    3.91422930 -16.53254908 -32.41821673 #> 143    3.98127651 -16.46402570 -32.28385114 #> 144    4.04800624 -16.39582679 -32.15012178 #> 145    4.11442279 -16.32794796 -32.01702006 #> 146    4.18053037 -16.26038490 -31.88453754 #> 147    4.24633308 -16.19313342 -31.75266597 #> 148    4.31183498 -16.12618937 -31.62139725 #> 149    4.37704004 -16.05954871 -31.49072342 #> 150    4.44195213 -15.99320746 -31.36063671 #> 151    4.50657507 -15.92716172 -31.23112945 #> 152    4.57091261 -15.86140767 -31.10219416 #> 153    4.63496842 -15.79594155 -30.97382346 #> 154    4.69874610 -15.73075968 -30.84601015 #> 155    4.76224920 -15.66585845 -30.71874712 #> 156    4.82548118 -15.60123430 -30.59202742 #> 157    4.88844545 -15.53688376 -30.46584422 #> 158    4.95114536 -15.47280339 -30.34019081 #> 159    5.01358420 -15.40898984 -30.21506060 #> 160    5.07576519 -15.34543982 -30.09044711 #> 161    5.13769152 -15.28215007 -29.96634400 #> 162    5.19936629 -15.21911742 -29.84274503 #> 163    5.26079256 -15.15633874 -29.71964405 #> 164    5.32197334 -15.09381095 -29.59703504 #> 165    5.38291158 -15.03153103 -29.47491209 #> 166    5.44361020 -14.96949602 -29.35326936 #> 167    5.50407204 -14.90770300 -29.23210114 #> 168    5.56429991 -14.84614910 -29.11140180 #> 169    5.62429657 -14.78483150 -28.99116583 #> 170    5.68406474 -14.72374743 -28.87138777 #> 171    5.74360707 -14.66289417 -28.75206229 #> 172    5.80292619 -14.60226902 -28.63318412 #> 173    5.86202469 -14.54186936 -28.51474811 #> 174    5.92090509 -14.48169260 -28.39674915 #> 175    5.97956990 -14.42173617 -28.27918226 #> 176    6.03802158 -14.36199757 -28.16204251 #> 177    6.09626253 -14.30247434 -28.04532505 #> 178    6.15429514 -14.24316404 -27.92902512 #> 179    6.21212174 -14.18406427 -27.81313804 #> 180    6.26974464 -14.12517269 -27.69765917 #> 181    6.32716611 -14.06648698 -27.58258399 #> 182    6.38438838 -14.00800486 -27.46790803 #> 183    6.44141364 -13.94972408 -27.35362686 #> 184    6.49824406 -13.89164244 -27.23973617 #> 185    6.55488177 -13.83375775 -27.12623169 #> 186    6.61132886 -13.77606787 -27.01310920 #> 187    6.66758741 -13.71857068 -26.90036458 #> 188    6.72365944 -13.66126413 -26.78799373 #> 189    6.77954695 -13.60414614 -26.67599266 #> 190    6.83525194 -13.54721471 -26.56435740 #> 191    6.89077633 -13.49046784 -26.45308404 #> 192    6.94612205 -13.43390359 -26.34216877 #> 193    7.00129098 -13.37752001 -26.23160778 #> 194    7.05628498 -13.32131521 -26.12139735 #> 195    7.11110589 -13.26528732 -26.01153380 #> 196    7.16575552 -13.20943448 -25.90201352 #> 197    7.22023564 -13.15375487 -25.79283292 #> 198    7.27454802 -13.09824671 -25.68398851 #> 199    7.32869438 -13.04290822 -25.57547679 #> 200    7.38267643 -12.98773765 -25.46729436 #> 201    7.43649585 -12.93273329 -25.35943784 #> 202    7.49015431 -12.87789344 -25.25190390 #> 203    7.54365344 -12.82321643 -25.14468927 #> 204    7.59699485 -12.76870061 -25.03779071 #> 205    7.65018014 -12.71434435 -24.93120503 #> 206    7.70321087 -12.66014605 -24.82492908 #> 207    7.75608859 -12.60610412 -24.71895976 #> 208    7.80881484 -12.55221701 -24.61329402 #> 209    7.86139112 -12.49848317 -24.50792882 #> 210    7.91381891 -12.44490108 -24.40286118 #> 211    7.96609969 -12.39146924 -24.29808818 #> 212    8.01823491 -12.33818617 -24.19360689 #> 213    8.07022598 -12.28505042 -24.08941447 #> 214    8.12207432 -12.23206054 -23.98550808 #> 215    8.17378133 -12.17921510 -23.88188493 #> 216    8.22534838 -12.12651271 -23.77854228 #> 217    8.27677682 -12.07395198 -23.67547739 #> 218    8.32806800 -12.02153153 -23.57268759 #> 219    8.37922323 -11.96925002 -23.47017023 #> 220    8.43024382 -11.91710612 -23.36792270 #> 221    8.48113106 -11.86509850 -23.26594240 #> 222    8.53188623 -11.81322587 -23.16422679 #> 223    8.58251057 -11.76148693 -23.06277335 #> 224    8.63300533 -11.70988043 -22.96157960 #> 225    8.68337174 -11.65840511 -22.86064307 #> 226    8.73361101 -11.60705973 -22.75996135 #> 227    8.78372433 -11.55584308 -22.65953202 #> 228    8.83371289 -11.50475393 -22.55935273 #> 229    8.88357785 -11.45379110 -22.45942114 #> 230    8.93332036 -11.40295342 -22.35973493 #> 231    8.98294156 -11.35223971 -22.26029182 #> 232    9.03244259 -11.30164882 -22.16108956 #> 233    9.08182455 -11.25117963 -22.06212592 #> 234    9.13108854 -11.20083100 -21.96339869 #> 235    9.18023565 -11.15060182 -21.86490569 #> 236    9.22926695 -11.10049101 -21.76664478 #> 237    9.27818351 -11.05049746 -21.66861383 #> 238    9.32698637 -11.00062012 -21.57081073 #> 239    9.37567657 -10.95085792 -21.47323341 #> 240    9.42425513 -10.90120981 -21.37587981 #> 241    9.47272307 -10.85167476 -21.27874790 #> 242    9.52108139 -10.80225174 -21.18183568 #> 243    9.56933108 -10.75293974 -21.08514115 #> 244    9.61747311 -10.70373777 -20.98866237 #> 245    9.66550847 -10.65464482 -20.89239737 #> 246    9.71343811 -10.60565993 -20.79634425 #> 247    9.76126296 -10.55678212 -20.70050111 #> 248    9.80898398 -10.50801043 -20.60486607 #> 249    9.85660209 -10.45934393 -20.50943726 #> 250    9.90411820 -10.41078166 -20.41421287 #> 251    9.95153321 -10.36232271 -20.31919106 #> 252    9.99884804 -10.31396617 -20.22437005 #> 253   10.04606356 -10.26571111 -20.12974805 #> 254   10.09318065 -10.21755665 -20.03532330 #> 255   10.14020018 -10.16950190 -19.94109407 #> 256   10.18712301 -10.12154597 -19.84705863 #> 257   10.23394999 -10.07368801 -19.75321528 #> 258   10.28068196 -10.02592715 -19.65956234 #> 259   10.32731975  -9.97826254 -19.56609813 #> 260   10.37386419  -9.93069334 -19.47282100 #> 261   10.42031609  -9.88321871 -19.37972932 #> 262   10.46667626  -9.83583784 -19.28682148 #> 263   10.51294550  -9.78854990 -19.19409587 #> 264   10.55912460  -9.74135408 -19.10155090 #> 265   10.60521433  -9.69424959 -19.00918501 #> 266   10.65121549  -9.64723563 -18.91699665 #> 267   10.69712883  -9.60031143 -18.82498428 #> 268   10.74295511  -9.55347620 -18.73314638 #> 269   10.78869508  -9.50672918 -18.64148144 #> 270   10.83434949  -9.46006960 -18.54998796 #> 271   10.87991908  -9.41349671 -18.45866448 #> 272   10.92540457  -9.36700977 -18.36750953 #> 273   10.97080670  -9.32060803 -18.27652165 #> 274   11.01612616  -9.27429077 -18.18569943 #> 275   11.06136368  -9.22805727 -18.09504142 #> 276   11.10651996  -9.18190679 -18.00454624 #> 277   11.15159568  -9.13583864 -17.91421248 #> 278   11.19659155  -9.08985211 -17.82403877 #> 279   11.24150823  -9.04394650 -17.73402373 #> 280   11.28634642  -8.99812112 -17.64416601 #> 281   11.33110677  -8.95237528 -17.55446427 #> 282   11.37578995  -8.90670832 -17.46491719 #> 283   11.42039663  -8.86111955 -17.37552343 #> 284   11.46492744  -8.81560831 -17.28628171 #> 285   11.50938303  -8.77017394 -17.19719072 #> 286   11.55376405  -8.72481579 -17.10824918 #> 287   11.59807112  -8.67953321 -17.01945583 #> 288   11.64230489  -8.63432557 -16.93080940 #> 289   11.68646595  -8.58919221 -16.84230866 #> 290   11.73055495  -8.54413251 -16.75395236 #> 291   11.77457247  -8.49914586 -16.66573927 #> 292   11.81851914  -8.45423162 -16.57766819 #> 293   11.86239555  -8.40938919 -16.48973791 #> 294   11.90620230  -8.36461796 -16.40194724 #> 295   11.94993998  -8.31991732 -16.31429500 #> 296   11.99360916  -8.27528667 -16.22678001 #> 297   12.03721044  -8.23072544 -16.13940111 #> 298   12.08074438  -8.18623301 -16.05215715 #> 299   12.12421156  -8.14180882 -15.96504699 #> 300   12.16761254  -8.09745229 -15.87806950 #> 301   12.21094788  -8.05316284 -15.79122354 #> 302   12.25421814  -8.00893991 -15.70450802 #> 303   12.29742386  -7.96478293 -15.61792182 #> 304   12.34056561  -7.92069134 -15.53146385 #> 305   12.38364390  -7.87666459 -15.44513303 #> 306   12.42665930  -7.83270214 -15.35892827 #> 307   12.46961232  -7.78880343 -15.27284851 #> 308   12.51250349  -7.74496792 -15.18689268 #> 309   12.55533334  -7.70119509 -15.10105975 #> 310   12.59810240  -7.65748440 -15.01534866 #> 311   12.64081117  -7.61383531 -14.92975839 #> 312   12.68346017  -7.57024732 -14.84428789 #> 313   12.72604990  -7.52671989 -14.75893617 #> 314   12.76858088  -7.48325252 -14.67370221 #> 315   12.81105359  -7.43984469 -14.58858500 #> 316   12.85346854  -7.39649589 -14.50358355 #> 317   12.89582622  -7.35320563 -14.41869688 #> 318   12.93812711  -7.30997341 -14.33392401 #> 319   12.98037170  -7.26679872 -14.24926396 #> 320   13.02256048  -7.22368108 -14.16471578 #> 321   13.06469391  -7.18062000 -14.08027851 #> 322   13.10677248  -7.13761500 -13.99595119 #> 323   13.14879665  -7.09466559 -13.91173289 #> 324   13.19076688  -7.05177130 -13.82762266 #> 325   13.23268365  -7.00893166 -13.74361960 #> 326   13.27454741  -6.96614619 -13.65972276 #> 327   13.31635862  -6.92341443 -13.57593124 #> 328   13.35811773  -6.88073592 -13.49224413 #> 329   13.39982519  -6.83811019 -13.40866052 #> 330   13.44148144  -6.79553680 -13.32517953 #> 331   13.48308694  -6.75301528 -13.24180027 #> 332   13.52464211  -6.71054519 -13.15852185 #> 333   13.56614741  -6.66812608 -13.07534340 #> 334   13.60760325  -6.62575751 -12.99226404 #> 335   13.64901007  -6.58343904 -12.90928293 #> 336   13.69036830  -6.54117023 -12.82639919 #> 337   13.73167837  -6.49895064 -12.74361197 #> 338   13.77294069  -6.45677985 -12.66092044 #> 339   13.81415569  -6.41465743 -12.57832375 #> 340   13.85532378  -6.37258295 -12.49582107 #> 341   13.89644537  -6.33055599 -12.41341157 #> 342   13.93752088  -6.28857613 -12.33109443 #> 343   13.97855071  -6.24664295 -12.24886882 #> 344   14.01953527  -6.20475604 -12.16673395 #> 345   14.06047496  -6.16291499 -12.08468899 #> 346   14.10137017  -6.12111939 -12.00273316 #> 347   14.14222132  -6.07936883 -11.92086565 #> 348   14.18302878  -6.03766292 -11.83908567 #> 349   14.22379296  -5.99600124 -11.75739245 #> 350   14.26451424  -5.95438340 -11.67578519 #> 351   14.30519301  -5.91280902 -11.59426312 #> 352   14.34582965  -5.87127768 -11.51282548 #> 353   14.38642456  -5.82978901 -11.43147149 #> 354   14.42697809  -5.78834261 -11.35020040 #> 355   14.46749064  -5.74693810 -11.26901144 #> 356   14.50796258  -5.70557509 -11.18790388 #> 357   14.54839428  -5.66425321 -11.10687695 #> 358   14.58878612  -5.62297208 -11.02592992 #> 359   14.62913845  -5.58173132 -10.94506205 #> 360   14.66945165  -5.54053055 -10.86427261 #> 361   14.70972608  -5.49936940 -10.78356086 #> 362   14.74996210  -5.45824751 -10.70292608 #> 363   14.79016007  -5.41716451 -10.62236756 #> 364   14.83032035  -5.37612002 -10.54188457 #> 365   14.87044329  -5.33511370 -10.46147640 #> 366   14.91052926  -5.29414517 -10.38114235 #> 367   14.95057859  -5.25321408 -10.30088171 #> 368   14.99059164  -5.21232007 -10.22069378 #> 369   15.03056875  -5.17146278 -10.14057786 #> 370   15.07051028  -5.13064187 -10.06053327 #> 371   15.11041656  -5.08985698  -9.98055931 #> 372   15.15028793  -5.04910776  -9.90065530 #> 373   15.19012474  -5.00839387  -9.82082056 #> 374   15.22992733  -4.96771495  -9.74105440 #> 375   15.26969602  -4.92707068  -9.66135617 #> 376   15.30943116  -4.88646070  -9.58172519 #> 377   15.34913308  -4.84588467  -9.50216078 #> 378   15.38880210  -4.80534226  -9.42266230 #> 379   15.42843855  -4.76483314  -9.34322907 #> 380   15.46804277  -4.72435695  -9.26386045 #> 381   15.50761508  -4.68391339  -9.18455579 #> 382   15.54715581  -4.64350210  -9.10531442 #> 383   15.58666526  -4.60312277  -9.02613571 #> 384   15.62614378  -4.56277507  -8.94701901 #> 385   15.66559166  -4.52245866  -8.86796369 #> 386   15.70500924  -4.48217323  -8.78896911 #> 387   15.74439683  -4.44191845  -8.71003463 #> 388   15.78375474  -4.40169400  -8.63115963 #> 389   15.82308328  -4.36149957  -8.55234348 #> 390   15.86238278  -4.32133483  -8.47358555 #> 391   15.90165352  -4.28119946  -8.39488522 #> 392   15.94089584  -4.24109315  -8.31624188 #> 393   15.98011002  -4.20101560  -8.23765491 #> 394   16.01929638  -4.16096648  -8.15912370 #> 395   16.05845522  -4.12094548  -8.08064764 #> 396   16.09758685  -4.08095230  -8.00222611 #> 397   16.13669156  -4.04098662  -7.92385853 #> 398   16.17576966  -4.00104815  -7.84554428 #> 399   16.21482144  -3.96113657  -7.76728277 #> 400   16.25384721  -3.92125158  -7.68907341 #> 401   16.29284725  -3.88139288  -7.61091559 #> 402   16.33182186  -3.84156017  -7.53280873 #> 403   16.37077134  -3.80175314  -7.45475224 #> 404   16.40969598  -3.76197150  -7.37674553 #> 405   16.44859607  -3.72221496  -7.29878802 #> 406   16.48747190  -3.68248321  -7.22087913 #> 407   16.52632376  -3.64277595  -7.14301828 #> 408   16.56515193  -3.60309291  -7.06520490 #> 409   16.60395670  -3.56343377  -6.98743840 #> 410   16.64273836  -3.52379826  -6.90971823 #> 411   16.68149720  -3.48418608  -6.83204380 #> 412   16.72023348  -3.44459694  -6.75441456 #> 413   16.75894751  -3.40503056  -6.67682993 #> 414   16.79763955  -3.36548664  -6.59928936 #> 415   16.83630989  -3.32596490  -6.52179228 #> 416   16.87495880  -3.28646506  -6.44433813 #> 417   16.91358657  -3.24698683  -6.36692637 #> 418   16.95219347  -3.20752992  -6.28955642 #> 419   16.99077978  -3.16809407  -6.21222775 #> 420   17.02934576  -3.12867898  -6.13493980 #> 421   17.06789170  -3.08928438  -6.05769202 #> 422   17.10641787  -3.04990999  -5.98048386 #> 423   17.14492454  -3.01055552  -5.90331478 #> 424   17.18341198  -2.97122071  -5.82618424 #> 425   17.22188046  -2.93190528  -5.74909170 #> 426   17.26033025  -2.89260895  -5.67203661 #> 427   17.29876161  -2.85333144  -5.59501844 #> 428   17.33717483  -2.81407249  -5.51803666 #> 429   17.37557015  -2.77483182  -5.44109072 #> 430   17.41394785  -2.73560916  -5.36418010 #> 431   17.45230820  -2.69640425  -5.28730426 #> 432   17.49065145  -2.65721680  -5.21046268 #> 433   17.52897787  -2.61804655  -5.13365483 #> 434   17.56728772  -2.57889323  -5.05688017 #> 435   17.60558127  -2.53975658  -4.98013820 #> 436   17.64385878  -2.50063633  -4.90342838 #> 437   17.68212049  -2.46153220  -4.82675019 #> 438   17.72036669  -2.42244395  -4.75010312 #> 439   17.75859762  -2.38337129  -4.67348663 #> 440   17.79681354  -2.34431398  -4.59690023 #> 441   17.83501471  -2.30527174  -4.52034338 #> 442   17.87320139  -2.26624431  -4.44381558 #> 443   17.91137383  -2.22723144  -4.36731632 #> 444   17.94953228  -2.18823285  -4.29084507 #> 445   17.98767701  -2.14924829  -4.21440134 #> 446   18.02580827  -2.11027751  -4.13798460 #> 447   18.06392630  -2.07132023  -4.06159436 #> 448   18.10203137  -2.03237621  -3.98523010 #> 449   18.14012373  -1.99344518  -3.90889133 #> 450   18.17820362  -1.95452688  -3.83257753 #> 451   18.21627131  -1.91562107  -3.75628820 #> 452   18.25432703  -1.87672748  -3.68002284 #> 453   18.29237104  -1.83784586  -3.60378095 #> 454   18.33040359  -1.79897595  -3.52756203 #> 455   18.36842493  -1.76011750  -3.45136557 #> 456   18.40643530  -1.72127026  -3.37519109 #> 457   18.44443496  -1.68243397  -3.29903808 #> 458   18.48242415  -1.64360837  -3.22290605 #> 459   18.52040313  -1.60479322  -3.14679450 #> 460   18.55837212  -1.56598827  -3.07070294 #> 461   18.59633139  -1.52719325  -2.99463087 #> 462   18.63428118  -1.48840793  -2.91857781 #> 463   18.67222174  -1.44963205  -2.84254325 #> 464   18.71015330  -1.41086535  -2.76652672 #> 465   18.74807611  -1.37210760  -2.69052771 #> 466   18.78599042  -1.33335853  -2.61454574 #> 467   18.82389647  -1.29461791  -2.53858033 #> 468   18.86179451  -1.25588547  -2.46263098 #> 469   18.89968477  -1.21716099  -2.38669720 #> 470   18.93756751  -1.17844419  -2.31077852 #> 471   18.97544296  -1.13973485  -2.23487444 #> 472   19.01331136  -1.10103270  -2.15898447 #> 473   19.05117296  -1.06233751  -2.08310815 #> 474   19.08902799  -1.02364903  -2.00724497 #> 475   19.12687670  -0.98496700  -1.93139446 #> 476   19.16471934  -0.94629119  -1.85555614 #> 477   19.20255613  -0.90762135  -1.77972952 #> 478   19.24038733  -0.86895723  -1.70391412 #> 479   19.27821316  -0.83029859  -1.62810946 #> 480   19.31603388  -0.79164518  -1.55231507 #> 481   19.35384972  -0.75299676  -1.47653045 #> 482   19.39166091  -0.71435308  -1.40075513 #> 483   19.42946771  -0.67571390  -1.32498863 #> 484   19.46727034  -0.63707897  -1.24923047 #> 485   19.50506905  -0.59844805  -1.17348017 #> 486   19.54286408  -0.55982090  -1.09773726 #> 487   19.58065566  -0.52119727  -1.02200126 #> 488   19.61844403  -0.48257691  -0.94627168 #> 489   19.65622943  -0.44395960  -0.87054806 #> 490   19.69401210  -0.40534507  -0.79482991 #> 491   19.73179227  -0.36673310  -0.71911675 #> 492   19.76957019  -0.32812343  -0.64340812 #> 493   19.80734609  -0.28951582  -0.56770353 #> 494   19.84512021  -0.25091003  -0.49200252 #> 495   19.88289279  -0.21230582  -0.41630459 #> 496   19.92066406  -0.17370294  -0.34060928 #> 497   19.95843427  -0.13510116  -0.26491611 #> 498   19.99620364  -0.09650022  -0.18922460 #> 499   20.03397242  -0.05789989  -0.11353429 #> 500   20.07174085  -0.01929992  -0.03784468 #> 501   20.10950915   0.01929992   0.03784468 #> 502   20.14727758   0.05789989   0.11353429 #> 503   20.18504636   0.09650022   0.18922460 #> 504   20.22281573   0.13510116   0.26491611 #> 505   20.26058594   0.17370294   0.34060928 #> 506   20.29835721   0.21230582   0.41630459 #> 507   20.33612979   0.25091003   0.49200252 #> 508   20.37390391   0.28951582   0.56770353 #> 509   20.41167981   0.32812343   0.64340812 #> 510   20.44945773   0.36673310   0.71911675 #> 511   20.48723790   0.40534507   0.79482991 #> 512   20.52502057   0.44395960   0.87054806 #> 513   20.56280597   0.48257691   0.94627168 #> 514   20.60059434   0.52119727   1.02200126 #> 515   20.63838592   0.55982090   1.09773726 #> 516   20.67618095   0.59844805   1.17348017 #> 517   20.71397966   0.63707897   1.24923047 #> 518   20.75178229   0.67571390   1.32498863 #> 519   20.78958909   0.71435308   1.40075513 #> 520   20.82740028   0.75299676   1.47653045 #> 521   20.86521612   0.79164518   1.55231507 #> 522   20.90303684   0.83029859   1.62810946 #> 523   20.94086267   0.86895723   1.70391412 #> 524   20.97869387   0.90762135   1.77972952 #> 525   21.01653066   0.94629119   1.85555614 #> 526   21.05437330   0.98496700   1.93139446 #> 527   21.09222201   1.02364903   2.00724497 #> 528   21.13007704   1.06233751   2.08310815 #> 529   21.16793864   1.10103270   2.15898447 #> 530   21.20580704   1.13973485   2.23487444 #> 531   21.24368249   1.17844419   2.31077852 #> 532   21.28156523   1.21716099   2.38669720 #> 533   21.31945549   1.25588547   2.46263098 #> 534   21.35735353   1.29461791   2.53858033 #> 535   21.39525958   1.33335853   2.61454574 #> 536   21.43317389   1.37210760   2.69052771 #> 537   21.47109670   1.41086535   2.76652672 #> 538   21.50902826   1.44963205   2.84254325 #> 539   21.54696882   1.48840793   2.91857781 #> 540   21.58491861   1.52719325   2.99463087 #> 541   21.62287788   1.56598827   3.07070294 #> 542   21.66084687   1.60479322   3.14679450 #> 543   21.69882585   1.64360837   3.22290605 #> 544   21.73681504   1.68243397   3.29903808 #> 545   21.77481470   1.72127026   3.37519109 #> 546   21.81282507   1.76011750   3.45136557 #> 547   21.85084641   1.79897595   3.52756203 #> 548   21.88887896   1.83784586   3.60378095 #> 549   21.92692297   1.87672748   3.68002284 #> 550   21.96497869   1.91562107   3.75628820 #> 551   22.00304638   1.95452688   3.83257753 #> 552   22.04112627   1.99344518   3.90889133 #> 553   22.07921863   2.03237621   3.98523010 #> 554   22.11732370   2.07132023   4.06159436 #> 555   22.15544173   2.11027751   4.13798460 #> 556   22.19357299   2.14924829   4.21440134 #> 557   22.23171772   2.18823285   4.29084507 #> 558   22.26987617   2.22723144   4.36731632 #> 559   22.30804861   2.26624431   4.44381558 #> 560   22.34623529   2.30527174   4.52034338 #> 561   22.38443646   2.34431398   4.59690023 #> 562   22.42265238   2.38337129   4.67348663 #> 563   22.46088331   2.42244395   4.75010312 #> 564   22.49912951   2.46153220   4.82675019 #> 565   22.53739122   2.50063633   4.90342838 #> 566   22.57566873   2.53975658   4.98013820 #> 567   22.61396228   2.57889323   5.05688017 #> 568   22.65227213   2.61804655   5.13365483 #> 569   22.69059855   2.65721680   5.21046268 #> 570   22.72894180   2.69640425   5.28730426 #> 571   22.76730215   2.73560916   5.36418010 #> 572   22.80567985   2.77483182   5.44109072 #> 573   22.84407517   2.81407249   5.51803666 #> 574   22.88248839   2.85333144   5.59501844 #> 575   22.92091975   2.89260895   5.67203661 #> 576   22.95936954   2.93190528   5.74909170 #> 577   22.99783802   2.97122071   5.82618424 #> 578   23.03632546   3.01055552   5.90331478 #> 579   23.07483213   3.04990999   5.98048386 #> 580   23.11335830   3.08928438   6.05769202 #> 581   23.15190424   3.12867898   6.13493980 #> 582   23.19047022   3.16809407   6.21222775 #> 583   23.22905653   3.20752992   6.28955642 #> 584   23.26766343   3.24698683   6.36692637 #> 585   23.30629120   3.28646506   6.44433813 #> 586   23.34494011   3.32596490   6.52179228 #> 587   23.38361045   3.36548664   6.59928936 #> 588   23.42230249   3.40503056   6.67682993 #> 589   23.46101652   3.44459694   6.75441456 #> 590   23.49975280   3.48418608   6.83204380 #> 591   23.53851164   3.52379826   6.90971823 #> 592   23.57729330   3.56343377   6.98743840 #> 593   23.61609807   3.60309291   7.06520490 #> 594   23.65492624   3.64277595   7.14301828 #> 595   23.69377810   3.68248321   7.22087913 #> 596   23.73265393   3.72221496   7.29878802 #> 597   23.77155402   3.76197150   7.37674553 #> 598   23.81047866   3.80175314   7.45475224 #> 599   23.84942814   3.84156017   7.53280873 #> 600   23.88840275   3.88139288   7.61091559 #> 601   23.92740279   3.92125158   7.68907341 #> 602   23.96642856   3.96113657   7.76728277 #> 603   24.00548034   4.00104815   7.84554428 #> 604   24.04455844   4.04098662   7.92385853 #> 605   24.08366315   4.08095230   8.00222611 #> 606   24.12279478   4.12094548   8.08064764 #> 607   24.16195362   4.16096648   8.15912370 #> 608   24.20113998   4.20101560   8.23765491 #> 609   24.24035416   4.24109315   8.31624188 #> 610   24.27959648   4.28119946   8.39488522 #> 611   24.31886722   4.32133483   8.47358555 #> 612   24.35816672   4.36149957   8.55234348 #> 613   24.39749526   4.40169400   8.63115963 #> 614   24.43685317   4.44191845   8.71003463 #> 615   24.47624076   4.48217323   8.78896911 #> 616   24.51565834   4.52245866   8.86796369 #> 617   24.55510622   4.56277507   8.94701901 #> 618   24.59458474   4.60312277   9.02613571 #> 619   24.63409419   4.64350210   9.10531442 #> 620   24.67363492   4.68391339   9.18455579 #> 621   24.71320723   4.72435695   9.26386045 #> 622   24.75281145   4.76483314   9.34322907 #> 623   24.79244790   4.80534226   9.42266230 #> 624   24.83211692   4.84588467   9.50216078 #> 625   24.87181884   4.88646070   9.58172519 #> 626   24.91155398   4.92707068   9.66135617 #> 627   24.95132267   4.96771495   9.74105440 #> 628   24.99112526   5.00839387   9.82082056 #> 629   25.03096207   5.04910776   9.90065530 #> 630   25.07083344   5.08985698   9.98055931 #> 631   25.11073972   5.13064187  10.06053327 #> 632   25.15068125   5.17146278  10.14057786 #> 633   25.19065836   5.21232007  10.22069378 #> 634   25.23067141   5.25321408  10.30088171 #> 635   25.27072074   5.29414517  10.38114235 #> 636   25.31080671   5.33511370  10.46147640 #> 637   25.35092965   5.37612002  10.54188457 #> 638   25.39108993   5.41716451  10.62236756 #> 639   25.43128790   5.45824751  10.70292608 #> 640   25.47152392   5.49936940  10.78356086 #> 641   25.51179835   5.54053055  10.86427261 #> 642   25.55211155   5.58173132  10.94506205 #> 643   25.59246388   5.62297208  11.02592992 #> 644   25.63285572   5.66425321  11.10687695 #> 645   25.67328742   5.70557509  11.18790388 #> 646   25.71375936   5.74693810  11.26901144 #> 647   25.75427191   5.78834261  11.35020040 #> 648   25.79482544   5.82978901  11.43147149 #> 649   25.83542035   5.87127768  11.51282548 #> 650   25.87605699   5.91280902  11.59426312 #> 651   25.91673576   5.95438340  11.67578519 #> 652   25.95745704   5.99600124  11.75739245 #> 653   25.99822122   6.03766292  11.83908567 #> 654   26.03902868   6.07936883  11.92086565 #> 655   26.07987983   6.12111939  12.00273316 #> 656   26.12077504   6.16291499  12.08468899 #> 657   26.16171473   6.20475604  12.16673395 #> 658   26.20269929   6.24664295  12.24886882 #> 659   26.24372912   6.28857613  12.33109443 #> 660   26.28480463   6.33055599  12.41341157 #> 661   26.32592622   6.37258295  12.49582107 #> 662   26.36709431   6.41465743  12.57832375 #> 663   26.40830931   6.45677985  12.66092044 #> 664   26.44957163   6.49895064  12.74361197 #> 665   26.49088170   6.54117023  12.82639919 #> 666   26.53223993   6.58343904  12.90928293 #> 667   26.57364675   6.62575751  12.99226404 #> 668   26.61510259   6.66812608  13.07534340 #> 669   26.65660789   6.71054519  13.15852185 #> 670   26.69816306   6.75301528  13.24180027 #> 671   26.73976856   6.79553680  13.32517953 #> 672   26.78142481   6.83811019  13.40866052 #> 673   26.82313227   6.88073592  13.49224413 #> 674   26.86489138   6.92341443  13.57593124 #> 675   26.90670259   6.96614619  13.65972276 #> 676   26.94856635   7.00893166  13.74361960 #> 677   26.99048312   7.05177130  13.82762266 #> 678   27.03245335   7.09466559  13.91173289 #> 679   27.07447752   7.13761500  13.99595119 #> 680   27.11655609   7.18062000  14.08027851 #> 681   27.15868952   7.22368108  14.16471578 #> 682   27.20087830   7.26679872  14.24926396 #> 683   27.24312289   7.30997341  14.33392401 #> 684   27.28542378   7.35320563  14.41869688 #> 685   27.32778146   7.39649589  14.50358355 #> 686   27.37019641   7.43984469  14.58858500 #> 687   27.41266912   7.48325252  14.67370221 #> 688   27.45520010   7.52671989  14.75893617 #> 689   27.49778983   7.57024732  14.84428789 #> 690   27.54043883   7.61383531  14.92975839 #> 691   27.58314760   7.65748440  15.01534866 #> 692   27.62591666   7.70119509  15.10105975 #> 693   27.66874651   7.74496792  15.18689268 #> 694   27.71163768   7.78880343  15.27284851 #> 695   27.75459070   7.83270214  15.35892827 #> 696   27.79760610   7.87666459  15.44513303 #> 697   27.84068439   7.92069134  15.53146385 #> 698   27.88382614   7.96478293  15.61792182 #> 699   27.92703186   8.00893991  15.70450802 #> 700   27.97030212   8.05316284  15.79122354 #> 701   28.01363746   8.09745229  15.87806950 #> 702   28.05703844   8.14180882  15.96504699 #> 703   28.10050562   8.18623301  16.05215715 #> 704   28.14403956   8.23072544  16.13940111 #> 705   28.18764084   8.27528667  16.22678001 #> 706   28.23131002   8.31991732  16.31429500 #> 707   28.27504770   8.36461796  16.40194724 #> 708   28.31885445   8.40938919  16.48973791 #> 709   28.36273086   8.45423162  16.57766819 #> 710   28.40667753   8.49914586  16.66573927 #> 711   28.45069505   8.54413251  16.75395236 #> 712   28.49478405   8.58919221  16.84230866 #> 713   28.53894511   8.63432557  16.93080940 #> 714   28.58317888   8.67953321  17.01945583 #> 715   28.62748595   8.72481579  17.10824918 #> 716   28.67186697   8.77017394  17.19719072 #> 717   28.71632256   8.81560831  17.28628171 #> 718   28.76085337   8.86111955  17.37552343 #> 719   28.80546005   8.90670832  17.46491719 #> 720   28.85014323   8.95237528  17.55446427 #> 721   28.89490358   8.99812112  17.64416601 #> 722   28.93974177   9.04394650  17.73402373 #> 723   28.98465845   9.08985211  17.82403877 #> 724   29.02965432   9.13583864  17.91421248 #> 725   29.07473004   9.18190679  18.00454624 #> 726   29.11988632   9.22805727  18.09504142 #> 727   29.16512384   9.27429077  18.18569943 #> 728   29.21044330   9.32060803  18.27652165 #> 729   29.25584543   9.36700977  18.36750953 #> 730   29.30133092   9.41349671  18.45866448 #> 731   29.34690051   9.46006960  18.54998796 #> 732   29.39255492   9.50672918  18.64148144 #> 733   29.43829489   9.55347620  18.73314638 #> 734   29.48412117   9.60031143  18.82498428 #> 735   29.53003451   9.64723563  18.91699665 #> 736   29.57603567   9.69424959  19.00918501 #> 737   29.62212540   9.74135408  19.10155090 #> 738   29.66830450   9.78854990  19.19409587 #> 739   29.71457374   9.83583784  19.28682148 #> 740   29.76093391   9.88321871  19.37972932 #> 741   29.80738581   9.93069334  19.47282100 #> 742   29.85393025   9.97826254  19.56609813 #> 743   29.90056804  10.02592715  19.65956234 #> 744   29.94730001  10.07368801  19.75321528 #> 745   29.99412699  10.12154597  19.84705863 #> 746   30.04104982  10.16950190  19.94109407 #> 747   30.08806935  10.21755665  20.03532330 #> 748   30.13518644  10.26571111  20.12974805 #> 749   30.18240196  10.31396617  20.22437005 #> 750   30.22971679  10.36232271  20.31919106 #> 751   30.27713180  10.41078166  20.41421287 #> 752   30.32464791  10.45934393  20.50943726 #> 753   30.37226602  10.50801043  20.60486607 #> 754   30.41998704  10.55678212  20.70050111 #> 755   30.46781189  10.60565993  20.79634425 #> 756   30.51574153  10.65464482  20.89239737 #> 757   30.56377689  10.70373777  20.98866237 #> 758   30.61191892  10.75293974  21.08514115 #> 759   30.66016861  10.80225174  21.18183568 #> 760   30.70852693  10.85167476  21.27874790 #> 761   30.75699487  10.90120981  21.37587981 #> 762   30.80557343  10.95085792  21.47323341 #> 763   30.85426363  11.00062012  21.57081073 #> 764   30.90306649  11.05049746  21.66861383 #> 765   30.95198305  11.10049101  21.76664478 #> 766   31.00101435  11.15060182  21.86490569 #> 767   31.05016146  11.20083100  21.96339869 #> 768   31.09942545  11.25117963  22.06212592 #> 769   31.14880741  11.30164882  22.16108956 #> 770   31.19830844  11.35223971  22.26029182 #> 771   31.24792964  11.40295342  22.35973493 #> 772   31.29767215  11.45379110  22.45942114 #> 773   31.34753711  11.50475393  22.55935273 #> 774   31.39752567  11.55584308  22.65953202 #> 775   31.44763899  11.60705973  22.75996135 #> 776   31.49787826  11.65840511  22.86064307 #> 777   31.54824467  11.70988043  22.96157960 #> 778   31.59873943  11.76148693  23.06277335 #> 779   31.64936377  11.81322587  23.16422679 #> 780   31.70011894  11.86509850  23.26594240 #> 781   31.75100618  11.91710612  23.36792270 #> 782   31.80202677  11.96925002  23.47017023 #> 783   31.85318200  12.02153153  23.57268759 #> 784   31.90447318  12.07395198  23.67547739 #> 785   31.95590162  12.12651271  23.77854228 #> 786   32.00746867  12.17921510  23.88188493 #> 787   32.05917568  12.23206054  23.98550808 #> 788   32.11102402  12.28505042  24.08941447 #> 789   32.16301509  12.33818617  24.19360689 #> 790   32.21515031  12.39146924  24.29808818 #> 791   32.26743109  12.44490108  24.40286118 #> 792   32.31985888  12.49848317  24.50792882 #> 793   32.37243516  12.55221701  24.61329402 #> 794   32.42516141  12.60610412  24.71895976 #> 795   32.47803913  12.66014605  24.82492908 #> 796   32.53106986  12.71434435  24.93120503 #> 797   32.58425515  12.76870061  25.03779071 #> 798   32.63759656  12.82321643  25.14468927 #> 799   32.69109569  12.87789344  25.25190390 #> 800   32.74475415  12.93273329  25.35943784 #> 801   32.79857357  12.98773765  25.46729436 #> 802   32.85255562  13.04290822  25.57547679 #> 803   32.90670198  13.09824671  25.68398851 #> 804   32.96101436  13.15375487  25.79283292 #> 805   33.01549448  13.20943448  25.90201352 #> 806   33.07014411  13.26528732  26.01153380 #> 807   33.12496502  13.32131521  26.12139735 #> 808   33.17995902  13.37752001  26.23160778 #> 809   33.23512795  13.43390359  26.34216877 #> 810   33.29047367  13.49046784  26.45308404 #> 811   33.34599806  13.54721471  26.56435740 #> 812   33.40170305  13.60414614  26.67599266 #> 813   33.45759056  13.66126413  26.78799373 #> 814   33.51366259  13.71857068  26.90036458 #> 815   33.56992114  13.77606787  27.01310920 #> 816   33.62636823  13.83375775  27.12623169 #> 817   33.68300594  13.89164244  27.23973617 #> 818   33.73983636  13.94972408  27.35362686 #> 819   33.79686162  14.00800486  27.46790803 #> 820   33.85408389  14.06648698  27.58258399 #> 821   33.91150536  14.12517269  27.69765917 #> 822   33.96912826  14.18406427  27.81313804 #> 823   34.02695486  14.24316404  27.92902512 #> 824   34.08498747  14.30247434  28.04532505 #> 825   34.14322842  14.36199757  28.16204251 #> 826   34.20168010  14.42173617  28.27918226 #> 827   34.26034491  14.48169260  28.39674915 #> 828   34.31922531  14.54186936  28.51474811 #> 829   34.37832381  14.60226902  28.63318412 #> 830   34.43764293  14.66289417  28.75206229 #> 831   34.49718526  14.72374743  28.87138777 #> 832   34.55695343  14.78483150  28.99116583 #> 833   34.61695009  14.84614910  29.11140180 #> 834   34.67717796  14.90770300  29.23210114 #> 835   34.73763980  14.96949602  29.35326936 #> 836   34.79833842  15.03153103  29.47491209 #> 837   34.85927666  15.09381095  29.59703504 #> 838   34.92045744  15.15633874  29.71964405 #> 839   34.98188371  15.21911742  29.84274503 #> 840   35.04355848  15.28215007  29.96634400 #> 841   35.10548481  15.34543982  30.09044711 #> 842   35.16766580  15.40898984  30.21506060 #> 843   35.23010464  15.47280339  30.34019081 #> 844   35.29280455  15.53688376  30.46584422 #> 845   35.35576882  15.60123430  30.59202742 #> 846   35.41900080  15.66585845  30.71874712 #> 847   35.48250390  15.73075968  30.84601015 #> 848   35.54628158  15.79594155  30.97382346 #> 849   35.61033739  15.86140767  31.10219416 #> 850   35.67467493  15.92716172  31.23112945 #> 851   35.73929787  15.99320746  31.36063671 #> 852   35.80420996  16.05954871  31.49072342 #> 853   35.86941502  16.12618937  31.62139725 #> 854   35.93491692  16.19313342  31.75266597 #> 855   36.00071963  16.26038490  31.88453754 #> 856   36.06682721  16.32794796  32.01702006 #> 857   36.13324376  16.39582679  32.15012178 #> 858   36.19997349  16.46402570  32.28385114 #> 859   36.26702070  16.53254908  32.41821673 #> 860   36.33438975  16.60140139  32.55322731 #> 861   36.40208512  16.67058720  32.68889184 #> 862   36.47011136  16.74011116  32.82521945 #> 863   36.53847312  16.80997803  32.96221945 #> 864   36.60717514  16.88019266  33.09990136 #> 865   36.67622228  16.95075999  33.23827490 #> 866   36.74561948  17.02168511  33.37734998 #> 867   36.81537180  17.09297315  33.51713674 #> 868   36.88548441  17.16462942  33.65764552 #> 869   36.95596257  17.23665928  33.79888689 #> 870   37.02681168  17.30906827  33.94087165 #> 871   37.09803724  17.38186199  34.08361085 #> 872   37.16964489  17.45504622  34.22711577 #> 873   37.24164039  17.52862683  34.37139794 #> 874   37.31402961  17.60260984  34.51646917 #> 875   37.38681858  17.67700139  34.66234151 #> 876   37.46001346  17.75180779  34.80902730 #> 877   37.53362055  17.82703547  34.95653917 #> 878   37.60764628  17.90269102  35.10489004 #> 879   37.68209726  17.97878118  35.25409312 #> 880   37.75698025  18.05531285  35.40416195 #> 881   37.83230215  18.13229310  35.55511039 #> 882   37.90807004  18.20972917  35.70695262 #> 883   37.98429118  18.28762846  35.85970318 #> 884   38.06097300  18.36599857  36.01337696 #> 885   38.13812311  18.44484728  36.16798921 #> 886   38.21574931  18.52418257  36.32355557 #> 887   38.29385960  18.60401260  36.48009207 #> 888   38.37246219  18.68434577  36.63761514 #> 889   38.45156547  18.76519066  36.79614165 #> 890   38.53117809  18.84655610  36.95568888 #> 891   38.61130890  18.92845114  37.11627458 #> 892   38.69196697  19.01088505  37.27791695 #> 893   38.77316165  19.09386737  37.44063469 #> 894   38.85490250  19.17740790  37.60444700 #> 895   38.93719936  19.26151668  37.76937357 #> 896   39.02006234  19.34620404  37.93543467 #> 897   39.10350182  19.43148060  38.10265110 #> 898   39.18752848  19.51735726  38.27104425 #> 899   39.27215328  19.60384523  38.44063612 #> 900   39.35738751  19.69095605  38.61144932 #> 901   39.44324278  19.77870159  38.78350711 #> 902   39.52973105  19.86709405  38.95683343 #> 903   39.61686459  19.95614600  39.13145293 #> 904   39.70465607  20.04587038  39.30739097 #> 905   39.79311854  20.13628051  39.48467368 #> 906   39.88226541  20.22739012  39.66332799 #> 907   39.97211054  20.31921335  39.84338162 #> 908   40.06266820  20.41176480  40.02486319 #> 909   40.15395309  20.50505950  40.20780218 #> 910   40.24598041  20.59911297  40.39222901 #> 911   40.33876581  20.69394121  40.57817509 #> 912   40.43232546  20.78956076  40.76567280 #> 913   40.52667608  20.88598868  40.95475563 #> 914   40.62183490  20.98324260  41.14545815 #> 915   40.71781976  21.08134074  41.33781607 #> 916   40.81464908  21.18030194  41.53186634 #> 917   40.91234193  21.28014568  41.72764716 #> 918   41.01091803  21.38089212  41.92519805 #> 919   41.11039779  21.48256211  42.12455992 #> 920   41.21080236  21.58517727  42.32577514 #> 921   41.31215363  21.68875998  42.52888760 #> 922   41.41447430  21.79333343  42.73394277 #> 923   41.51778790  21.89892167  42.94098782 #> 924   41.62211885  22.00554966  43.15007168 #> 925   41.72749248  22.11324328  43.36124513 #> 926   41.83393511  22.22202945  43.57456090 #> 927   41.94147407  22.33193608  43.79007376 #> 928   42.05013777  22.44299221  44.00784065 #> 929   42.15995577  22.55522805  44.22792080 #> 930   42.27095880  22.66867502  44.45037581 #> 931   42.38317888  22.78336584  44.67526985 #> 932   42.49664937  22.89933459  44.90266975 #> 933   42.61140501  23.01661679  45.13264517 #> 934   42.72748207  23.13524951  45.36526877 #> 935   42.84491839  23.25527140  45.60061638 #> 936   42.96375349  23.37672287  45.83876719 #> 937   43.08402865  23.49964612  46.07980397 #> 938   43.20578707  23.62408527  46.32381326 #> 939   43.32907393  23.75008652  46.57088562 #> 940   43.45393657  23.87769825  46.82111591 #> 941   43.58042460  24.00697114  47.07460353 #> 942   43.70859003  24.13795837  47.33145276 #> 943   43.83848748  24.27071576  47.59177303 #> 944   43.97017433  24.40530194  47.85567935 #> 945   44.10371092  24.54177859  48.12329261 #> 946   44.23916074  24.68021059  48.39474008 #> 947   44.37659069  24.82066630  48.67015580 #> 948   44.51607129  24.96321783  48.94968113 #> 949   44.65767699  25.10794124  49.23346526 #> 950   44.80148645  25.25491694  49.52166582 #> 951   44.94758288  25.40422995  49.81444956 #> 952   45.09605437  25.55597032  50.11199304 #> 953   45.24699433  25.71023350  50.41448343 #> 954   45.40050189  25.86712082  50.72211942 #> 955   45.55668243  26.02673996  51.03511216 #> 956   45.71564806  26.18920551  51.35368636 #> 957   45.87751827  26.35463960  51.67808147 #> 958   46.04242058  26.52317254  52.00855303 #> 959   46.21049127  26.69494362  52.34537417 #> 960   46.38187624  26.87010194  52.68883727 #> 961   46.55673191  27.04880738  53.03925581 #> 962   46.73522631  27.23123167  53.39696653 #> 963   46.91754024  27.41755958  53.76233176 #> 964   47.10386864  27.60799035  54.13574218 #> 965   47.29442211  27.80273920  54.51761980 #> 966   47.48942862  28.00203915  54.90842153 #> 967   47.68913557  28.20614302  55.30864314 #> 968   47.89381203  28.41532581  55.71882387 #> 969   48.10375139  28.62988737  56.13955169 #> 970   48.31927443  28.85015555  56.57146946 #> 971   48.54073289  29.07648983  57.01528205 #> 972   48.76851358  29.30928553  57.47176469 #> 973   49.00304333  29.54897890  57.94177276 #> 974   49.24479475  29.79605292  58.42625335 #> 975   49.49429305  30.05104439  58.92625904 #> 976   49.75212431  30.31455229  59.44296437 #> 977   50.01894537  30.58724790  59.97768563 #> 978   50.29549576  30.86988706  60.53190492 #> 979   50.58261247  31.16332518  61.10729958 #> 980   50.88124799  31.46853572  61.70577846 #> 981   51.19249290  31.78663325  62.32952709 #> 982   51.51760417  32.11890246  62.98106456 #> 983   51.85804137  32.46683501  63.66331584 #> 984   52.21551309  32.83217714  64.37970508 #> 985   52.59203784  33.21699178  65.13427743 #> 986   52.99002469  33.62374105  65.93186079 #> 987   53.41238238  34.05539773  66.77828439 #> 988   53.86266951  34.51559876  67.68067983 #> 989   54.34530635  35.00886175  68.64790554 #> 990   54.86588134  35.54089816  69.69116098 #> 991   55.43160829  36.11908064  70.82490296 #> 992   56.05203383  36.75316600  72.06826334 #> 993   56.74018057  37.45646357  73.44734004 #> 994   57.51449626  38.24782726  74.99910312 #> 995   58.40240924  39.15528929  76.77852025 #> 996   59.44741155  40.22329926  78.87275136 #> 997   60.72497566  41.52899133  81.43304669 #> 998   62.38524176  43.22581126  84.76029381 #> 999   64.80663077  45.70051165  89.61286514 #> 1000  69.67020919  50.67117077  99.35969268 # }"},{"path":"https://easystats.github.io/bayestestR/reference/simulate_simpson.html","id":null,"dir":"Reference","previous_headings":"","what":"Simpson's paradox dataset simulation — simulate_simpson","title":"Simpson's paradox dataset simulation — simulate_simpson","text":"Simpson's paradox, Yule-Simpson effect, phenomenon probability statistics, trend appears several different groups data disappears reverses groups combined.","code":""},{"path":"https://easystats.github.io/bayestestR/reference/simulate_simpson.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simpson's paradox dataset simulation — simulate_simpson","text":"","code":"simulate_simpson(   n = 100,   r = 0.5,   groups = 3,   difference = 1,   group_prefix = \"G_\" )"},{"path":"https://easystats.github.io/bayestestR/reference/simulate_simpson.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simpson's paradox dataset simulation — simulate_simpson","text":"n number observations group generated (minimum 4). r value vector corresponding desired correlation coefficients. groups Number groups (groups can participants, clusters, anything). difference Difference groups. group_prefix prefix group name (e.g., \"G_1\", \"G_2\", \"G_3\", ...).","code":""},{"path":"https://easystats.github.io/bayestestR/reference/simulate_simpson.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simpson's paradox dataset simulation — simulate_simpson","text":"dataset.","code":""},{"path":"https://easystats.github.io/bayestestR/reference/simulate_simpson.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simpson's paradox dataset simulation — simulate_simpson","text":"","code":"data <- simulate_simpson(n = 10, groups = 5, r = 0.5)  if (require(\"ggplot2\")) {   ggplot(data, aes(x = V1, y = V2)) +     geom_point(aes(color = Group)) +     geom_smooth(aes(color = Group), method = \"lm\") +     geom_smooth(method = \"lm\") } #> `geom_smooth()` using formula = 'y ~ x' #> `geom_smooth()` using formula = 'y ~ x'"},{"path":"https://easystats.github.io/bayestestR/reference/spi.html","id":null,"dir":"Reference","previous_headings":"","what":"Shortest Probability Interval (SPI) — spi","title":"Shortest Probability Interval (SPI) — spi","text":"Compute Shortest Probability Interval (SPI) posterior distributions. SPI computationally stable HDI. implementation based algorithm SPIn package.","code":""},{"path":"https://easystats.github.io/bayestestR/reference/spi.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Shortest Probability Interval (SPI) — spi","text":"","code":"spi(x, ...)  # S3 method for numeric spi(x, ci = 0.95, verbose = TRUE, ...)  # S3 method for stanreg spi(   x,   ci = 0.95,   effects = c(\"fixed\", \"random\", \"all\"),   component = c(\"location\", \"all\", \"conditional\", \"smooth_terms\", \"sigma\",     \"distributional\", \"auxiliary\"),   parameters = NULL,   verbose = TRUE,   ... )  # S3 method for brmsfit spi(   x,   ci = 0.95,   effects = c(\"fixed\", \"random\", \"all\"),   component = c(\"conditional\", \"zi\", \"zero_inflated\", \"all\"),   parameters = NULL,   verbose = TRUE,   ... )"},{"path":"https://easystats.github.io/bayestestR/reference/spi.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Shortest Probability Interval (SPI) — spi","text":"x Vector representing posterior distribution, data frame vectors. Can also Bayesian model. bayestestR supports wide range models (see, example, methods(\"hdi\")) documented 'Usage' section, methods classes mostly resemble arguments .numeric .data.framemethods. ... Currently used. ci Value vector probability (credible) interval - CI (0 1) estimated. Default .95 (95%). verbose Toggle warnings. effects results fixed effects, random effects returned? applies mixed models. May abbreviated. component results parameters, parameters conditional model zero-inflated part model returned? May abbreviated. applies brms-models. parameters Regular expression pattern describes parameters returned. Meta-parameters (like lp__ prior_) filtered default, parameters typically appear summary() returned. Use parameters select specific parameters output.","code":""},{"path":"https://easystats.github.io/bayestestR/reference/spi.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Shortest Probability Interval (SPI) — spi","text":"data frame following columns: Parameter model parameter(s), x model-object. x vector, column missing. CI probability credible interval. CI_low, CI_high lower upper credible interval limits parameters.","code":""},{"path":"https://easystats.github.io/bayestestR/reference/spi.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Shortest Probability Interval (SPI) — spi","text":"SPI alternative method HDI (hdi()) quantify uncertainty (posterior) distributions. SPI said stable HDI, , \"HDI can noisy (, high Monte Carlo error)\" (Liu et al. 2015). Furthermore, HDI sensitive additional assumptions, particular assumptions related different estimation methods, can make HDI less accurate reliable (see also discussion ).","code":""},{"path":"https://easystats.github.io/bayestestR/reference/spi.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Shortest Probability Interval (SPI) — spi","text":"code compute SPI adapted SPIn package, slightly modified robust Stan models. Thus, credits go Ying Liu original SPI algorithm R implementation.","code":""},{"path":"https://easystats.github.io/bayestestR/reference/spi.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Shortest Probability Interval (SPI) — spi","text":"Liu, Y., Gelman, ., & Zheng, T. (2015). Simulation-efficient shortest probability intervals. Statistics Computing, 25(4), 809–819. https://doi.org/10.1007/s11222-015-9563-8","code":""},{"path":[]},{"path":"https://easystats.github.io/bayestestR/reference/spi.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Shortest Probability Interval (SPI) — spi","text":"","code":"library(bayestestR)  posterior <- rnorm(1000) spi(posterior) #> 95% SPI: [-1.69, 2.01] spi(posterior, ci = c(0.80, 0.89, 0.95)) #> Shortest Probability Interval #>  #> 80% SPI       |       89% SPI |       95% SPI #> --------------------------------------------- #> [-1.20, 1.18] | [-1.60, 1.40] | [-1.69, 2.01]  df <- data.frame(replicate(4, rnorm(100))) spi(df) #> Shortest Probability Interval #>  #> Parameter |       95% SPI #> ------------------------- #> X1        | [-1.68, 1.90] #> X2        | [-1.75, 1.95] #> X3        | [-2.39, 1.68] #> X4        | [-1.73, 2.01] spi(df, ci = c(0.80, 0.89, 0.95)) #> Shortest Probability Interval #>  #> Parameter |       80% SPI |       89% SPI |       95% SPI #> --------------------------------------------------------- #> X1        | [-1.45, 0.76] | [-1.52, 1.45] | [-1.68, 1.90] #> X2        | [-0.76, 1.61] | [-1.50, 1.61] | [-1.75, 1.95] #> X3        | [-1.22, 0.86] | [-1.24, 1.68] | [-2.39, 1.68] #> X4        | [-0.73, 1.35] | [-1.65, 1.35] | [-1.73, 2.01] # \\dontrun{ library(rstanarm) model <- stan_glm(mpg ~ wt + gear, data = mtcars, chains = 2, iter = 200, refresh = 0) #> Warning: Bulk Effective Samples Size (ESS) is too low, indicating posterior means and medians may be unreliable. #> Running the chains for more iterations may help. See #> https://mc-stan.org/misc/warnings.html#bulk-ess #> Warning: Tail Effective Samples Size (ESS) is too low, indicating posterior variances and tail quantiles may be unreliable. #> Running the chains for more iterations may help. See #> https://mc-stan.org/misc/warnings.html#tail-ess spi(model) #> Shortest Probability Interval  #>  #> Parameter   |        95% SPI #> ---------------------------- #> (Intercept) | [30.62, 47.80] #> wt          | [-6.54, -4.28] #> gear        | [-1.64,  1.61] # }"},{"path":"https://easystats.github.io/bayestestR/reference/unupdate.html","id":null,"dir":"Reference","previous_headings":"","what":"Un-update Bayesian models to their prior-to-data state — unupdate","title":"Un-update Bayesian models to their prior-to-data state — unupdate","text":"posteriors priors updated observing data, goal function un-update posteriors obtain models representing priors. models can used examine prior predictive distribution, compare priors posteriors.  function used internally compute Bayes factors.","code":""},{"path":"https://easystats.github.io/bayestestR/reference/unupdate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Un-update Bayesian models to their prior-to-data state — unupdate","text":"","code":"unupdate(model, verbose = TRUE, ...)  # S3 method for stanreg unupdate(model, verbose = TRUE, ...)  # S3 method for brmsfit unupdate(model, verbose = TRUE, ...)  # S3 method for brmsfit_multiple unupdate(model, verbose = TRUE, newdata = NULL, ...)  # S3 method for blavaan unupdate(model, verbose = TRUE, ...)"},{"path":"https://easystats.github.io/bayestestR/reference/unupdate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Un-update Bayesian models to their prior-to-data state — unupdate","text":"model fitted Bayesian model. verbose Toggle warnings. ... used newdata List data.frames update model new data. Required even original data used.","code":""},{"path":"https://easystats.github.io/bayestestR/reference/unupdate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Un-update Bayesian models to their prior-to-data state — unupdate","text":"model un-fitted data, representing prior model.","code":""},{"path":"https://easystats.github.io/bayestestR/reference/weighted_posteriors.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate posterior distributions weighted across models — weighted_posteriors","title":"Generate posterior distributions weighted across models — weighted_posteriors","text":"Extract posterior samples parameters, weighted across models. Weighting done comparing posterior model probabilities, via bayesfactor_models().","code":""},{"path":"https://easystats.github.io/bayestestR/reference/weighted_posteriors.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate posterior distributions weighted across models — weighted_posteriors","text":"","code":"weighted_posteriors(..., prior_odds = NULL, missing = 0, verbose = TRUE)  # S3 method for data.frame weighted_posteriors(..., prior_odds = NULL, missing = 0, verbose = TRUE)  # S3 method for stanreg weighted_posteriors(   ...,   prior_odds = NULL,   missing = 0,   verbose = TRUE,   effects = c(\"fixed\", \"random\", \"all\"),   component = c(\"conditional\", \"zi\", \"zero_inflated\", \"all\"),   parameters = NULL )  # S3 method for brmsfit weighted_posteriors(   ...,   prior_odds = NULL,   missing = 0,   verbose = TRUE,   effects = c(\"fixed\", \"random\", \"all\"),   component = c(\"conditional\", \"zi\", \"zero_inflated\", \"all\"),   parameters = NULL )  # S3 method for blavaan weighted_posteriors(   ...,   prior_odds = NULL,   missing = 0,   verbose = TRUE,   effects = c(\"fixed\", \"random\", \"all\"),   component = c(\"conditional\", \"zi\", \"zero_inflated\", \"all\"),   parameters = NULL )  # S3 method for BFBayesFactor weighted_posteriors(   ...,   prior_odds = NULL,   missing = 0,   verbose = TRUE,   iterations = 4000 )"},{"path":"https://easystats.github.io/bayestestR/reference/weighted_posteriors.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate posterior distributions weighted across models — weighted_posteriors","text":"... Fitted models (see details), fit data, single BFBayesFactor object. prior_odds Optional vector prior odds models compared first model (denominator, BFBayesFactor objects). data.frames, used basis weighting. missing optional numeric value use model contain parameter appears models. Defaults 0. verbose Toggle warnings. effects results fixed effects, random effects returned? applies mixed models. May abbreviated. component results parameters, parameters conditional model zero-inflated part model returned? May abbreviated. applies brms-models. parameters Regular expression pattern describes parameters returned. Meta-parameters (like lp__ prior_) filtered default, parameters typically appear summary() returned. Use parameters select specific parameters output. iterations BayesFactor models, many posterior samples draw.","code":""},{"path":"https://easystats.github.io/bayestestR/reference/weighted_posteriors.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate posterior distributions weighted across models — weighted_posteriors","text":"data frame posterior distributions (weighted across models) .","code":""},{"path":"https://easystats.github.io/bayestestR/reference/weighted_posteriors.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generate posterior distributions weighted across models — weighted_posteriors","text":"Note across models parameters might play different roles. example, parameter plays different role model Y ~ + B (main effect) model Y ~ + B + :B (simple effect). many cases centering predictors (mean subtracting continuous variables, effects coding via contr.sum orthonormal coding via contr.equalprior_pairs factors) can reduce issue. case mindful issue.  See bayesfactor_models() details info passed models.  Note BayesFactor models, posterior samples generated intercept models.  function similar function brms::posterior_average.","code":""},{"path":"https://easystats.github.io/bayestestR/reference/weighted_posteriors.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Generate posterior distributions weighted across models — weighted_posteriors","text":"BayesFactor < 0.9.12-4.3, instances might problems duplicate columns random effects resulting data frame.","code":""},{"path":"https://easystats.github.io/bayestestR/reference/weighted_posteriors.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Generate posterior distributions weighted across models — weighted_posteriors","text":"Clyde, M., Desimone, H., & Parmigiani, G. (1996). Prediction via orthogonalized model mixing. Journal American Statistical Association, 91(435), 1197-1208. Hinne, M., Gronau, Q. F., van den Bergh, D., Wagenmakers, E. (2019, March 25). conceptual introduction Bayesian Model Averaging. doi:10.31234/osf.io/wgb64 Rouder, J. N., Haaf, J. M., & Vandekerckhove, J. (2018). Bayesian inference psychology, part IV: Parameter estimation Bayes factors. Psychonomic bulletin & review, 25(1), 102-113. van den Bergh, D., Haaf, J. M., Ly, ., Rouder, J. N., & Wagenmakers, E. J. (2019). cautionary note estimating effect size.","code":""},{"path":[]},{"path":"https://easystats.github.io/bayestestR/reference/weighted_posteriors.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate posterior distributions weighted across models — weighted_posteriors","text":"","code":"# \\donttest{ if (require(\"rstanarm\") && require(\"see\")) {   stan_m0 <- stan_glm(extra ~ 1,     data = sleep,     family = gaussian(),     refresh = 0,     diagnostic_file = file.path(tempdir(), \"df0.csv\")   )    stan_m1 <- stan_glm(extra ~ group,     data = sleep,     family = gaussian(),     refresh = 0,     diagnostic_file = file.path(tempdir(), \"df1.csv\")   )    res <- weighted_posteriors(stan_m0, stan_m1)    plot(eti(res)) } #> Warning: Bayes factors might not be precise. #>   For precise Bayes factors, sampling at least 40,000 posterior samples is #>   recommended. #> Computation of Marginal Likelihood: estimating marginal likelihood, please wait... #> Computation of Marginal Likelihood: estimating marginal likelihood, please wait... #> Error: Failed at retrieving data :( Please provide original model or data #>   through the `data` argument  ## With BayesFactor if (require(\"BayesFactor\")) {   extra_sleep <- ttestBF(formula = extra ~ group, data = sleep)    wp <- weighted_posteriors(extra_sleep)    describe_posterior(extra_sleep, test = NULL)   describe_posterior(wp$delta, test = NULL) # also considers the null } #> Warning: Could not estimate a good default ROPE range. Using 'c(-0.1, 0.1)'. #> Summary of Posterior Distribution #>  #> Parameter | Median |        95% CI #> ---------------------------------- #> Posterior |  -0.10 | [-1.41, 0.03]   ## weighted prediction distributions via data.frames if (require(\"rstanarm\")) {   m0 <- stan_glm(     mpg ~ 1,     data = mtcars,     family = gaussian(),     diagnostic_file = file.path(tempdir(), \"df0.csv\"),     refresh = 0   )    m1 <- stan_glm(     mpg ~ carb,     data = mtcars,     family = gaussian(),     diagnostic_file = file.path(tempdir(), \"df1.csv\"),     refresh = 0   )    # Predictions:   pred_m0 <- data.frame(posterior_predict(m0))   pred_m1 <- data.frame(posterior_predict(m1))    BFmods <- bayesfactor_models(m0, m1)    wp <- weighted_posteriors(pred_m0, pred_m1,     prior_odds = as.numeric(BFmods)[2]   )    # look at first 5 prediction intervals   hdi(pred_m0[1:5])   hdi(pred_m1[1:5])   hdi(wp[1:5]) # between, but closer to pred_m1 } #> Warning: Bayes factors might not be precise. #>   For precise Bayes factors, sampling at least 40,000 posterior samples is #>   recommended. #> Computation of Marginal Likelihood: estimating marginal likelihood, please wait... #> Computation of Marginal Likelihood: estimating marginal likelihood, please wait... #> Error in UseMethod(\"hdi_\"): no applicable method for 'hdi_' applied to an object of class \"data.frame\" # }"},{"path":[]},{"path":"https://easystats.github.io/bayestestR/news/index.html","id":"changes-0-13-2","dir":"Changelog","previous_headings":"","what":"Changes","title":"bayestestR 0.13.2","text":"Retrieving models environment improved.","code":""},{"path":"https://easystats.github.io/bayestestR/news/index.html","id":"bayestestr-0131","dir":"Changelog","previous_headings":"","what":"bayestestR 0.13.1","title":"bayestestR 0.13.1","text":"CRAN release: 2023-04-07","code":""},{"path":"https://easystats.github.io/bayestestR/news/index.html","id":"changes-0-13-1","dir":"Changelog","previous_headings":"","what":"Changes","title":"bayestestR 0.13.1","text":"Improved speed performance functions called using .call(). Improved speed performance bayesfactor_models() brmsfit objects already included marglik element model object.","code":""},{"path":"https://easystats.github.io/bayestestR/news/index.html","id":"new-functionality-0-13-1","dir":"Changelog","previous_headings":"","what":"New functionality","title":"bayestestR 0.13.1","text":".logical() bayesfactor_restricted() results, extracts boolean vector(s) mark draws part order restriction.","code":""},{"path":"https://easystats.github.io/bayestestR/news/index.html","id":"bug-fixes-0-13-1","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"bayestestR 0.13.1","text":"p_map() gains new null argument specify non-0 nulls. Fixed non-working examples ci(method = \"SI\"). Fixed wrong calculation rope range model objects describe_posterior(). smaller bug fixes.","code":""},{"path":"https://easystats.github.io/bayestestR/news/index.html","id":"bayestestr-0130","dir":"Changelog","previous_headings":"","what":"bayestestR 0.13.0","title":"bayestestR 0.13.0","text":"CRAN release: 2022-09-18","code":""},{"path":"https://easystats.github.io/bayestestR/news/index.html","id":"breaking-0-13-0","dir":"Changelog","previous_headings":"","what":"Breaking","title":"bayestestR 0.13.0","text":"minimum needed R version bumped 3.6. contr.equalprior(contrasts = FALSE) (previously contr.orthonorm) longer returns identity matrix, shifted diag(n) - 1/n, consistency.","code":""},{"path":"https://easystats.github.io/bayestestR/news/index.html","id":"new-functionality-0-13-0","dir":"Changelog","previous_headings":"","what":"New functionality","title":"bayestestR 0.13.0","text":"p_to_bf(), convert p-values Bayes factors. accurate approximate Bayes factors, use bic_to_bf(). bayestestR now supports objects class rvar package posterior. contr.equalprior (previously contr.orthonorm) gains two new functions: contr.equalprior_pairs contr.equalprior_deviations aide setting intuitive priors.","code":""},{"path":"https://easystats.github.io/bayestestR/news/index.html","id":"changes-0-13-0","dir":"Changelog","previous_headings":"","what":"Changes","title":"bayestestR 0.13.0","text":"renamed contr.equalprior explicit function. p_direction() now accepts objects class parameters_model() (parameters::model_parameters()), compute probability direction parameters frequentist models.","code":""},{"path":"https://easystats.github.io/bayestestR/news/index.html","id":"bayestestr-0121","dir":"Changelog","previous_headings":"","what":"bayestestR 0.12.1","title":"bayestestR 0.12.1","text":"CRAN release: 2022-05-02","code":""},{"path":"https://easystats.github.io/bayestestR/news/index.html","id":"breaking-0-12-1","dir":"Changelog","previous_headings":"","what":"Breaking","title":"bayestestR 0.12.1","text":"Bayesfactor_models() frequentist models now relies updated insight::get_loglikelihood(). might change results REML based models. See documentation. estimate_density() argument group_by renamed . distribution_*(random = FALSE) functions now rely ppoints(), result slightly different results, especially small ns. Uncertainty estimation now defaults \"eti\" (formerly \"hdi\").","code":""},{"path":"https://easystats.github.io/bayestestR/news/index.html","id":"changes-0-12-1","dir":"Changelog","previous_headings":"","what":"Changes","title":"bayestestR 0.12.1","text":"bayestestR functions now support draws objects package posterior. rope_range() now handles log(normal)-families models log-transformed outcomes. New function spi(), compute shortest probability intervals. Furthermore, \"spi\" option added new method compute uncertainty intervals.","code":""},{"path":"https://easystats.github.io/bayestestR/news/index.html","id":"bug-fixes-0-12-1","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"bayestestR 0.12.1","text":"bci() objects incorrectly returned equal-tailed intervals.","code":""},{"path":"https://easystats.github.io/bayestestR/news/index.html","id":"bayestestr-0115","dir":"Changelog","previous_headings":"","what":"bayestestR 0.11.5","title":"bayestestR 0.11.5","text":"CRAN release: 2021-10-30 Fixes failing tests CRAN checks.","code":""},{"path":[]},{"path":"https://easystats.github.io/bayestestR/news/index.html","id":"new-functions-0-11-1","dir":"Changelog","previous_headings":"","what":"New functions","title":"bayestestR 0.11.1","text":"describe_posterior() gains plot() method, short cut plot(estimate_density(describe_posterior())).","code":""},{"path":[]},{"path":"https://easystats.github.io/bayestestR/news/index.html","id":"bug-fixes-0-11","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"bayestestR 0.11","text":"Fixed issues related last brms update. Fixed bug describe_posterior.BFBayesFactor() Bayes factors missing put ( #442 ).","code":""},{"path":"https://easystats.github.io/bayestestR/news/index.html","id":"bayestestr-0100","dir":"Changelog","previous_headings":"","what":"bayestestR 0.10.0","title":"bayestestR 0.10.0","text":"CRAN release: 2021-05-31","code":""},{"path":"https://easystats.github.io/bayestestR/news/index.html","id":"breaking-0-10-0","dir":"Changelog","previous_headings":"","what":"Breaking","title":"bayestestR 0.10.0","text":"Bayes factors now returned log(BF) (column name log_BF). Printing unaffected. retrieve raw BFs, can run exp(result$log_BF).","code":""},{"path":"https://easystats.github.io/bayestestR/news/index.html","id":"new-functions-0-10-0","dir":"Changelog","previous_headings":"","what":"New functions","title":"bayestestR 0.10.0","text":"bci() (alias bcai()) compute bias-corrected accelerated bootstrap intervals. Along new function, ci() describe_posterior() gain new ci_method type, \"bci\".","code":""},{"path":"https://easystats.github.io/bayestestR/news/index.html","id":"changes-0-10-0","dir":"Changelog","previous_headings":"","what":"Changes","title":"bayestestR 0.10.0","text":"contr.bayes renamed contr.orthonorm explicit function.","code":""},{"path":"https://easystats.github.io/bayestestR/news/index.html","id":"bayestestr-090","dir":"Changelog","previous_headings":"","what":"bayestestR 0.9.0","title":"bayestestR 0.9.0","text":"CRAN release: 2021-04-08","code":""},{"path":"https://easystats.github.io/bayestestR/news/index.html","id":"breaking-0-9-0","dir":"Changelog","previous_headings":"","what":"Breaking","title":"bayestestR 0.9.0","text":"default ci width changed 0.95 instead 0.89 (see ). come surprise long-time users bayestestR warning impending change now :) Column names bayesfactor_restricted() now p_prior p_posterior (Prior_prob Posterior_prob), consistent bayesfactor_inclusion() output. Removed experimental function mhdior.","code":""},{"path":"https://easystats.github.io/bayestestR/news/index.html","id":"general-0-9-0","dir":"Changelog","previous_headings":"","what":"General","title":"bayestestR 0.9.0","text":"Support blavaan models. Support blrm models (rmsb). Support BGGM models (BGGM). check_prior() describe_prior() now also work ways prior definition models rstanarm brms.","code":""},{"path":"https://easystats.github.io/bayestestR/news/index.html","id":"bug-fixes-0-9-0","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"bayestestR 0.9.0","text":"Fixed bug print() method mediation() function. Fixed remaining inconsistencies CI values, reported fraction rope(). Fixed issues special prior definitions check_prior(), describe_prior() simulate_prior().","code":""},{"path":"https://easystats.github.io/bayestestR/news/index.html","id":"bayestestr-082","dir":"Changelog","previous_headings":"","what":"bayestestR 0.8.2","title":"bayestestR 0.8.2","text":"CRAN release: 2021-01-26","code":""},{"path":"https://easystats.github.io/bayestestR/news/index.html","id":"general-0-8-2","dir":"Changelog","previous_headings":"","what":"General","title":"bayestestR 0.8.2","text":"Support bamlss models. Roll-back R dependency R >= 3.4.","code":""},{"path":"https://easystats.github.io/bayestestR/news/index.html","id":"changes-to-functions-0-8-2","dir":"Changelog","previous_headings":"","what":"Changes to functions","title":"bayestestR 0.8.2","text":".stanreg methods gain component argument, also include auxiliary parameters.","code":""},{"path":"https://easystats.github.io/bayestestR/news/index.html","id":"bug-fixes-0-8-2","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"bayestestR 0.8.2","text":"bayesfactor_parameters() longer errors reason computing extremely un/likely direction hypotheses. bayesfactor_pointull() / bf_pointull() now bayesfactor_pointnull() / bf_pointnull() (can spot difference? #363 ).","code":""},{"path":"https://easystats.github.io/bayestestR/news/index.html","id":"bayestestr-080","dir":"Changelog","previous_headings":"","what":"bayestestR 0.8.0","title":"bayestestR 0.8.0","text":"CRAN release: 2020-12-05","code":""},{"path":"https://easystats.github.io/bayestestR/news/index.html","id":"new-functions-0-8-0","dir":"Changelog","previous_headings":"","what":"New functions","title":"bayestestR 0.8.0","text":"sexit(), function sequential effect existence significance testing (SEXIT).","code":""},{"path":"https://easystats.github.io/bayestestR/news/index.html","id":"general-0-8-0","dir":"Changelog","previous_headings":"","what":"General","title":"bayestestR 0.8.0","text":"Added startup-message warn users default ci-width might change future update. Added support mcmc.list objects.","code":""},{"path":"https://easystats.github.io/bayestestR/news/index.html","id":"bug-fixes-0-8-0","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"bayestestR 0.8.0","text":"unupdate() gains newdata argument work brmsfit_multiple models. Fixed issue Bayes factor vignette (don’t evaluate code chunks packages available).","code":""},{"path":"https://easystats.github.io/bayestestR/news/index.html","id":"bayestestr-075","dir":"Changelog","previous_headings":"","what":"bayestestR 0.7.5","title":"bayestestR 0.7.5","text":"CRAN release: 2020-10-22","code":""},{"path":"https://easystats.github.io/bayestestR/news/index.html","id":"new-functions-0-7-5","dir":"Changelog","previous_headings":"","what":"New functions","title":"bayestestR 0.7.5","text":"Added .matrix() function bayesfactor_model arrays. unupdate(), utility function get Bayesian models un-fitted data, representing priors .","code":""},{"path":"https://easystats.github.io/bayestestR/news/index.html","id":"changes-to-functions-0-7-5","dir":"Changelog","previous_headings":"","what":"Changes to functions","title":"bayestestR 0.7.5","text":"ci() supports emmeans - Bayesian frequentist ( #312 - cross fix parameters)","code":""},{"path":"https://easystats.github.io/bayestestR/news/index.html","id":"bug-fixes-0-7-5","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"bayestestR 0.7.5","text":"Fixed issue default rope range BayesFactor models. Fixed issue collinearity-check rope() models less two parameters. Fixed issue print-method mediation() stanmvreg-models, displays wrong name response-value. Fixed issue effective_sample() models one parameter. rope_range() BayesFactor models returns non-NA values ( #343 )","code":""},{"path":"https://easystats.github.io/bayestestR/news/index.html","id":"bayestestr-072","dir":"Changelog","previous_headings":"","what":"bayestestR 0.7.2","title":"bayestestR 0.7.2","text":"CRAN release: 2020-07-20","code":""},{"path":"https://easystats.github.io/bayestestR/news/index.html","id":"new-functions-0-7-2","dir":"Changelog","previous_headings":"","what":"New functions","title":"bayestestR 0.7.2","text":"mediation(), compute average direct average causal mediation effects multivariate response models (brmsfit, stanmvreg).","code":""},{"path":"https://easystats.github.io/bayestestR/news/index.html","id":"bug-fixes-0-7-2","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"bayestestR 0.7.2","text":"bayesfactor_parameters() works R<3.6.0.","code":""},{"path":"https://easystats.github.io/bayestestR/news/index.html","id":"bayestestr-070","dir":"Changelog","previous_headings":"","what":"bayestestR 0.7.0","title":"bayestestR 0.7.0","text":"CRAN release: 2020-06-19","code":""},{"path":"https://easystats.github.io/bayestestR/news/index.html","id":"general-0-7-0","dir":"Changelog","previous_headings":"","what":"General","title":"bayestestR 0.7.0","text":"Preliminary support stanfit objects. Added support bayesQR objects.","code":""},{"path":"https://easystats.github.io/bayestestR/news/index.html","id":"changes-to-functions-0-7-0","dir":"Changelog","previous_headings":"","what":"Changes to functions","title":"bayestestR 0.7.0","text":"weighted_posteriors() can now used data frames. Revised print() describe_posterior(). Improved value formatting Bayesfactor functions.","code":""},{"path":"https://easystats.github.io/bayestestR/news/index.html","id":"bug-fixes-0-7-0","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"bayestestR 0.7.0","text":"Link transformation now taken account emmeans objets. E.g., describe_posterior(). Fix diagnostic_posterior() algorithm “sampling”. Minor revisions documentations. Fix CRAN check issues win-old-release.","code":""},{"path":"https://easystats.github.io/bayestestR/news/index.html","id":"bayestestr-060","dir":"Changelog","previous_headings":"","what":"bayestestR 0.6.0","title":"bayestestR 0.6.0","text":"CRAN release: 2020-04-20","code":""},{"path":"https://easystats.github.io/bayestestR/news/index.html","id":"changes-to-functions-0-6-0","dir":"Changelog","previous_headings":"","what":"Changes to functions","title":"bayestestR 0.6.0","text":"describe_posterior() now also works effectsize::standardize_posteriors(). p_significance() now also works parameters::simulate_model(). rope_range() supports (frequentis) models.","code":""},{"path":"https://easystats.github.io/bayestestR/news/index.html","id":"bug-fixes-0-6-0","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"bayestestR 0.6.0","text":"Fixed issue plot() data.frame-methods p_direction() equivalence_test(). Fix check issues forthcoming insight-update.","code":""},{"path":"https://easystats.github.io/bayestestR/news/index.html","id":"bayestestr-053","dir":"Changelog","previous_headings":"","what":"bayestestR 0.5.3","title":"bayestestR 0.5.3","text":"CRAN release: 2020-03-26","code":""},{"path":"https://easystats.github.io/bayestestR/news/index.html","id":"general-0-5-3","dir":"Changelog","previous_headings":"","what":"General","title":"bayestestR 0.5.3","text":"Support bcplm objects (package cplm)","code":""},{"path":"https://easystats.github.io/bayestestR/news/index.html","id":"changes-to-functions-0-5-3","dir":"Changelog","previous_headings":"","what":"Changes to functions","title":"bayestestR 0.5.3","text":"estimate_density() now also works grouped data frames.","code":""},{"path":"https://easystats.github.io/bayestestR/news/index.html","id":"bug-fixes-0-5-3","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"bayestestR 0.5.3","text":"Fixed bug weighted_posteriors() properly weight Intercept-BFBayesFactor models. Fixed bug weighted_posteriors() models low posterior probability ( #286 ). Fixed bug describe_posterior(), rope() equivalence_test() brmsfit models monotonic effect. Fixed issues related latest changes .data.frame.brmsfit() brms package.","code":""},{"path":"https://easystats.github.io/bayestestR/news/index.html","id":"bayestestr-050","dir":"Changelog","previous_headings":"","what":"bayestestR 0.5.0","title":"bayestestR 0.5.0","text":"CRAN release: 2020-01-18","code":""},{"path":"https://easystats.github.io/bayestestR/news/index.html","id":"general-0-5-0","dir":"Changelog","previous_headings":"","what":"General","title":"bayestestR 0.5.0","text":"Added p_pointnull() alias p_MAP(). Added si() function compute support intervals. Added weighted_posteriors() generating posterior samples averaged across models. Added plot()-method p_significance(). p_significance() now also works brmsfit-objects. estimate_density() now also works MCMCglmm-objects. equivalence_test() gets effects component arguments stanreg brmsfit models, print specific model components. Support mcmc objects (package coda) Provide distributions via distribution(). Added distribution_tweedie(). Better handling stanmvreg models describe_posterior(), diagnostic_posterior() describe_prior().","code":""},{"path":"https://easystats.github.io/bayestestR/news/index.html","id":"breaking-changes-0-5-0","dir":"Changelog","previous_headings":"","what":"Breaking changes","title":"bayestestR 0.5.0","text":"point_estimate(): argument centrality default value changed ‘median’ ‘’. p_rope(), previously exploratory index, renamed mhdior() (Max HDI inside/outside ROPE), p_rope() refer rope(..., ci =   1) ( #258 )","code":""},{"path":"https://easystats.github.io/bayestestR/news/index.html","id":"bug-fixes-0-5-0","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"bayestestR 0.5.0","text":"Fixed mistake description p_significance(). Fixed error computing BFs emmGrid based non-linear models ( #260 ). Fixed wrong output percentage-values print.equivalence_test(). Fixed issue describe_posterior() BFBayesFactor-objects one model.","code":""},{"path":"https://easystats.github.io/bayestestR/news/index.html","id":"bayestestr-040","dir":"Changelog","previous_headings":"","what":"bayestestR 0.4.0","title":"bayestestR 0.4.0","text":"CRAN release: 2019-10-20","code":""},{"path":"https://easystats.github.io/bayestestR/news/index.html","id":"new-functions--features-0-4-0","dir":"Changelog","previous_headings":"","what":"New functions / features","title":"bayestestR 0.4.0","text":"convert_bayesian_to_frequentist() Convert (refit) Bayesian model frequentist distribution_binomial() perfect binomial distributions simulate_ttest() Simulate data mean difference simulate_correlation() Simulate correlated datasets p_significance() Compute probability Practical Significance (ps) overlap() Compute overlap two empirical distributions estimate_density(): method = \"mixture\" argument added mixture density estimation","code":""},{"path":"https://easystats.github.io/bayestestR/news/index.html","id":"bug-fixes-0-4-0","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"bayestestR 0.4.0","text":"Fixed bug simulate_prior() stanreg-models autoscale set FALSE","code":""},{"path":"https://easystats.github.io/bayestestR/news/index.html","id":"bayestestr-030","dir":"Changelog","previous_headings":"","what":"bayestestR 0.3.0","title":"bayestestR 0.3.0","text":"CRAN release: 2019-09-22","code":""},{"path":"https://easystats.github.io/bayestestR/news/index.html","id":"general-0-3-0","dir":"Changelog","previous_headings":"","what":"General","title":"bayestestR 0.3.0","text":"revised print()-methods functions like rope(), p_direction(), describe_posterior() etc., particular model objects random effects /zero-inflation component","code":""},{"path":"https://easystats.github.io/bayestestR/news/index.html","id":"new-functions--features-0-3-0","dir":"Changelog","previous_headings":"","what":"New functions / features","title":"bayestestR 0.3.0","text":"check_prior() check prior informative simulate_prior() simulate model’s priors distributions distribution_gamma() generate (near-perfect random) Gamma distribution contr.bayes function orthogonal factor coding (implementation Singmann & Gronau’s bfrms, used proper prior estimation factor 3 levels . See Bayes factor vignette ## Changes functions Added support sim, sim.merMod (arm::sim()) MCMCglmm-objects many functions (like hdi(), ci(), eti(), rope(), p_direction(), point_estimate(), …) describe_posterior() gets effects component argument, include description posterior samples random effects /zero-inflation component. user-friendly warning non-supported models bayesfactor()-methods","code":""},{"path":"https://easystats.github.io/bayestestR/news/index.html","id":"bug-fixes-0-3-0","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"bayestestR 0.3.0","text":"Fixed bug bayesfactor_inclusion() interaction sometimes appeared (#223) Fixed bug describe_posterior() stanreg models fitted fullrank-algorithm","code":""},{"path":"https://easystats.github.io/bayestestR/news/index.html","id":"bayestestr-025","dir":"Changelog","previous_headings":"","what":"bayestestR 0.2.5","title":"bayestestR 0.2.5","text":"CRAN release: 2019-08-06","code":""},{"path":"https://easystats.github.io/bayestestR/news/index.html","id":"breaking-changes-0-2-5","dir":"Changelog","previous_headings":"","what":"Breaking changes","title":"bayestestR 0.2.5","text":"rope_range() binomial model now different default (-.18; .18 ; instead -.055; .055) rope(): returns proportion (0 1) instead value 0 100 p_direction(): returns proportion (0.5 1) instead value 50 100 (#168) bayesfactor_savagedickey(): hypothesis argument replaced null part new bayesfactor_parameters() function","code":""},{"path":"https://easystats.github.io/bayestestR/news/index.html","id":"new-functions--features-0-2-5","dir":"Changelog","previous_headings":"","what":"New functions / features","title":"bayestestR 0.2.5","text":"density_at(), p_map() map_estimate(): method argument added rope(): ci_method argument added eti(): Computes equal-tailed intervals reshape_ci(): Reshape CIs wide/long bayesfactor_parameters(): New function, replacing bayesfactor_savagedickey(), allows computing Bayes factors point-null interval-null bayesfactor_restricted(): Function computing Bayes factors order restricted models","code":""},{"path":[]},{"path":"https://easystats.github.io/bayestestR/news/index.html","id":"bug-fixes-0-2-5","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"bayestestR 0.2.5","text":"bayesfactor_inclusion() now works R < 3.6.","code":""},{"path":"https://easystats.github.io/bayestestR/news/index.html","id":"bayestestr-022","dir":"Changelog","previous_headings":"","what":"bayestestR 0.2.2","title":"bayestestR 0.2.2","text":"CRAN release: 2019-06-20","code":""},{"path":"https://easystats.github.io/bayestestR/news/index.html","id":"breaking-changes-0-2-2","dir":"Changelog","previous_headings":"","what":"Breaking changes","title":"bayestestR 0.2.2","text":"equivalence_test(): returns capitalized output (e.g., Rejected instead rejected) describe_posterior.numeric(): dispersion defaults FALSE consistency methods","code":""},{"path":"https://easystats.github.io/bayestestR/news/index.html","id":"new-functions--features-0-2-2","dir":"Changelog","previous_headings":"","what":"New functions / features","title":"bayestestR 0.2.2","text":"pd_to_p() p_to_pd(): Functions convert probability direction (pd) p-value Support emmGrid objects: ci(), rope(), bayesfactor_savagedickey(), describe_posterior(), …","code":""},{"path":"https://easystats.github.io/bayestestR/news/index.html","id":"minor-changes-0-2-2","dir":"Changelog","previous_headings":"","what":"Minor changes","title":"bayestestR 0.2.2","text":"Improved tutorial 2","code":""},{"path":"https://easystats.github.io/bayestestR/news/index.html","id":"bug-fixes-0-2-2","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"bayestestR 0.2.2","text":"describe_posterior(): Fixed column order restoration bayesfactor_inclusion(): Inclusion BFs matched models inline JASP results.","code":""},{"path":"https://easystats.github.io/bayestestR/news/index.html","id":"bayestestr-020","dir":"Changelog","previous_headings":"","what":"bayestestR 0.2.0","title":"bayestestR 0.2.0","text":"CRAN release: 2019-05-29","code":""},{"path":"https://easystats.github.io/bayestestR/news/index.html","id":"breaking-changes-0-2-0","dir":"Changelog","previous_headings":"","what":"Breaking changes","title":"bayestestR 0.2.0","text":"plotting functions now require installation see package estimate argument name describe_posterior() point_estimate() changed centrality hdi(), ci(), rope() equivalence_test() default ci 0.89 rnorm_perfect() deprecated favour distribution_normal() map_estimate() now returns single value instead dataframe density parameter removed. MAP density value now accessible via attributes(map_output)$MAP_density","code":""},{"path":"https://easystats.github.io/bayestestR/news/index.html","id":"new-functions--features-0-2-0","dir":"Changelog","previous_headings":"","what":"New functions / features","title":"bayestestR 0.2.0","text":"describe_posterior(), describe_prior(), diagnostic_posterior(): added wrapper function point_estimate() added function compute point estimates p_direction(): new argument method compute pd based AUC area_under_curve(): compute AUC distribution() functions added bayesfactor_savagedickey(), bayesfactor_models() bayesfactor_inclusion() functions added Started adding plotting methods (currently see package) p_direction() hdi() probability_at() alias density_at() effective_sample() return effective sample size Stan-models mcse() return Monte Carlo standard error Stan-models","code":""},{"path":"https://easystats.github.io/bayestestR/news/index.html","id":"minor-changes-0-2-0","dir":"Changelog","previous_headings":"","what":"Minor changes","title":"bayestestR 0.2.0","text":"Improved documentation Improved testing p_direction(): improved printing rope() model-objects now returns HDI values parameters attribute consistent way Changes legend-labels plot.equivalence_test() align plots output print()-method (#78)","code":""},{"path":"https://easystats.github.io/bayestestR/news/index.html","id":"bug-fixes-0-2-0","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"bayestestR 0.2.0","text":"hdi() returned multiple class attributes (#72) Printing results hdi() failed ci-argument fractional parts percentage values (e.g. ci = 0.995). plot.equivalence_test() work properly brms-models (#76).","code":""},{"path":"https://easystats.github.io/bayestestR/news/index.html","id":"bayestestr-010","dir":"Changelog","previous_headings":"","what":"bayestestR 0.1.0","title":"bayestestR 0.1.0","text":"CRAN release: 2019-04-08 CRAN initial publication 0.1.0 release Added NEWS.md file track changes package","code":""}]
